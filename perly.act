case 2:
#line 143 "perly.y"
    { (yyval.ival) = (ps[(2) - (2)].val.ival); ;}
    break;

  case 3:
#line 145 "perly.y"
    {
			  parser->expect = XBLOCK;
			;}
    break;

  case 4:
#line 149 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			;}
    break;

  case 5:
#line 157 "perly.y"
    {
			  parser->expect = XSTATE;
			;}
    break;

  case 6:
#line 161 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			;}
    break;

  case 7:
#line 169 "perly.y"
    {
			  parser->expect = XSTATE;
			;}
    break;

  case 8:
#line 173 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			;}
    break;

  case 9:
#line 182 "perly.y"
    { (yyval.ival) = (ps[(1) - (2)].val.ival); newPROG(block_end((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval))); ;}
    break;

  case 10:
#line 187 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (4)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (4)].val.i_tkval));
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 11:
#line 196 "perly.y"
    { (yyval.ival) = block_start(TRUE); ;}
    break;

  case 12:
#line 200 "perly.y"
    { (yyval.ival) = (I32) Perl_allocmy(aTHX_ STR_WITH_LEN("$_"), 0); ;}
    break;

  case 13:
#line 204 "perly.y"
    {
		    PL_parser->expect = XSTATE; (yyval.ival) = block_start(TRUE);
		;}
    break;

  case 14:
#line 211 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (4)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (4)].val.i_tkval));
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 15:
#line 220 "perly.y"
    { (yyval.ival) = block_start(FALSE); ;}
    break;

  case 16:
#line 225 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 17:
#line 227 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 18:
#line 236 "perly.y"
    {
			  if (PVAL((ps[(1) - (2)].val.p_tkval)) || (ps[(2) - (2)].val.opval)) {
			      (yyval.opval) = newSTATEOP(0, PVAL((ps[(1) - (2)].val.p_tkval)), (ps[(2) - (2)].val.opval));
			      TOKEN_GETMAD((ps[(1) - (2)].val.p_tkval),
				  (ps[(2) - (2)].val.opval) ? cLISTOPx((yyval.opval))->op_first : (yyval.opval), 'L');
			  } else {
			      (yyval.opval) = IF_MAD(newOP(OP_NULL, 0), (ps[(2) - (2)].val.opval));
			  }
			;}
    break;

  case 19:
#line 249 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 20:
#line 251 "perly.y"
    {
			  (yyval.opval) = newOP(OP_NULL,0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'p');
			;}
    break;

  case 21:
#line 256 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  prepend_madprops((ps[(1) - (4)].val.i_tkval)->tk_mad, (yyval.opval), 'F');
			  (ps[(1) - (4)].val.i_tkval)->tk_mad = 0;
			  token_free((ps[(1) - (4)].val.i_tkval));
#else
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			  if (CvOUTSIDE(fmtcv) && !CvUNIQUE(CvOUTSIDE(fmtcv))) {
			      SvREFCNT_inc_simple_void(fmtcv);
			      pad_add_anon((SV*)fmtcv, OP_NULL);
			  }
			;}
    break;

  case 22:
#line 274 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  {
			      OP* o = newSVOP(OP_ANONCODE, 0,
				(SV*)newATTRSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval)));
			      (yyval.opval) = newOP(OP_NULL,0);
			      op_getmad(o,(yyval.opval),'&');
			      op_getmad((ps[(3) - (6)].val.opval),(yyval.opval),'n');
			      op_getmad((ps[(4) - (6)].val.opval),(yyval.opval),'s');
			      op_getmad((ps[(5) - (6)].val.opval),(yyval.opval),'a');
			      token_getmad((ps[(1) - (6)].val.i_tkval),(yyval.opval),'d');
			      append_madprops((ps[(6) - (6)].val.opval)->op_madprop, (yyval.opval), 0);
			      (ps[(6) - (6)].val.opval)->op_madprop = 0;
			  }
#else
			  newATTRSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 23:
#line 295 "perly.y"
    {
			  /* Unimplemented "my sub foo { }" */
			  SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newMYSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  token_getmad((ps[(1) - (6)].val.i_tkval),(yyval.opval),'d');
#else
			  newMYSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 24:
#line 307 "perly.y"
    {
#ifdef MAD
			  (yyval.opval) = package((ps[(3) - (4)].val.opval));
			  token_getmad((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  token_getmad((ps[(4) - (4)].val.i_tkval),(yyval.opval),';');
#else
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 25:
#line 322 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ ;}
    break;

  case 26:
#line 324 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = utilize(IVAL((ps[(1) - (7)].val.i_tkval)), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  token_getmad((ps[(1) - (7)].val.i_tkval),(yyval.opval),'o');
			  token_getmad((ps[(7) - (7)].val.i_tkval),(yyval.opval),';');
			  if (PL_parser->rsfp_filters &&
				      AvFILLp(PL_parser->rsfp_filters) >= 0)
			      append_madprops(newMADPROP('!', MAD_NULL, NULL, 0), (yyval.opval), 0);
#else
			  utilize(IVAL((ps[(1) - (7)].val.i_tkval)), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 27:
#line 339 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival), newCONDOP(0, (ps[(4) - (7)].val.opval), scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			;}
    break;

  case 28:
#line 347 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival), newCONDOP(0, (ps[(4) - (7)].val.opval), scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			;}
    break;

  case 29:
#line 355 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newGIVENOP((ps[(5) - (7)].val.opval), scope((ps[(7) - (7)].val.opval)), (PADOFFSET)(ps[(4) - (7)].val.ival)));
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			;}
    break;

  case 30:
#line 361 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), scope((ps[(6) - (6)].val.opval)))); ;}
    break;

  case 31:
#line 363 "perly.y"
    { (yyval.opval) = newWHENOP(0, scope((ps[(2) - (2)].val.opval))); ;}
    break;

  case 32:
#line 365 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  TOKEN_GETMAD((ps[(1) - (8)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(2) - (8)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (8)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (8)].val.i_tkval));
			;}
    break;

  case 33:
#line 375 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  TOKEN_GETMAD((ps[(1) - (8)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(2) - (8)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (8)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (8)].val.i_tkval));
			;}
    break;

  case 34:
#line 386 "perly.y"
    {
			  OP *initop = IF_MAD((ps[(4) - (11)].val.opval) ? (ps[(4) - (11)].val.opval) : newOP(OP_NULL, 0), (ps[(4) - (11)].val.opval));
			  OP *forop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      scalar((ps[(6) - (11)].val.opval)), (ps[(11) - (11)].val.opval), (ps[(9) - (11)].val.opval), (ps[(8) - (11)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  DO_MAD({ forop = newUNOP(OP_NULL, 0, forop); })
			  (yyval.opval) = block_end((ps[(3) - (11)].val.ival), forop);
			  TOKEN_GETMAD((ps[(1) - (11)].val.i_tkval),(yyval.opval),'3');
			  TOKEN_GETMAD((ps[(2) - (11)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (11)].val.i_tkval),(yyval.opval),'1');
			  TOKEN_GETMAD((ps[(7) - (11)].val.i_tkval),(yyval.opval),'2');
			  TOKEN_GETMAD((ps[(10) - (11)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (11)].val.i_tkval));
			;}
    break;

  case 35:
#line 406 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (9)].val.ival), newFOROP(0, (ps[(4) - (9)].val.opval), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (9)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(2) - (9)].val.i_tkval),(yyval.opval),'d');
			  TOKEN_GETMAD((ps[(5) - (9)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(7) - (9)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (9)].val.i_tkval));
			;}
    break;

  case 36:
#line 415 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(4) - (8)].val.ival), newFOROP(0,
				      mod((ps[(2) - (8)].val.opval), OP_ENTERLOOP), (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (8)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(3) - (8)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(6) - (8)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (8)].val.i_tkval));
			;}
    break;

  case 37:
#line 424 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			;}
    break;

  case 38:
#line 433 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			  PL_parser->copline = NOLINE;
			;}
    break;

  case 39:
#line 440 "perly.y"
    {
			  int save_3_latefree = (ps[(3) - (5)].val.opval)->op_latefree;
			  (ps[(3) - (5)].val.opval)->op_latefree = 1;
			  package((ps[(3) - (5)].val.opval));
			  (ps[(3) - (5)].val.opval)->op_latefree = save_3_latefree;
			  if ((ps[(2) - (5)].val.opval)) {
			      int save_2_latefree = (ps[(2) - (5)].val.opval)->op_latefree;
			      (ps[(2) - (5)].val.opval)->op_latefree = 1;
			      package_version((ps[(2) - (5)].val.opval));
			      (ps[(2) - (5)].val.opval)->op_latefree = save_2_latefree;
			  }
			;}
    break;

  case 40:
#line 453 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), (OP*)NULL, 0);
			  op_free((ps[(3) - (8)].val.opval));
			  if ((ps[(2) - (8)].val.opval))
			      op_free((ps[(2) - (8)].val.opval));
			  TOKEN_GETMAD((ps[(4) - (8)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(8) - (8)].val.i_tkval),(yyval.opval),'}');
			  if (PL_parser->copline > (line_t)IVAL((ps[(4) - (8)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(4) - (8)].val.i_tkval));
			;}
    break;

  case 41:
#line 466 "perly.y"
    {
			  PL_parser->expect = XSTATE;
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),';');
			;}
    break;

  case 42:
#line 472 "perly.y"
    {
			  PL_parser->expect = XSTATE;
			  (yyval.opval) = IF_MAD(newOP(OP_NULL, 0), (OP*)NULL);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),';');
			  PL_parser->copline = NOLINE;
			;}
    break;

  case 43:
#line 482 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 44:
#line 484 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 45:
#line 486 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'i');
			;}
    break;

  case 46:
#line 490 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'i');
			;}
    break;

  case 47:
#line 494 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			;}
    break;

  case 48:
#line 498 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			;}
    break;

  case 49:
#line 502 "perly.y"
    { (yyval.opval) = newFOROP(0, (OP*)NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), (OP*)NULL);
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			  PL_parser->copline = (line_t)IVAL((ps[(2) - (3)].val.i_tkval));
			;}
    break;

  case 50:
#line 507 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), scope((ps[(1) - (3)].val.opval))); ;}
    break;

  case 51:
#line 512 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 52:
#line 514 "perly.y"
    { ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS; (yyval.opval) = scope((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 53:
#line 518 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[(1) - (6)].val.i_tkval));
			    (yyval.opval) = newCONDOP(0, newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)), scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((ps[(1) - (6)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 54:
#line 529 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 55:
#line 531 "perly.y"
    { (yyval.opval) = scope((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 56:
#line 538 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); ;}
    break;

  case 57:
#line 544 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 59:
#line 550 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; ;}
    break;

  case 61:
#line 558 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 62:
#line 563 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 63:
#line 567 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 64:
#line 571 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 65:
#line 576 "perly.y"
    {
#ifdef MAD
			  YYSTYPE tmplval;
			  tmplval.pval = NULL;
			  (yyval.p_tkval) = newTOKEN(OP_NULL, tmplval, 0);
#else
			  (yyval.p_tkval) = NULL;
#endif
			;}
    break;

  case 67:
#line 588 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 68:
#line 589 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 69:
#line 593 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 70:
#line 599 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 71:
#line 604 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 72:
#line 609 "perly.y"
    { const char *const name = SvPV_nolen_const(((SVOP*)(ps[(1) - (1)].val.opval))->op_sv);
			  if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 73:
#line 619 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 75:
#line 625 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 76:
#line 627 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),':');
			;}
    break;

  case 77:
#line 631 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL, 0),
				    (OP*)NULL
				);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),':');
			;}
    break;

  case 78:
#line 641 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),':');
			;}
    break;

  case 79:
#line 645 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL, 0),
				    (OP*)NULL
				);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),':');
			;}
    break;

  case 80:
#line 654 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 81:
#line 655 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL,0),
				    (OP*)NULL
				);
			  PL_parser->expect = XSTATE;
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),';');
			;}
    break;

  case 82:
#line 666 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 83:
#line 670 "perly.y"
    { (yyval.opval) = newLOGOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 84:
#line 674 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 86:
#line 682 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  token_getmad((ps[(2) - (2)].val.i_tkval),op,',');
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), op);
#else
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
#endif
			;}
    break;

  case 87:
#line 692 "perly.y"
    { 
			  OP* term = (ps[(3) - (3)].val.opval);
			  DO_MAD(
			      term = newUNOP(OP_NULL, 0, term);
			      token_getmad((ps[(2) - (3)].val.i_tkval),term,',');
			  )
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			;}
    break;

  case 89:
#line 705 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (3)].val.i_tkval)), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF(IVAL((ps[(1) - (3)].val.i_tkval)),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 90:
#line 710 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (5)].val.i_tkval)), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF(IVAL((ps[(1) - (5)].val.i_tkval)),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 91:
#line 717 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'A');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 92:
#line 726 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'A');
			;}
    break;

  case 93:
#line 732 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			;}
    break;

  case 94:
#line 738 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 95:
#line 746 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 96:
#line 750 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (4)].val.i_tkval)), 0, (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 97:
#line 756 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, (OP*)NULL, (ps[(3) - (3)].val.opval)); ;}
    break;

  case 98:
#line 759 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			;}
    break;

  case 101:
#line 774 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 102:
#line 781 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 103:
#line 786 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 104:
#line 794 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 105:
#line 801 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 106:
#line 808 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (6)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(5) - (6)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 107:
#line 818 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 108:
#line 827 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval))));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 109:
#line 834 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval)))));
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 110:
#line 843 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval)))));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 111:
#line 850 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval))));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 112:
#line 856 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (6)].val.i_tkval),(yyval.opval),')');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 113:
#line 863 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 114:
#line 868 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), (OP*)NULL);
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),')');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 115:
#line 878 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), IVAL((ps[(2) - (3)].val.i_tkval)), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 116:
#line 882 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 117:
#line 886 "perly.y"
    {   if (IVAL((ps[(2) - (3)].val.i_tkval)) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 118:
#line 892 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 119:
#line 896 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 120:
#line 900 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 121:
#line 904 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 122:
#line 908 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 123:
#line 912 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 124:
#line 916 "perly.y"
    {
			  (yyval.opval) = newRANGE(IVAL((ps[(2) - (3)].val.i_tkval)), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  DO_MAD({
			      UNOP *op;
			      op = (UNOP*)(yyval.opval);
			      op = (UNOP*)op->op_first;	/* get to flop */
			      op = (UNOP*)op->op_first;	/* get to flip */
			      op = (UNOP*)op->op_first;	/* get to range */
			      token_getmad((ps[(2) - (3)].val.i_tkval),(OP*)op,'o');
			    })
			;}
    break;

  case 125:
#line 928 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 126:
#line 932 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 127:
#line 936 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 128:
#line 940 "perly.y"
    { (yyval.opval) = bind_match(IVAL((ps[(2) - (3)].val.i_tkval)), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),
				((yyval.opval)->op_type == OP_NOT
				    ? ((UNOP*)(yyval.opval))->op_first : (yyval.opval)),
				'~');
			;}
    break;

  case 129:
#line 950 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 130:
#line 954 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newUNOP(OP_NULL, 0, (ps[(2) - (2)].val.opval)),
				    (ps[(2) - (2)].val.opval)
				);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'+');
			;}
    break;

  case 131:
#line 961 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 132:
#line 965 "perly.y"
    { (yyval.opval) = newUNOP(OP_COMPLEMENT, 0, scalar((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 133:
#line 969 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					mod(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC));
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 134:
#line 974 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					mod(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 135:
#line 979 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					mod(scalar((ps[(2) - (2)].val.opval)), OP_PREINC));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 136:
#line 984 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					mod(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 137:
#line 993 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 138:
#line 998 "perly.y"
    { (yyval.opval) = newANONLIST((OP*)NULL);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 139:
#line 1003 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 140:
#line 1009 "perly.y"
    { (yyval.opval) = newANONHASH((OP*)NULL);
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 141:
#line 1015 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  OP_GETMAD((ps[(3) - (5)].val.opval),(yyval.opval),'s');
			  OP_GETMAD((ps[(4) - (5)].val.opval),(yyval.opval),'a');
			;}
    break;

  case 142:
#line 1026 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), IVAL((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 143:
#line 1030 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, scope((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'D');
			;}
    break;

  case 144:
#line 1034 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    op_prepend_elem(OP_LIST,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar((ps[(2) - (4)].val.opval))
				)),(OP*)NULL)); dep();
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 145:
#line 1046 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    op_append_elem(OP_LIST,
				(ps[(4) - (5)].val.opval),
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar((ps[(2) - (5)].val.opval))
				)))); dep();
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 146:
#line 1059 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    op_prepend_elem(OP_LIST,
				scalar(newCVREF(0,scalar((ps[(2) - (4)].val.opval)))), (OP*)NULL)); dep();
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 147:
#line 1067 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    op_prepend_elem(OP_LIST,
				(ps[(4) - (5)].val.opval),
				scalar(newCVREF(0,scalar((ps[(2) - (5)].val.opval)))))); dep();
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 152:
#line 1083 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'?');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),':');
			;}
    break;

  case 153:
#line 1088 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, mod((ps[(2) - (2)].val.opval),OP_REFGEN));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 154:
#line 1092 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 155:
#line 1094 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),IVAL((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'k');
			;}
    break;

  case 156:
#line 1098 "perly.y"
    { (yyval.opval) = sawparens(IF_MAD(newUNOP(OP_NULL,0,(ps[(2) - (3)].val.opval)), (ps[(2) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 157:
#line 1103 "perly.y"
    { (yyval.opval) = IF_MAD(newUNOP(OP_NULL,0,(ps[(1) - (1)].val.opval)), (ps[(1) - (1)].val.opval)); ;}
    break;

  case 158:
#line 1105 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 159:
#line 1110 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 160:
#line 1112 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 161:
#line 1114 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 162:
#line 1116 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 163:
#line 1118 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));;}
    break;

  case 164:
#line 1120 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 165:
#line 1122 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 166:
#line 1131 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 167:
#line 1142 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 168:
#line 1144 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 169:
#line 1146 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 170:
#line 1151 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			  DO_MAD({
			      OP* op = (yyval.opval);
			      if (op->op_type == OP_CONST) { /* defeat const fold */
				op = (OP*)op->op_madprop->mad_val;
			      }
			      token_getmad((ps[(2) - (4)].val.i_tkval),op,'(');
			      token_getmad((ps[(4) - (4)].val.i_tkval),op,')');
			  })
			;}
    break;

  case 171:
#line 1164 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 172:
#line 1169 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 173:
#line 1174 "perly.y"
    { (yyval.opval) = newLOOPEX(IVAL((ps[(1) - (2)].val.i_tkval)),(ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 174:
#line 1178 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 175:
#line 1182 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 176:
#line 1186 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 177:
#line 1190 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 178:
#line 1194 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.i_tkval) ? OPf_SPECIAL : 0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 179:
#line 1198 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.i_tkval) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 180:
#line 1202 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 181:
#line 1204 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); ;}
    break;

  case 182:
#line 1207 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 183:
#line 1211 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[(1) - (3)].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 184:
#line 1217 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 185:
#line 1220 "perly.y"
    { (yyval.opval) = (IVAL((ps[(1) - (3)].val.i_tkval)) == OP_NOT)
			    ? newUNOP(IVAL((ps[(1) - (3)].val.i_tkval)), 0, newSVOP(OP_CONST, 0, newSViv(0)))
			    : newOP(IVAL((ps[(1) - (3)].val.i_tkval)), OPf_SPECIAL);

			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 186:
#line 1229 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[(1) - (4)].val.i_tkval)), 0, (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 187:
#line 1235 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (4)].val.opval), (ps[(3) - (4)].val.opval), 1);
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 190:
#line 1242 "perly.y"
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'X');
			;}
    break;

  case 192:
#line 1252 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval));
			  DO_MAD(
			      token_getmad((ps[(1) - (3)].val.i_tkval),(yyval.opval),'d');
			      append_madprops((ps[(3) - (3)].val.opval)->op_madprop, (yyval.opval), 'a');
			      (ps[(3) - (3)].val.opval)->op_madprop = 0;
			  )
			;}
    break;

  case 193:
#line 1260 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),IVAL((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'d');
			;}
    break;

  case 194:
#line 1267 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 195:
#line 1272 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 196:
#line 1277 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 197:
#line 1279 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 198:
#line 1281 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 199:
#line 1286 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 200:
#line 1288 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 201:
#line 1292 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 202:
#line 1294 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 203:
#line 1298 "perly.y"
    { (yyval.i_tkval) = (ps[(1) - (1)].val.i_tkval); ;}
    break;

  case 204:
#line 1300 "perly.y"
    { munge_qwlist_to_paren_list((ps[(1) - (1)].val.opval)); ;}
    break;

  case 205:
#line 1302 "perly.y"
    { (yyval.i_tkval) = (ps[(3) - (3)].val.i_tkval); ;}
    break;

  case 206:
#line 1308 "perly.y"
    { PL_parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); ;}
    break;

  case 207:
#line 1312 "perly.y"
    { (yyval.opval) = newCVREF(IVAL((ps[(1) - (2)].val.i_tkval)),(ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'&');
			;}
    break;

  case 208:
#line 1318 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'$');
			;}
    break;

  case 209:
#line 1324 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'@');
			;}
    break;

  case 210:
#line 1330 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'%');
			;}
    break;

  case 211:
#line 1336 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'l');
			;}
    break;

  case 212:
#line 1342 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'*');
			;}
    break;

  case 213:
#line 1349 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
    break;

  case 214:
#line 1351 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
    break;

  case 215:
#line 1353 "perly.y"
    { (yyval.opval) = scope((ps[(1) - (1)].val.opval)); ;}
    break;

  case 216:
#line 1356 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;


/* Line 1267 of yacc.c.  */

      default: break;
    
