AOP	toke.c	/^#define AOP(f) return(yylval.ival=f,expectterm = T/
ASSERT	malloc.c	/^#define	ASSERT(p)   if (!(p)) botch("p"); else$/
BAOP	toke.c	/^#define BAOP(f) return(yylval.ival=f,expectterm = /
BOOP	toke.c	/^#define BOOP(f) return(yylval.ival=f,expectterm = /
CHKLEN	form.c	/^#define CHKLEN(allow) \\$/
EOP	toke.c	/^#define EOP(f) return(yylval.ival=f,expectterm = T/
EXTEND	pp.c	/^#define EXTEND(n)	if (n > 0 && stack->ary_fill + n/
FL	toke.c	/^#define FL(f) return(yylval.ival=f,expectterm = FA/
FL2	toke.c	/^#define FL2(f) return(yylval.ival=f,expectterm = F/
FOP	toke.c	/^#define FOP(f) return(yylval.ival=f,expectterm = F/
FOP2	toke.c	/^#define FOP2(f) return(yylval.ival=f,expectterm = /
FOP22	toke.c	/^#define FOP22(f) return(yylval.ival=f,expectterm =/
FOP25	toke.c	/^#define FOP25(f) return(yylval.ival=f,expectterm =/
FOP3	toke.c	/^#define FOP3(f) return(yylval.ival=f,expectterm = /
FOP4	toke.c	/^#define FOP4(f) return(yylval.ival=f,expectterm = /
FTST	toke.c	/^#define FTST(f) return(yylval.ival=f,expectterm = /
FUN0	toke.c	/^#define FUN0(f) return(yylval.ival = f,expectterm /
FUN1	toke.c	/^#define FUN1(f) return(yylval.ival = f,expectterm /
FUN2	toke.c	/^#define FUN2(f) return(yylval.ival = f,expectterm /
FUN2x	toke.c	/^#define FUN2x(f) return(yylval.ival = f,expectterm/
FUN3	toke.c	/^#define FUN3(f) return(yylval.ival = f,expectterm /
FUN4	toke.c	/^#define FUN4(f) return(yylval.ival = f,expectterm /
FUN5	toke.c	/^#define FUN5(f) return(yylval.ival = f,expectterm /
HFUN	toke.c	/^#define HFUN(f) return(yylval.ival=f,expectterm = /
HFUN3	toke.c	/^#define HFUN3(f) return(yylval.ival=f,expectterm =/
HTOV	util.c	/^#define HTOV(name,type)						\\$/
ISMULT1	regcomp.c	/^#define	ISMULT1(c)	((c) == '*' || (c) == '+' || (c/
ISMULT2	regcomp.c	/^#define	ISMULT2(s)	((*s) == '*' || (*s) == '+' || /
LFUN	toke.c	/^#define LFUN(f) return(yylval.ival=f,expectterm = /
LOOPX	toke.c	/^#define LOOPX(f) return(yylval.ival=f,expectterm =/
LOP	toke.c	/^#define LOP(f) return(yylval.ival = f, \\$/
META	toke.c	/^#define META(c) ((c) | 128)$/
MOP	toke.c	/^#define MOP(f) return(yylval.ival=f,expectterm = T/
Mmain	main.c	/^main(argc, argv, env)$/
OLDLOP	toke.c	/^#define OLDLOP(f) return(yylval.ival=f,expectterm /
OPERATOR	toke.c	/^#define OPERATOR(retval) return (expectterm = TRUE/
PERL_META	toke.c	/^#define PERL_META(c) ((c) | 128)$/
PMOP	toke.c	/^#define PMOP(f) return(yylval.ival=f,expectterm = /
PUSHc	pp.c	/^#define PUSHc(c,l)	str_nset(TMP, (c), (l)); PUSHTM/
PUSHn	pp.c	/^#define PUSHn(n)	str_numset(TMP, (n)); PUSHTMP$/
PUSHs	pp.c	/^#define PUSHs(s)	(*++SP = (s))$/
PWOP	toke.c	/^#define PWOP(f) return(yylval.ival=f,expectterm = /
RETURN	toke.c	/^#define RETURN(retval) return (bufptr = s,(int)ret/
ROP	toke.c	/^#define ROP(f) return(yylval.ival=f,expectterm = T/
SETc	pp.c	/^#define SETc(c,l)	str_set(TMP, (c), (l)); SETTMP$/
SETn	pp.c	/^#define SETn(n)		str_numset(TMP, (n)); SETTMP$/
SETs	pp.c	/^#define SETs(s)		*SP = s$/
SHOP	toke.c	/^#define SHOP(f) return(yylval.ival=f,expectterm = /
TERM	toke.c	/^#define TERM(retval) return (CLINE, expectterm = F/
UNI	toke.c	/^#define UNI(f) return(yylval.ival = f, \\$/
VTOH	util.c	/^#define VTOH(name,type)						\\$/
YYBACKUP	perly.c	/^#define YYBACKUP( newtoken, newvalue )\\$/
YYRECOVERING	perly.c	/^#define YYRECOVERING()	(!!yyerrflag)$/
aadd	stab.c	/^aadd(stab)$/
aclear	array.c	/^aclear(ar)$/
add_label	cons.c	/^add_label(lbl,cmd)$/
addcond	cons.c	/^addcond(cmd, arg)$/
addflags	consarg.c	/^addflags(i,flags,arg)$/
addloop	cons.c	/^addloop(cmd, arg)$/
afake	array.c	/^afake(stab,size,strp)$/
afetch	array.c	/^afetch(ar,key,lval)$/
afill	array.c	/^afill(ar, fill)$/
afree	array.c	/^afree(ar)$/
alen	array.c	/^alen(ar)$/
anew	array.c	/^anew(stab)$/
apop	array.c	/^apop(ar)$/
append_line	cons.c	/^append_line(head,tail)$/
apply	doio.c	/^apply(type,arglast)$/
apush	array.c	/^apush(ar,val)$/
arg_common	consarg.c	/^arg_common(arg,exprnum,marking)$/
arg_free	cons.c	/^arg_free(arg)$/
arg_tosave	cons.c	/^arg_tosave(arg,willsave)$/
ashift	array.c	/^ashift(ar)$/
astore	array.c	/^astore(ar,key,val)$/
aunshift	array.c	/^aunshift(ar,num)$/
block_head	cons.c	/^block_head(tail)$/
botch	malloc.c	/^botch(s)$/
cando	doio.c	/^cando(bit, effective, statbufp)$/
castulong	util.c	/^castulong(f)$/
check_uni	toke.c	/^check_uni() {$/
checkcomma	toke.c	/^checkcomma(s,name,what)$/
chsize	doio.c	/^int chsize(fd, length)$/
cmd_exec	cmd.c	/^cmd_exec(cmdparm,gimme,sp)$/
cmd_free	cons.c	/^cmd_free(cmd)$/
cmd_to_arg	consarg.c	/^cmd_to_arg(cmd)$/
cmd_tosave	cons.c	/^cmd_tosave(cmd,willsave)$/
copyopt	cmd.c	/^copyopt(cmd,which)$/
countlines	form.c	/^countlines(s,size)$/
cpy7bit	cons.c	/^cpy7bit(d,s,l)$/
cpytill	util.c	/^cpytill(to,from,fromend,delim,retlen)$/
cryptfilter	usersub.c	/^cryptfilter( fil )$/
cryptswitch	usersub.c	/^cryptswitch()$/
cval_to_arg	consarg.c	/^cval_to_arg(cval)$/
deb	cmd.c	/^void deb(pat,a1,a2,a3,a4,a5,a6,a7,a8)$/
dehoist	consarg.c	/^dehoist(arg,i)$/
do_accept	doio.c	/^do_accept(str, nstab, gstab)$/
do_aexec	doio.c	/^do_aexec(really,arglast)$/
do_aprint	doio.c	/^do_aprint(arg,fp,arglast)$/
do_assign	doarg.c	/^do_assign(arg,gimme,arglast)$/
do_bind	doio.c	/^do_bind(stab, arglast)$/
do_caller	dolist.c	/^do_caller(arg,maxarg,gimme,arglast)$/
do_chop	doarg.c	/^do_chop(astr,str)$/
do_close	doio.c	/^do_close(stab,explicit)$/
do_connect	doio.c	/^do_connect(stab, arglast)$/
do_ctl	doio.c	/^do_ctl(optype,stab,func,argstr)$/
do_defined	doarg.c	/^do_defined(str,arg,gimme,arglast)$/
do_dirop	doio.c	/^do_dirop(optype,stab,gimme,arglast)$/
do_each	dolist.c	/^do_each(str,hash,gimme,arglast)$/
do_eof	doio.c	/^do_eof(stab)$/
do_eval	perl.c	/^do_eval(str,optype,stash,savecmd,gimme,arglast)$/
do_exec	doio.c	/^do_exec(cmd)$/
do_execfree	doio.c	/^do_execfree()$/
do_fttext	doio.c	/^do_fttext(arg,str)$/
do_getsockname	doio.c	/^do_getsockname(optype, stab, arglast)$/
do_ggrent	doio.c	/^do_ggrent(which,gimme,arglast)$/
do_ghent	doio.c	/^do_ghent(which,gimme,arglast)$/
do_gnent	doio.c	/^do_gnent(which,gimme,arglast)$/
do_gpent	doio.c	/^do_gpent(which,gimme,arglast)$/
do_gpwent	doio.c	/^do_gpwent(which,gimme,arglast)$/
do_grep	dolist.c	/^do_grep(arg,str,gimme,arglast)$/
do_gsent	doio.c	/^do_gsent(which,gimme,arglast)$/
do_ipcctl	doio.c	/^do_ipcctl(optype, arglast)$/
do_ipcget	doio.c	/^do_ipcget(optype, arglast)$/
do_join	doarg.c	/^do_join(str,arglast)$/
do_kv	dolist.c	/^do_kv(str,hash,kv,gimme,arglast)$/
do_listen	doio.c	/^do_listen(stab, arglast)$/
do_match	dolist.c	/^do_match(str,arg,gimme,arglast)$/
do_msgrcv	doio.c	/^do_msgrcv(arglast)$/
do_msgsnd	doio.c	/^do_msgsnd(arglast)$/
do_open	doio.c	/^do_open(stab,name,len)$/
do_pack	doarg.c	/^do_pack(str,arglast)$/
do_pipe	doio.c	/^do_pipe(str, rstab, wstab)$/
do_print	doio.c	/^do_print(str,fp)$/
do_push	doarg.c	/^do_push(ary,arglast)$/
do_range	dolist.c	/^do_range(gimme,arglast)$/
do_repeatary	dolist.c	/^do_repeatary(arglast)$/
do_reverse	dolist.c	/^do_reverse(arglast)$/
do_seek	doio.c	/^do_seek(stab, pos, whence)$/
do_select	doio.c	/^do_select(gimme,arglast)$/
do_semop	doio.c	/^do_semop(arglast)$/
do_shmio	doio.c	/^do_shmio(optype, arglast)$/
do_shutdown	doio.c	/^do_shutdown(stab, arglast)$/
do_slice	dolist.c	/^do_slice(stab,str,numarray,lval,gimme,arglast)$/
do_socket	doio.c	/^do_socket(stab, arglast)$/
do_sopt	doio.c	/^do_sopt(optype, stab, arglast)$/
do_sort	dolist.c	/^do_sort(str,arg,gimme,arglast)$/
do_spair	doio.c	/^do_spair(stab1, stab2, arglast)$/
do_splice	dolist.c	/^do_splice(ary,gimme,arglast)$/
do_split	dolist.c	/^do_split(str,spat,limit,gimme,arglast)$/
do_sprintf	doarg.c	/^do_sprintf(str,len,sarg)$/
do_sreverse	dolist.c	/^do_sreverse(str,arglast)$/
do_stat	doio.c	/^do_stat(str,arg,gimme,arglast)$/
do_study	doarg.c	/^do_study(str,arg,gimme,arglast)$/
do_subr	doarg.c	/^do_subr(arg,gimme,arglast)$/
do_subst	doarg.c	/^do_subst(str,arg,sp)$/
do_syscall	doarg.c	/^do_syscall(arglast)$/
do_tell	doio.c	/^do_tell(stab)$/
do_time	dolist.c	/^do_time(str,tmbuf,gimme,arglast)$/
do_tms	dolist.c	/^do_tms(str,gimme,arglast)$/
do_trans	doarg.c	/^do_trans(str,arg)$/
do_truncate	doio.c	/^do_truncate(str,arg,gimme,arglast)$/
do_try	perl.c	/^do_try(cmd,gimme,arglast)$/
do_undef	doarg.c	/^do_undef(str,arg,gimme,arglast)$/
do_unpack	dolist.c	/^do_unpack(str,gimme,arglast)$/
do_unshift	doarg.c	/^do_unshift(ary,arglast)$/
do_vec	doarg.c	/^do_vec(lvalue,astr,arglast)$/
do_vecset	doarg.c	/^do_vecset(mstr,str)$/
do_vop	doarg.c	/^do_vop(optype,str,left,right)$/
do_write	form.c	/^do_write(orec,stab,sp)$/
dodb	cons.c	/^dodb(cur)$/
doencodes	doarg.c	/^doencodes(str, s, len)$/
dump	dump.c	/^static void dump(arg1,arg2,arg3,arg4,arg5)$/
dump_all	dump.c	/^dump_all()$/
dump_arg	dump.c	/^dump_arg(arg)$/
dump_cmd	dump.c	/^dump_cmd(cmd,alt)$/
dump_flags	dump.c	/^dump_flags(b,flags)$/
dump_spat	dump.c	/^dump_spat(spat)$/
dump_stab	dump.c	/^dump_stab(stab)$/
dumpfds	util.c	/^dumpfds(s)$/
dup2	util.c	/^dup2(oldfd,newfd)$/
envix	util.c	/^envix(nam)$/
eval	eval.c	/^eval(arg,gimme,sp)$/
evalstatic	consarg.c	/^evalstatic(arg)$/
fatal	util.c	/^void fatal(pat,a1,a2,a3,a4)$/
fbmcompile	util.c	/^fbmcompile(str, iflag)$/
fbminstr	util.c	/^fbminstr(big, bigend, littlestr)$/
find_beginning	perl.c	/^find_beginning()$/
findbucket	malloc.c	/^findbucket(freep, srchlen)$/
fixl	consarg.c	/^fixl(type,arg)$/
forceword	toke.c	/^forceword(s)$/
form_parseargs	form.c	/^form_parseargs(fcmd)$/
format	form.c	/^format(orec,fcmd,sp)$/
free	malloc.c	/^free(mp)$/
free_arg	consarg.c	/^free_arg(arg)$/
fstab	stab.c	/^fstab(name)$/
function	doarg.c	/^ #pragma function(memcmp)$/
genstab	stab.c	/^genstab()$/
grow_dlevel	cmd.c	/^grow_dlevel()$/
growstr	util.c	/^growstr(strptr,curlen,newlen)$/
hadd	stab.c	/^hadd(stab)$/
hclear	hash.c	/^hclear(tb,dodbm)$/
hdbmclose	hash.c	/^hdbmclose(tb)$/
hdbmopen	hash.c	/^hdbmopen(tb,fname,mode)$/
hdbmstore	hash.c	/^hdbmstore(tb,key,klen,str)$/
hdelete	hash.c	/^hdelete(tb,key,klen)$/
hentdelayfree	hash.c	/^hentdelayfree(hent)$/
hentfree	hash.c	/^hentfree(hent)$/
hfetch	hash.c	/^hfetch(tb,key,klen,lval)$/
hfree	hash.c	/^hfree(tb,dodbm)$/
hfreeentries	hash.c	/^hfreeentries(tb,dodbm)$/
hide_ary	consarg.c	/^hide_ary(arg)$/
hiterinit	hash.c	/^hiterinit(tb)$/
hiterkey	hash.c	/^hiterkey(entry,retlen)$/
hiternext	hash.c	/^hiternext(tb)$/
hiterval	hash.c	/^hiterval(tb,entry)$/
hnew	hash.c	/^hnew(lookat)$/
hoistmust	toke.c	/^hoistmust(spat)$/
hsplit	hash.c	/^hsplit(tb)$/
hstore	hash.c	/^hstore(tb,key,klen,val,hash)$/
htonl	util.c	/^htonl(l)$/
if	pp.c	/^    if (debug) {$/
incpush	perl.c	/^incpush(p)$/
ingroup	doio.c	/^ingroup(testgid,effective)$/
init_debugger	perl.c	/^init_debugger()$/
init_lexer	perl.c	/^init_lexer()$/
init_loop_stack	perl.c	/^init_loop_stack()$/
init_main_stash	perl.c	/^init_main_stash()$/
init_perllib	perl.c	/^init_perllib()$/
init_postdump_symbols	perl.c	/^init_postdump_symbols(argc,argv,env)$/
init_predump_symbols	perl.c	/^init_predump_symbols()$/
init_stack	perl.c	/^init_stack()$/
instr	util.c	/^instr(big, little)$/
interp	str.c	/^interp(str,src,sp)$/
intrinsic	doarg.c	/^ #pragma intrinsic(memcmp)$/
intrpcompile	str.c	/^intrpcompile(src)$/
invert	cons.c	/^invert(cmd)$/
jmaybe	consarg.c	/^jmaybe(arg)$/
keyword	toke.c	/^keyword(d)$/
l	consarg.c	/^l(arg)$/
lcase	str.c	/^lcase(s,send)$/
listish	consarg.c	/^listish(arg)$/
load_format	toke.c	/^load_format()$/
localize	consarg.c	/^localize(arg)$/
looks_like_number	doio.c	/^looks_like_number(str)$/
lop	toke.c	/^lop(f,s)$/
magicalize	perl.c	/^magicalize(list)$/
magicname	perl.c	/^magicname(sym,name,namlen)$/
make_acmd	cons.c	/^make_acmd(type,stab,cond,arg)$/
make_ccmd	cons.c	/^make_ccmd(type,debuggable,arg,cblock)$/
make_cswitch	cons.c	/^make_cswitch(head,count)$/
make_form	cons.c	/^make_form(stab,fcmd)$/
make_icmd	cons.c	/^make_icmd(type,arg,cblock)$/
make_list	consarg.c	/^make_list(arg)$/
make_match	consarg.c	/^make_match(type,expr,spat)$/
make_nswitch	cons.c	/^make_nswitch(head,count)$/
make_op	consarg.c	/^make_op(type,newlen,arg1,arg2,arg3)$/
make_split	consarg.c	/^make_split(stab,arg,limarg)$/
make_sub	cons.c	/^make_sub(name,cmd)$/
make_usub	cons.c	/^make_usub(name, ix, subaddr, filename)$/
malloc	malloc.c	/^malloc(nbytes)$/
maybelistish	consarg.c	/^maybelistish(optype, arg)$/
mess	util.c	/^mess(pat,a1,a2,a3,a4)$/
mod_match	consarg.c	/^mod_match(type,left,pat)$/
morecore	malloc.c	/^morecore(bucket)$/
moreswitches	perl.c	/^moreswitches(s)$/
mstats	malloc.c	/^mstats(s)$/
my_bcopy	util.c	/^my_bcopy(from,to,len)$/
my_bzero	util.c	/^my_bzero(loc,len)$/
my_exit	perl.c	/^my_exit(status)$/
my_memcmp	util.c	/^my_memcmp(s1,s2,len)$/
my_setenv	util.c	/^my_setenv(nam,val)$/
my_swap	util.c	/^my_swap(s)$/
my_unexec	perl.c	/^my_unexec()$/
mylstat	doio.c	/^mylstat(arg,str)$/
mypclose	util.c	/^mypclose(ptr)$/
mypfiopen	usersub.c	/^mypfiopen(fil,func)		\/* open a pipe to function ca/
mypopen	util.c	/^mypopen(cmd,mode)$/
mystat	doio.c	/^mystat(arg,str)$/
nextargv	doio.c	/^nextargv(stab)$/
ninstr	util.c	/^ninstr(big, bigend, little, lend)$/
nothing_in_common	consarg.c	/^nothing_in_common(arg1,arg2)$/
nsavestr	util.c	/^nsavestr(str, len)$/
ntohl	util.c	/^ntohl(l)$/
op_new	consarg.c	/^op_new(numargs)$/
open_script	perl.c	/^open_script(scriptname,dosearch,str)$/
opt_arg	cons.c	/^opt_arg(cmd,fliporflop,acmd)$/
over	cons.c	/^over(eachstab,cmd)$/
parselist	str.c	/^parselist(str)$/
perl_alloc	perl.c	/^perl_alloc()$/
perl_callback	perl.c	/^perl_callback(subname, sp, gimme, hasargs, numargs/
perl_callv	perl.c	/^perl_callv(subname, sp, gimme, argv)$/
perl_construct	perl.c	/^perl_construct( interp )$/
perl_destruct	perl.c	/^perl_destruct(interp)$/
perl_free	perl.c	/^perl_free(interp)$/
perl_parse	perl.c	/^perl_parse(interp, argc, argv, env)$/
perl_run	perl.c	/^perl_run(interp)$/
pidgone	util.c	/^pidgone(pid,status)$/
pp_aassign	pp.c	/^pp_aassign(ARGS)$/
pp_accept	pp.c	/^pp_accept(ARGS)$/
pp_add	pp.c	/^pp_add(ARGS)$/
pp_aelem	pp.c	/^pp_aelem(ARGS)$/
pp_alarm	pp.c	/^pp_alarm(ARGS)$/
pp_and	pp.c	/^pp_and(ARGS)$/
pp_array	pp.c	/^pp_array(ARGS)$/
pp_aslice	pp.c	/^pp_aslice(ARGS)$/
pp_assign	pp.c	/^pp_assign(ARGS)$/
pp_atan	pp.c	/^pp_atan(ARGS)$/
pp_bind	pp.c	/^pp_bind(ARGS)$/
pp_binmode	pp.c	/^pp_binmode(ARGS)$/
pp_bit_and	pp.c	/^pp_bit_and(ARGS)$/
pp_bit_or	pp.c	/^pp_bit_or(ARGS)$/
pp_caller	pp.c	/^pp_caller(ARGS)$/
pp_chdir	pp.c	/^pp_chdir(ARGS)$/
pp_chmod	pp.c	/^pp_chmod(ARGS)$/
pp_chop	pp.c	/^pp_chop(ARGS)$/
pp_chown	pp.c	/^pp_chown(ARGS)$/
pp_chroot	pp.c	/^pp_chroot(ARGS)$/
pp_close	pp.c	/^pp_close(ARGS)$/
pp_closedir	pp.c	/^pp_closedir(ARGS)$/
pp_comma	pp.c	/^pp_comma(ARGS)$/
pp_complement	pp.c	/^pp_complement(ARGS)$/
pp_concat	pp.c	/^pp_concat(ARGS)$/
pp_cond_expr	pp.c	/^pp_cond_expr(ARGS)$/
pp_connect	pp.c	/^pp_connect(ARGS)$/
pp_cos	pp.c	/^pp_cos(ARGS)$/
pp_crypt	pp.c	/^pp_crypt(ARGS)$/
pp_dbmclose	pp.c	/^pp_dbmclose(ARGS)$/
pp_dbmopen	pp.c	/^pp_dbmopen(ARGS)$/
pp_dbsubr	pp.c	/^pp_dbsubr(ARGS)$/
pp_defined	pp.c	/^pp_defined(ARGS)$/
pp_delete	pp.c	/^pp_delete(ARGS)$/
pp_die	pp.c	/^pp_die(ARGS)$/
pp_divide	pp.c	/^pp_divide(ARGS)$/
pp_dofile	pp.c	/^pp_dofile(ARGS)$/
pp_dump	pp.c	/^pp_dump(ARGS)$/
pp_each	pp.c	/^pp_each(ARGS)$/
pp_egrent	pp.c	/^pp_egrent(ARGS)$/
pp_ehostent	pp.c	/^pp_ehostent(ARGS)$/
pp_enetent	pp.c	/^pp_enetent(ARGS)$/
pp_eof	pp.c	/^pp_eof(ARGS)$/
pp_eprotoent	pp.c	/^pp_eprotoent(ARGS)$/
pp_epwent	pp.c	/^pp_epwent(ARGS)$/
pp_eq	pp.c	/^pp_eq(ARGS)$/
pp_eservent	pp.c	/^pp_eservent(ARGS)$/
pp_eval	pp.c	/^pp_eval(ARGS)$/
pp_evalonce	pp.c	/^pp_evalonce(ARGS)$/
pp_exec_op	pp.c	/^pp_exec_op(ARGS)$/
pp_exit	pp.c	/^pp_exit(ARGS)$/
pp_exp	pp.c	/^pp_exp(ARGS)$/
pp_f_or_r	pp.c	/^pp_f_or_r(ARGS)$/
pp_fcntl	pp.c	/^pp_fcntl(ARGS)$/
pp_fileno	pp.c	/^pp_fileno(ARGS)$/
pp_flip	pp.c	/^pp_flip(ARGS)$/
pp_flock	pp.c	/^pp_flock(ARGS)$/
pp_flop	pp.c	/^pp_flop(ARGS)$/
pp_fork	pp.c	/^pp_fork(ARGS)$/
pp_ftatime	pp.c	/^pp_ftatime(ARGS)$/
pp_ftbinary	pp.c	/^pp_ftbinary(ARGS)$/
pp_ftblk	pp.c	/^pp_ftblk(ARGS)$/
pp_ftchr	pp.c	/^pp_ftchr(ARGS)$/
pp_ftctime	pp.c	/^pp_ftctime(ARGS)$/
pp_ftdir	pp.c	/^pp_ftdir(ARGS)$/
pp_fteexec	pp.c	/^pp_fteexec(ARGS)$/
pp_fteowned	pp.c	/^pp_fteowned(ARGS)$/
pp_fteread	pp.c	/^pp_fteread(ARGS)$/
pp_ftewrite	pp.c	/^pp_ftewrite(ARGS)$/
pp_ftfile	pp.c	/^pp_ftfile(ARGS)$/
pp_ftis	pp.c	/^pp_ftis(ARGS)$/
pp_ftlink	pp.c	/^pp_ftlink(ARGS)$/
pp_ftmtime	pp.c	/^pp_ftmtime(ARGS)$/
pp_ftpipe	pp.c	/^pp_ftpipe(ARGS)$/
pp_ftrexec	pp.c	/^pp_ftrexec(ARGS)$/
pp_ftrowned	pp.c	/^pp_ftrowned(ARGS)$/
pp_ftrread	pp.c	/^pp_ftrread(ARGS)$/
pp_ftrwrite	pp.c	/^pp_ftrwrite(ARGS)$/
pp_ftsgid	pp.c	/^pp_ftsgid(ARGS)$/
pp_ftsize	pp.c	/^pp_ftsize(ARGS)$/
pp_ftsock	pp.c	/^pp_ftsock(ARGS)$/
pp_ftsuid	pp.c	/^pp_ftsuid(ARGS)$/
pp_ftsvtx	pp.c	/^pp_ftsvtx(ARGS)$/
pp_fttext	pp.c	/^pp_fttext(ARGS)$/
pp_fttty	pp.c	/^pp_fttty(ARGS)$/
pp_ftzero	pp.c	/^pp_ftzero(ARGS)$/
pp_ge	pp.c	/^pp_ge(ARGS)$/
pp_getc	pp.c	/^pp_getc(ARGS)$/
pp_getlogin	pp.c	/^pp_getlogin(ARGS)$/
pp_getpeername	pp.c	/^pp_getpeername(ARGS)$/
pp_getpgrp	pp.c	/^pp_getpgrp(ARGS)$/
pp_getppid	pp.c	/^pp_getppid(ARGS)$/
pp_getpriority	pp.c	/^pp_getpriority(ARGS)$/
pp_getsockname	pp.c	/^pp_getsockname(ARGS)$/
pp_ggrent	pp.c	/^pp_ggrent(ARGS)$/
pp_ggrgid	pp.c	/^pp_ggrgid(ARGS)$/
pp_ggrnam	pp.c	/^pp_ggrnam(ARGS)$/
pp_ghbyaddr	pp.c	/^pp_ghbyaddr(ARGS)$/
pp_ghbyname	pp.c	/^pp_ghbyname(ARGS)$/
pp_ghostent	pp.c	/^pp_ghostent(ARGS)$/
pp_gmtime	pp.c	/^pp_gmtime(ARGS)$/
pp_gnbyaddr	pp.c	/^pp_gnbyaddr(ARGS)$/
pp_gnbyname	pp.c	/^pp_gnbyname(ARGS)$/
pp_gnetent	pp.c	/^pp_gnetent(ARGS)$/
pp_goto	pp.c	/^pp_goto(ARGS)$/
pp_gpbyname	pp.c	/^pp_gpbyname(ARGS)$/
pp_gpbynumber	pp.c	/^pp_gpbynumber(ARGS)$/
pp_gprotoent	pp.c	/^pp_gprotoent(ARGS)$/
pp_gpwent	pp.c	/^pp_gpwent(ARGS)$/
pp_gpwnam	pp.c	/^pp_gpwnam(ARGS)$/
pp_gpwuid	pp.c	/^pp_gpwuid(ARGS)$/
pp_grep	pp.c	/^pp_grep(ARGS)$/
pp_gsbyname	pp.c	/^pp_gsbyname(ARGS)$/
pp_gsbyport	pp.c	/^pp_gsbyport(ARGS)$/
pp_gservent	pp.c	/^pp_gservent(ARGS)$/
pp_gsockopt	pp.c	/^pp_gsockopt(ARGS)$/
pp_gt	pp.c	/^pp_gt(ARGS)$/
pp_hash	pp.c	/^pp_hash(ARGS)$/
pp_helem	pp.c	/^pp_helem(ARGS)$/
pp_hex	pp.c	/^pp_hex(ARGS)$/
pp_hslice	pp.c	/^pp_hslice(ARGS)$/
pp_index	pp.c	/^pp_index(ARGS)$/
pp_int	pp.c	/^pp_int(ARGS)$/
pp_ioctl	pp.c	/^pp_ioctl(ARGS)$/
pp_item	pp.c	/^pp_item(ARGS)$/
pp_item2	pp.c	/^pp_item2(ARGS)$/
pp_item3	pp.c	/^pp_item3(ARGS)$/
pp_join	pp.c	/^pp_join(ARGS)$/
pp_keys	pp.c	/^pp_keys(ARGS)$/
pp_kill	pp.c	/^pp_kill(ARGS)$/
pp_laelem	pp.c	/^pp_laelem(ARGS)$/
pp_larray	pp.c	/^pp_larray(ARGS)$/
pp_laslice	pp.c	/^pp_laslice(ARGS)$/
pp_last	pp.c	/^pp_last(ARGS)$/
pp_le	pp.c	/^pp_le(ARGS)$/
pp_left_shift	pp.c	/^pp_left_shift(ARGS)$/
pp_length	pp.c	/^pp_length(ARGS)$/
pp_lhash	pp.c	/^pp_lhash(ARGS)$/
pp_lhelem	pp.c	/^pp_lhelem(ARGS)$/
pp_lhslice	pp.c	/^pp_lhslice(ARGS)$/
pp_link	pp.c	/^pp_link(ARGS)$/
pp_list	pp.c	/^pp_list(ARGS)$/
pp_listen	pp.c	/^pp_listen(ARGS)$/
pp_local	pp.c	/^pp_local(ARGS)$/
pp_localtime	pp.c	/^pp_localtime(ARGS)$/
pp_log	pp.c	/^pp_log(ARGS)$/
pp_lslice	pp.c	/^pp_lslice(ARGS)$/
pp_lstat	pp.c	/^pp_lstat(ARGS)$/
pp_lt	pp.c	/^pp_lt(ARGS)$/
pp_match	pp.c	/^pp_match(ARGS)$/
pp_mkdir	pp.c	/^pp_mkdir(ARGS)$/
pp_modulo	pp.c	/^pp_modulo(ARGS)$/
pp_msgctl	pp.c	/^pp_msgctl(ARGS)$/
pp_msgget	pp.c	/^pp_msgget(ARGS)$/
pp_msgrcv	pp.c	/^pp_msgrcv(ARGS)$/
pp_msgsnd	pp.c	/^pp_msgsnd(ARGS)$/
pp_multiply	pp.c	/^pp_multiply(ARGS)$/
pp_ncmp	pp.c	/^pp_ncmp(ARGS)$/
pp_ne	pp.c	/^pp_ne(ARGS)$/
pp_negate	pp.c	/^pp_negate(ARGS)$/
pp_next	pp.c	/^pp_next(ARGS)$/
pp_nmatch	pp.c	/^pp_nmatch(ARGS)$/
pp_not	pp.c	/^pp_not(ARGS)$/
pp_nsubst	pp.c	/^pp_nsubst(ARGS)$/
pp_ntrans	pp.c	/^pp_ntrans(ARGS)$/
pp_null	pp.c	/^pp_null(ARGS)$/
pp_oct	pp.c	/^pp_oct(ARGS)$/
pp_open	pp.c	/^pp_open(ARGS)$/
pp_open_dir	pp.c	/^pp_open_dir(ARGS)$/
pp_or	pp.c	/^pp_or(ARGS)$/
pp_ord	pp.c	/^pp_ord(ARGS)$/
pp_pack	pp.c	/^pp_pack(ARGS)$/
pp_pipe_op	pp.c	/^pp_pipe_op(ARGS)$/
pp_pop	pp.c	/^pp_pop(ARGS)$/
pp_pow	pp.c	/^pp_pow(ARGS)$/
pp_print	pp.c	/^pp_print(ARGS)$/
pp_prtf	pp.c	/^pp_prtf(ARGS)$/
pp_push	pp.c	/^pp_push(ARGS)$/
pp_rand	pp.c	/^pp_rand(ARGS)$/
pp_range	pp.c	/^pp_range(ARGS)$/
pp_rcat	pp.c	/^pp_rcat(ARGS)$/
pp_read	pp.c	/^pp_read(ARGS)$/
pp_readdir	pp.c	/^pp_readdir(ARGS)$/
pp_readlink	pp.c	/^pp_readlink(ARGS)$/
pp_recv	pp.c	/^pp_recv(ARGS)$/
pp_redo	pp.c	/^pp_redo(ARGS)$/
pp_rename	pp.c	/^pp_rename(ARGS)$/
pp_repeat	pp.c	/^pp_repeat(ARGS)$/
pp_require	pp.c	/^pp_require(ARGS)$/
pp_reset	pp.c	/^pp_reset(ARGS)$/
pp_return	pp.c	/^pp_return(ARGS)$/
pp_reverse	pp.c	/^pp_reverse(ARGS)$/
pp_rewinddir	pp.c	/^pp_rewinddir(ARGS)$/
pp_right_shift	pp.c	/^pp_right_shift(ARGS)$/
pp_rindex	pp.c	/^pp_rindex(ARGS)$/
pp_rmdir	pp.c	/^pp_rmdir(ARGS)$/
pp_sassign	pp.c	/^pp_sassign(ARGS)$/
pp_scalar	pp.c	/^pp_scalar(ARGS)$/
pp_scmp	pp.c	/^pp_scmp(ARGS)$/
pp_seek	pp.c	/^pp_seek(ARGS)$/
pp_seekdir	pp.c	/^pp_seekdir(ARGS)$/
pp_select	pp.c	/^pp_select(ARGS)$/
pp_semctl	pp.c	/^pp_semctl(ARGS)$/
pp_semget	pp.c	/^pp_semget(ARGS)$/
pp_semop	pp.c	/^pp_semop(ARGS)$/
pp_send	pp.c	/^pp_send(ARGS)$/
pp_seq	pp.c	/^pp_seq(ARGS)$/
pp_setpgrp	pp.c	/^pp_setpgrp(ARGS)$/
pp_setpriority	pp.c	/^pp_setpriority(ARGS)$/
pp_sge	pp.c	/^pp_sge(ARGS)$/
pp_sgrent	pp.c	/^pp_sgrent(ARGS)$/
pp_sgt	pp.c	/^pp_sgt(ARGS)$/
pp_shift	pp.c	/^pp_shift(ARGS)$/
pp_shmctl	pp.c	/^pp_shmctl(ARGS)$/
pp_shmget	pp.c	/^pp_shmget(ARGS)$/
pp_shmread	pp.c	/^pp_shmread(ARGS)$/
pp_shmwrite	pp.c	/^pp_shmwrite(ARGS)$/
pp_shostent	pp.c	/^pp_shostent(ARGS)$/
pp_shutdown	pp.c	/^pp_shutdown(ARGS)$/
pp_sin	pp.c	/^pp_sin(ARGS)$/
pp_sle	pp.c	/^pp_sle(ARGS)$/
pp_sleep	pp.c	/^pp_sleep(ARGS)$/
pp_slt	pp.c	/^pp_slt(ARGS)$/
pp_sne	pp.c	/^pp_sne(ARGS)$/
pp_snetent	pp.c	/^pp_snetent(ARGS)$/
pp_socket	pp.c	/^pp_socket(ARGS)$/
pp_sockpair	pp.c	/^pp_sockpair(ARGS)$/
pp_sort	pp.c	/^pp_sort(ARGS)$/
pp_splice	pp.c	/^pp_splice(ARGS)$/
pp_split	pp.c	/^pp_split(ARGS)$/
pp_sprintf	pp.c	/^pp_sprintf(ARGS)$/
pp_sprotoent	pp.c	/^pp_sprotoent(ARGS)$/
pp_spwent	pp.c	/^pp_spwent(ARGS)$/
pp_sqrt	pp.c	/^pp_sqrt(ARGS)$/
pp_srand	pp.c	/^pp_srand(ARGS)$/
pp_sselect	pp.c	/^pp_sselect(ARGS)$/
pp_sservent	pp.c	/^pp_sservent(ARGS)$/
pp_ssockopt	pp.c	/^pp_ssockopt(ARGS)$/
pp_stat	pp.c	/^pp_stat(ARGS)$/
pp_study	pp.c	/^pp_study(ARGS)$/
pp_subr	pp.c	/^pp_subr(ARGS)$/
pp_subst	pp.c	/^pp_subst(ARGS)$/
pp_substr	pp.c	/^pp_substr(ARGS)$/
pp_subtract	pp.c	/^pp_subtract(ARGS)$/
pp_symlink	pp.c	/^pp_symlink(ARGS)$/
pp_syscall	pp.c	/^pp_syscall(ARGS)$/
pp_sysread	pp.c	/^pp_sysread(ARGS)$/
pp_system	pp.c	/^pp_system(ARGS)$/
pp_syswrite	pp.c	/^pp_syswrite(ARGS)$/
pp_tell	pp.c	/^pp_tell(ARGS)$/
pp_telldir	pp.c	/^pp_telldir(ARGS)$/
pp_time	pp.c	/^pp_time(ARGS)$/
pp_tms	pp.c	/^pp_tms(ARGS)$/
pp_trans	pp.c	/^pp_trans(ARGS)$/
pp_truncate	pp.c	/^pp_truncate(ARGS)$/
pp_try	pp.c	/^pp_try(ARGS)$/
pp_umask	pp.c	/^pp_umask(ARGS)$/
pp_undef	pp.c	/^pp_undef(ARGS)$/
pp_unlink	pp.c	/^pp_unlink(ARGS)$/
pp_unpack	pp.c	/^pp_unpack(ARGS)$/
pp_unshift	pp.c	/^pp_unshift(ARGS)$/
pp_utime	pp.c	/^pp_utime(ARGS)$/
pp_values	pp.c	/^pp_values(ARGS)$/
pp_vec	pp.c	/^pp_vec(ARGS)$/
pp_wait	pp.c	/^pp_wait(ARGS)$/
pp_waitpid	pp.c	/^pp_waitpid(ARGS)$/
pp_warn	pp.c	/^pp_warn(ARGS)$/
pp_write	pp.c	/^pp_write(ARGS)$/
pp_xor	pp.c	/^pp_xor(ARGS)$/
rcatmaybe	consarg.c	/^rcatmaybe(arg)$/
realloc	malloc.c	/^realloc(mp, nbytes)$/
reg	regcomp.c	/^reg(paren, flagp)$/
reganode	regcomp.c	/^reganode(op, arg)$/
regatom	regcomp.c	/^regatom(flagp)$/
regbranch	regcomp.c	/^regbranch(flagp)$/
regc	regcomp.c	/^regc(b)$/
regclass	regcomp.c	/^regclass()$/
regcomp	regcomp.c	/^regcomp(exp,xend,fold)$/
regcurly	regcomp.c	/^regcurly(s)$/
regdump	regcomp.c	/^regdump(r)$/
regexec	regexec.c	/^regexec(prog, stringarg, strend, strbeg, minend, s/
regfree	regcomp.c	/^regfree(r)$/
reginsert	regcomp.c	/^reginsert(op, opnd)$/
regmatch	regexec.c	/^regmatch(prog)$/
regnext	regexec.c	/^regnext(p)$/
regnode	regcomp.c	/^regnode(op)$/
regoptail	regcomp.c	/^regoptail(p, val)$/
regpiece	regcomp.c	/^regpiece(flagp)$/
regprop	regcomp.c	/^regprop(op)$/
regrepeat	regexec.c	/^regrepeat(p, max)$/
regset	regcomp.c	/^regset(bits,def,c)$/
regtail	regcomp.c	/^regtail(p, val)$/
regtry	regexec.c	/^regtry(prog, string)$/
repeatcpy	util.c	/^repeatcpy(to,from,len,count)$/
restorelist	cmd.c	/^restorelist(base)$/
rninstr	util.c	/^rninstr(big, bigend, little, lend)$/
safefree	util.c	/^safefree(where)$/
safemalloc	util.c	/^safemalloc(size)$/
saferealloc	util.c	/^saferealloc(where,size)$/
safexfree	util.c	/^safexfree(where)$/
safexmalloc	util.c	/^safexmalloc(x,size)$/
safexrealloc	util.c	/^safexrealloc(where,size)$/
same_dirent	util.c	/^same_dirent(a,b)$/
saveaptr	cmd.c	/^saveaptr(aptr)$/
saveary	cmd.c	/^saveary(stab)$/
savehash	cmd.c	/^savehash(stab)$/
savehptr	cmd.c	/^savehptr(hptr)$/
saveint	cmd.c	/^saveint(intp)$/
saveitem	cmd.c	/^saveitem(item)$/
savelines	perl.c	/^savelines(array, str)$/
savelist	cmd.c	/^savelist(sarg,maxsarg)$/
savelong	cmd.c	/^savelong(longp)$/
savenostab	cmd.c	/^savenostab(stab)$/
savesptr	cmd.c	/^savesptr(sptr)$/
savestr	util.c	/^savestr(str)$/
scanconst	toke.c	/^scanconst(spat,string,len)$/
scanhex	util.c	/^scanhex(start, len, retlen)$/
scanident	toke.c	/^scanident(s,send,dest)$/
scanoct	util.c	/^scanoct(start, len, retlen)$/
scanpat	toke.c	/^scanpat(s)$/
scanstr	toke.c	/^scanstr(start, in_what)$/
scansubst	toke.c	/^scansubst(start)$/
scantrans	toke.c	/^scantrans(start)$/
screaminstr	util.c	/^screaminstr(bigstr, littlestr)$/
set_csh	toke.c	/^set_csh()$/
sighandler	stab.c	/^sighandler(sig)$/
skipspace	toke.c	/^skipspace(s)$/
sortcmp	dolist.c	/^sortcmp(strp1,strp2)$/
sortsub	dolist.c	/^sortsub(str1,str2)$/
spat_common	consarg.c	/^spat_common(spat,exprnum,marking)$/
spat_free	cons.c	/^spat_free(spat)$/
spat_tosave	cons.c	/^spat_tosave(spat)$/
stab2arg	consarg.c	/^stab2arg(atype,stab)$/
stab_array	stab.c	/^ARRAY *stab_array(stab)$/
stab_check	stab.c	/^stab_check(min,max)$/
stab_clear	stab.c	/^stab_clear(stab)$/
stab_efullname	stab.c	/^stab_efullname(str,stab)$/
stab_fullname	stab.c	/^stab_fullname(str,stab)$/
stab_hash	stab.c	/^HASH *stab_hash(stab)$/
stab_len	stab.c	/^stab_len(str)$/
stab_str	stab.c	/^stab_str(str)$/
stabent	stab.c	/^stabent(name,add)$/
stabset	stab.c	/^stabset(mstr,str)$/
stio_new	stab.c	/^stio_new()$/
str_2mortal	str.c	/^str_2mortal(str)$/
str_2num	str.c	/^str_2num(str)$/
str_2ptr	str.c	/^str_2ptr(str)$/
str_append_till	str.c	/^str_append_till(str,from,fromend,delim,keeplist)$/
str_cat	str.c	/^str_cat(str,ptr)$/
str_chop	str.c	/^str_chop(str,ptr)	\/* like set but assuming ptr is /
str_cmp	str.c	/^str_cmp(str1,str2)$/
str_dec	str.c	/^str_dec(str)$/
str_eq	str.c	/^str_eq(str1,str2)$/
str_free	str.c	/^str_free(str)$/
str_get	str.c	/^str_get(str)$/
str_gets	str.c	/^str_gets(str,fp,append)$/
str_gnum	str.c	/^double str_gnum(Str)$/
str_grow	str.c	/^str_grow(str,newlen)$/
str_inc	str.c	/^str_inc(str)$/
str_insert	str.c	/^str_insert(bigstr,offset,len,little,littlelen)$/
str_len	str.c	/^str_len(str)$/
str_magic	str.c	/^str_magic(str, stab, how, name, namlen)$/
str_make	str.c	/^str_make(s,len)$/
str_mortal	str.c	/^str_mortal(oldstr)$/
str_ncat	str.c	/^str_ncat(str,ptr,len)$/
str_new	str.c	/^str_new(x,len)$/
str_nmake	str.c	/^str_nmake(n)$/
str_nset	str.c	/^str_nset(str,ptr,len)$/
str_numset	str.c	/^str_numset(str,num)$/
str_replace	str.c	/^str_replace(str,nstr)$/
str_reset	str.c	/^str_reset(s,stash)$/
str_scat	str.c	/^str_scat(dstr,sstr)$/
str_set	str.c	/^str_set(str,ptr)$/
str_smake	str.c	/^str_smake(old)$/
str_sset	str.c	/^str_sset(dstr,sstr)$/
str_true	str.c	/^str_true(Str)$/
switch	pp.c	/^    switch (optype) {$/
taintenv	str.c	/^taintenv()$/
taintproper	str.c	/^taintproper(s)$/
ucase	str.c	/^ucase(s,send)$/
uni	toke.c	/^uni(f,s)$/
unlnk	util.c	/^unlnk(f)	\/* unlink all versions of a file *\/$/
userinit	usersub.c	/^userinit()$/
validate_suid	perl.c	/^validate_suid(validarg)$/
vfprintf	util.c	/^vfprintf(fd, pat, args)$/
vsprintf	util.c	/^vsprintf(dest, pat, args)$/
wait4pid	util.c	/^wait4pid(pid,statusp,flags)$/
warn	util.c	/^void warn(pat,a1,a2,a3,a4)$/
whichsig	stab.c	/^whichsig(sig)$/
while_io	cons.c	/^while_io(cmd)$/
wopt	cons.c	/^wopt(cmd)$/
xstat	util.c	/^xstat()$/
yyerror	cons.c	/^yyerror(s)$/
yylex	toke.c	/^yylex()$/
yyparse	perly.c	/^yyparse()$/
