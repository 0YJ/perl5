#ifndef lint
static char yysccsid[] = "@(#)yaccpar 1.8 (Berkeley) 01/20/91";
#endif
#define YYBYACC 1
#line 16 "perly.y"
#include "EXTERN.h"
#include "perl.h"

static void
dep()
{
    deprecate("\"do\" to call subroutines");
}

#define YYERRCODE 256
dEXT short yylhs[] = {                                        -1,
   31,    0,    5,    3,    6,    6,    6,    7,    7,    7,
    7,   21,   21,   21,   21,   21,   21,   11,   11,   11,
    9,    9,    9,    9,   30,   30,    8,    8,    8,    8,
    8,    8,    8,    8,   10,   10,   25,   25,   29,   29,
    1,    1,    1,    1,    2,    2,   32,   32,   28,   28,
    4,   33,   33,   34,   13,   13,   13,   13,   12,   12,
   12,   26,   26,   26,   26,   26,   26,   26,   26,   27,
   27,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   22,   22,   23,   23,   23,   20,   15,
   16,   17,   18,   19,   24,   24,   24,   24,
};
dEXT short yylen[] = {                                         2,
    0,    2,    4,    0,    0,    2,    2,    2,    1,    2,
    3,    1,    1,    3,    3,    3,    3,    0,    2,    6,
    6,    6,    4,    4,    0,    2,    7,    7,    5,    5,
    8,    7,   10,    3,    0,    1,    0,    1,    0,    1,
    1,    1,    1,    1,    4,    3,    5,    5,    0,    1,
    0,    3,    2,    4,    3,    3,    2,    1,    2,    3,
    1,    3,    5,    6,    3,    5,    2,    4,    4,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    5,    3,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    2,    3,    2,    4,
    3,    4,    1,    1,    4,    5,    4,    1,    1,    1,
    5,    6,    5,    6,    5,    4,    5,    1,    1,    3,
    4,    3,    2,    2,    4,    5,    4,    5,    1,    2,
    1,    2,    2,    2,    1,    3,    1,    3,    4,    4,
    6,    1,    1,    0,    1,    0,    1,    2,    2,    2,
    2,    2,    2,    2,    1,    1,    1,    1,
};
dEXT short yydefred[] = {                                      1,
    0,    5,    0,   40,   51,   51,    0,    0,    6,   41,
    7,    9,    0,   42,   43,   44,    0,    0,    0,   53,
    0,   12,    4,  142,    0,    0,  118,    0,   51,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  137,    0,
    0,    0,    0,    0,    0,    0,   51,    0,    0,    0,
    0,    0,    0,    0,    0,   10,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    8,    0,    0,    0,    0,
    0,  108,  110,  104,    0,    0,  143,    0,   46,    0,
   52,    0,    0,    5,  155,  158,  157,  156,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  153,    0,  124,    0,
    0,    0,    0,    0,    0,   57,    0,    0,   67,    0,
    0,  132,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   99,    0,  149,  150,  151,  152,  154,
    0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   91,   92,    0,    0,    0,    0,
    0,    0,    0,   11,   45,   50,    0,   54,    0,   65,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,  136,  138,    0,    0,
    0,    0,    0,    0,  101,    0,  122,    0,    0,    0,
    0,   98,   26,    0,    0,    0,    0,    0,    0,   55,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,
    0,    0,    0,    0,    0,  120,    0,   48,   47,    3,
    0,  140,    0,  102,    0,   29,    0,   30,    0,    0,
    0,   23,    0,   24,    0,    0,    0,  139,  148,   68,
    0,  125,    0,  127,    0,  100,   69,    0,    0,    0,
    0,    0,    0,    0,  107,    0,  105,    0,  116,  121,
   66,    0,    0,    0,    0,   19,    0,    0,    0,    0,
    0,   63,  126,  128,  115,    0,  113,    0,    0,  106,
    0,  111,  117,  141,   27,   28,   21,    0,   22,    0,
   32,    0,  114,  112,   64,    0,    0,   31,    0,    0,
   20,   33,
};
dEXT short yydgoto[] = {                                       1,
    9,   10,   84,   17,   87,    3,   11,   12,   66,  193,
  262,   67,  200,   69,   70,   71,   72,   73,   74,   75,
  195,   83,  201,   89,  185,   77,  240,  177,   13,  142,
    2,   14,   15,   16,
};
dEXT short yysindex[] = {                                      0,
    0,    0, -105,    0,    0,    0,  -47, -232,    0,    0,
    0,    0,  570,    0,    0,    0, -112, -217,   10,    0,
 2121,    0,    0,    0,  -35,  -35,    0,   46,    0,   -3,
    1,    8,   14,   55, 2121,   56,   60,   63,    0,  -35,
 1806, 2121,  941, -178, 1846,  997,    0, 1911, 2121, 2121,
 2121, 2121, 2121, 2121, 1272,    0, 2121, 2121, 1312,  -35,
  -35,  -35,  -35,  -35, -183,    0,   71,  227, 3368,  -55,
  -49,    0,    0,    0,   89,   48,    0,   20,    0, -118,
    0,   71,   85,    0,    0,    0,    0,    0, 2121,  106,
 2121, -118, 1846,   20, 1846,   20, 1846,   20, 1846,   20,
 1371,  115, 3368,  116, 1411,  901,    0,  125,    0,  864,
   -1,  864,   41,  -53, 2121,    0,    0,  -55,    0, 2121,
   20,    0,  864,  864,  510,  510,  510,  -89,  -89,   80,
  -38,  510,  510,    0,  -84,    0,    0,    0,    0,    0,
   20,    0, 2121, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
 2121, 2121, 2121, 2121, 2121, 2121, 2121, 2121, 2121, 2121,
 2121, 2121, 2121, 2121,    0,    0,  -21, 1846, 1846, 1846,
 1846, 1846, 1451,    0,    0,    0,  -29,    0, -115,    0,
 1846,  614,   20, -187,  131, -183,  -34, -183,  -27, -140,
    4, -140,  114,  208,    0, 1846,    0,    0,    6,   -6,
  135, 1846, 1726, 1766,    0,   57,    0,   71, 2121, 1846,
   94,    0,    0, 3368, -187, -187, -187, -187, -113,    0,
   67, 2023,  864, 1613,  445,  685, 3368, 3106,  363,  771,
 1082, 1235, 1465,  510,  510, 1846,    0, 1846,    0,  147,
  -77,   88,  -72,   95,  -67,    0,   18,    0,    0,    0,
  148,    0, 2121,    0,   20,    0,   20,    0,   20,   20,
  150,    0,   20,    0, 1846,   20,   26,    0,    0,    0,
   32,    0,   69,    0,   82,    0,    0,  -62, 1846,   66,
 2121,   97,  -41, 1846,    0,   68,    0,   73,    0,    0,
    0, 2844, -183, -183, -140,    0, 1846, -140,  129, -183,
   20,    0,    0,    0,    0,   99,    0, 3756,   78,    0,
  153,    0,    0,    0,    0,    0,    0,   84,    0, 1371,
    0, -183,    0,    0,    0,   20,  155,    0, -140,   20,
    0,    0,
};
dEXT short yyrindex[] = {                                      0,
    0,    0,  141,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  145,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2299, 2164,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2658,    0, 2703,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   13,    0,   58,    3,  170, 2748,
 2796,    0,    0,    0, 2209,    0,    0,    0,    0,  -26,
    0, 2380,    0,    0,    0,    0,    0,    0, 2426,    0,
    0,   83,  166,    0,    0,    0,    0,    0,    0,    0,
  154,    0, 1341,    0,    0,  171,    0, 2254,    0, 3507,
 2748, 3552,    0,    0, 2426,    0,  431,  502,    0,    0,
    0,    0, 3585, 3630, 2980, 3028, 3073, 2890, 2935, 2471,
    0, 3152, 3197,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2516,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  845,    0,
  171,    0,    0,   19,    0,   13,    0,   13,    0,   76,
    0,   76,    0,  158,    0,    0,    0,    0,    0,  177,
    0,    0,    0,    0,    0,    0,    0, 2564, 2426,    0,
 2612,    0,    0, 2080,   23,   30,   39,   52,  827,    0,
    0,  -36, 3678, 1208, 3335, 3414, 2574,    0, 1049, 3739,
 3646, 3694, 3462, 3245, 3290,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  160,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  171,    0,    0,    0,    0,    0,    0,
    0,    0,   13,   13,   76,    0,    0,   76,    0,   13,
    0,    0,    0,    0,    0,    0,    0,  776,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  182,
    0,   13,    0,    0,    0,    0,    0,    0,   76,    0,
    0,    0,
};
dEXT short yygindex[] = {                                      0,
    0,    0,    0,   37,  -13,  157,    0,    0,    0,  -82,
 -168,  470,  360, 3971, 1933,    0,    0,    0,    0,    0,
  230,  -14, -152, 1366,  -20,    0,    0,  156,    0, -125,
    0,    0,    0,    0,
};
#define YYTABLESIZE 4252
dEXT short yytable[] = {                                      65,
   61,  168,  211,   79,   81,  206,  257,   81,  212,  250,
   23,   20,   25,  259,   61,  285,   94,   96,   98,  100,
  287,   81,   81,  264,   21,  289,   81,  109,  251,  248,
  305,  119,   49,  150,  122,  170,   93,  269,  204,   80,
   95,  172,   18,   13,  263,   25,  268,   97,   25,   25,
   25,  310,   25,   99,   25,   25,   81,   25,  290,   38,
  256,   13,  258,   16,  175,   92,  301,  169,   81,  238,
   17,   25,  302,  171,  180,   18,   25,   38,  115,   14,
  186,   16,  188,  121,  190,   91,  192,   23,   17,  170,
   61,  141,   15,   23,  101,  104,   49,   14,   58,  105,
  207,  236,  106,   25,  148,  149,  174,  209,   18,  303,
   15,   18,   18,   18,  143,   18,   58,   18,   18,   23,
   18,  169,  304,   23,  326,  280,  317,  213,  173,  319,
   23,  311,  260,  261,   18,   25,   23,   25,   25,   18,
    2,  176,   23,  178,   78,  181,  286,    4,    5,    6,
   58,    7,    8,  288,  196,  309,  197,    4,    5,    6,
  331,    7,    8,  249,  203,  205,   18,  315,  316,  254,
  210,  255,  265,   39,  321,  270,   39,   39,   39,  149,
   39,  276,   39,   39,  279,   39,  284,  320,  291,  297,
  307,  323,  312,  325,  277,  330,  328,  313,   18,   39,
   18,   18,  324,  144,   39,   49,   37,  148,  149,   19,
   61,  146,   35,   61,  148,  149,   13,  147,   37,  148,
  149,   85,   35,  167,  148,  149,   86,   61,   61,  148,
  149,   39,   81,   81,   81,   81,  237,  327,  148,  149,
  179,  293,   76,  294,  299,  295,  296,  183,  266,  298,
  148,  149,  300,  148,  149,   81,   81,  148,  149,    0,
   81,    0,   61,   39,  148,  149,   39,    0,   25,   25,
   25,   25,   25,   25,    0,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,  148,  149,  322,   25,   25,
    0,   25,   25,   25,   25,  148,  149,  148,  149,   25,
   25,   25,   25,   25,    0,    0,   25,   25,   25,  148,
  149,    0,  329,    0,   25,   25,  332,  148,  149,   25,
    0,   25,   25,  148,  149,    0,   58,   58,   58,   58,
    0,   18,   18,   18,   18,   18,   18,    0,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,    0,   58,
   58,   18,   18,    0,   18,   18,   18,   18,  148,  149,
  148,  149,   18,   18,   18,   18,   18,    0,    0,   18,
   18,   18,   68,  148,  149,  148,  149,   18,   18,  148,
  149,    0,   18,    0,   18,   18,  148,  149,  148,  149,
  148,  149,    0,    0,    0,    0,   39,   39,   39,   39,
   39,   39,  114,    0,  116,    0,   39,    0,    0,   39,
   39,   39,   39,    0,  131,    0,   39,   39,  135,   39,
   39,   39,   39,    0,    0,    0,    0,   39,   39,   39,
   39,   39,    0,    0,   39,   39,   39,    0,   61,   61,
   61,   61,   39,   39,    0,    0,    0,   39,    0,   39,
   39,    0,  184,  168,  187,    0,  189,    0,  191,    0,
  194,   61,   61,  155,  199,    0,  155,  155,  155,    0,
  155,  142,  155,  155,  142,  155,  144,  145,  146,  147,
    0,    0,    0,    0,    0,  150,    0,    0,  142,  142,
   82,    0,    0,  142,  155,  144,  145,  146,  147,  148,
  149,    0,    0,  215,  216,  217,  218,  219,  220,  221,
    0,    0,    0,    0,    0,   82,    0,    0,  148,  149,
    0,  142,    0,  142,    0,    0,    0,  241,  242,  243,
  244,  245,  247,    0,  156,  168,    0,  156,  156,  156,
    0,  156,  103,  156,  156,  103,  156,    0,    0,    0,
    0,    0,    0,  142,    0,  267,  155,    0,   82,  103,
  103,  271,  273,  275,  103,  156,    0,  150,    0,  278,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   82,    0,    0,    0,    0,  208,
    0,    0,    0,    0,  103,  282,    0,  283,    0,    0,
  168,    0,   50,    0,    0,   61,   63,   60,    0,   55,
    0,   64,   58,    0,   57,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  184,    0,    0,  156,   56,    0,
    0,    0,  150,   62,    0,    0,    0,    0,  306,    0,
    0,    0,    0,    0,    0,  152,  153,  154,  155,    0,
    0,    0,    0,    0,  252,    0,  318,  253,    0,    0,
   59,  159,  160,  161,    0,    0,  162,  163,    0,    0,
  164,    0,    0,  165,  166,  167,  157,    0,   82,   68,
    0,    0,    0,    0,    0,    0,    0,  155,  155,  155,
  155,  155,   23,    0,    0,   51,  155,    0,    0,  142,
  142,  142,  142,    0,  168,    0,    0,  155,  142,  155,
  155,  155,  155,  142,  142,  142,  142,  155,  155,  155,
  155,  155,  142,  142,  155,  155,  155,  142,  142,  142,
  142,  142,  155,  155,  142,  142,  150,  155,  142,  155,
  155,  142,  142,  142,    0,    0,    0,    0,    0,  163,
    0,    0,  164,    0,    0,  165,  166,  167,  156,  156,
  156,  156,  156,    0,    0,    0,    0,  156,    0,    0,
  103,  103,  103,  103,    0,  168,    0,    0,  156,  103,
  156,  156,  156,  156,  103,  103,  103,  103,  156,  156,
  156,  156,  156,  103,  103,  156,  156,  156,  103,  103,
  103,  103,  103,  156,  156,  103,  103,  150,  156,  103,
  156,  156,  103,  103,  103,    0,   84,  164,    0,   84,
  165,  166,  167,    0,    0,   22,   24,   25,   26,   27,
   28,    0,    0,   84,   84,   29,    0,    0,   30,   31,
   32,   33,    0,    0,    0,   34,   35,    0,   36,   37,
   38,   39,    0,    0,    0,    0,   40,   41,   42,   43,
   44,  168,    0,   45,   46,   47,    0,   56,   84,    0,
   56,   48,   49,    0,    0,    0,   52,   39,   53,   54,
   39,   39,   39,    0,   39,   56,   39,   39,    0,   39,
    0,  151,    0,  150,    0,    0,  152,  153,  154,  155,
    0,    0,    0,   39,    0,    0,    0,    0,   39,    0,
  156,  158,  159,  160,  161,    0,    0,  162,  163,   56,
    0,  164,    0,    0,  165,  166,  167,    0,    0,    0,
    0,    0,    0,   50,    0,   39,   61,   63,   60,    0,
   55,    0,   64,   58,    0,   57,    0,    0,    0,    0,
    0,    0,    0,    0,  168,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   62,    0,    0,   39,    0,  154,
   39,    0,    0,   50,    0,    0,   61,   63,   60,    0,
   55,    0,   64,   58,    0,   57,  150,    0,    0,  163,
    0,   59,  164,    0,    0,  165,  166,  167,    0,  113,
    0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   23,    0,    0,   51,    0,    0,   50,
    0,   59,   61,   63,   60,    0,   55,    0,   64,   58,
    0,   57,    0,    0,   84,   84,   84,   84,    0,    0,
    0,    0,    0,  152,  153,  154,  155,    0,    0,    0,
   62,    0,    0,    0,    0,    0,   51,   84,   84,    0,
  160,  161,   84,    0,  162,  163,    0,    0,  164,    0,
    0,  165,  166,  167,    0,    0,    0,   59,    0,   83,
    0,    0,   83,    0,    0,   56,   56,   56,   56,    0,
   39,   39,   39,   39,   39,   39,   83,   83,    0,    0,
   39,   83,    0,   39,   39,   39,   39,    0,   56,   23,
   39,   39,   51,   39,   39,   39,   39,    0,    0,    0,
    0,   39,   39,   39,   39,   39,    0,    0,   39,   39,
   39,   83,    0,    0,    0,    0,   39,   39,  154,  155,
    0,   39,    0,   39,   39,    0,    0,  117,   25,   26,
   27,   28,   86,    0,    0,    0,   29,  162,  163,    0,
    0,  164,  168,    0,  165,  166,  167,   35,    0,   36,
   37,   38,   39,    0,    0,    0,    0,   40,   41,   42,
   43,   44,    0,    0,   45,   46,   47,   24,   25,   26,
   27,   28,   48,   49,  150,    0,   29,   52,    0,   53,
   54,    0,    0,    0,    0,    0,    0,   35,    0,   36,
   37,   38,   39,    0,    0,    0,    0,   40,   41,   42,
   43,   44,    0,    0,   45,   46,   47,    0,    0,    0,
    0,    0,   48,   49,    0,    0,    0,   52,   78,   53,
   54,   78,    0,  117,   25,   26,   27,   28,   86,    0,
    0,    0,   29,    0,    0,   78,   78,    0,    0,    0,
   78,    0,    0,   35,    0,   36,   37,   38,   39,    0,
    0,    0,    0,   40,   41,   42,   43,   44,    0,    0,
    0,   46,   47,    0,    0,    0,    0,    0,   48,   49,
   78,    0,    0,   52,   50,   53,   54,   61,   63,   60,
    0,   55,  130,   64,   58,    0,   57,   83,   83,   83,
   83,    0,    0,    0,    0,  168,   83,    0,    0,    0,
    0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
   83,   83,    0,    0,   50,   83,   83,   61,   63,   60,
    0,   55,    0,   64,   58,    0,   57,  150,    0,    0,
    0,    0,   59,    0,  152,  153,  154,  155,    0,    0,
    0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
    0,  130,  161,    0,  130,  162,  163,    0,    0,  164,
    0,   90,  165,  166,  167,    0,    0,   51,  130,  130,
    0,    0,   59,   50,  134,  107,   61,   63,   60,    0,
   55,  120,   64,   58,    0,   57,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  136,  137,  138,  139,  140,
    0,    0,    0,  130,   62,    0,    0,   51,    0,    0,
    0,    0,    0,   50,    0,    0,   61,   63,   60,    0,
   55,  198,   64,   58,    0,   57,    0,    0,    0,    0,
    0,   59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  202,    0,    0,   62,    0,   78,   78,   78,   78,
    0,    0,    0,   50,    0,   78,   61,   63,   60,    0,
   55,  246,   64,   58,    0,   57,   51,    0,    0,   78,
   78,   59,    0,    0,   78,   78,   78,   78,   78,    0,
    0,    0,    0,    0,   62,    0,    0,  152,  153,  154,
  155,    0,    0,    0,    0,    0,    0,    0,   24,   25,
   26,   27,   28,    0,    0,    0,   51,   29,  162,  163,
    0,   59,  164,    0,    0,  165,  166,  167,   35,    0,
   36,   37,   38,   39,    0,  168,    0,    0,   40,   41,
   42,   43,   44,    0,    0,   45,   46,   47,   24,   25,
   26,   27,   28,   48,   49,    0,   51,   29,   52,    0,
   53,   54,    0,    0,    0,    0,    0,  150,   35,    0,
   36,   37,   38,   39,    0,    0,    0,    0,   40,   41,
   42,   43,   44,    0,    0,   45,   46,   47,    0,  130,
  130,  130,  130,   48,   49,    0,    0,    0,   52,    0,
   53,   54,    0,    0,    0,    0,   22,   24,   25,   26,
   27,   28,  130,  130,    0,    0,   29,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   35,    0,   36,
   37,   38,   39,    0,    0,    0,    0,   40,   41,   42,
   43,   44,    0,    0,   45,   46,   47,   24,   25,   26,
   27,   28,   48,   49,    0,    0,   29,   52,    0,   53,
   54,    0,    0,    0,    0,    0,    0,   35,    0,   36,
   37,   38,   39,    0,    0,    0,    0,   40,   41,   42,
   43,   44,    0,  168,   45,   46,   47,   24,   25,   26,
   27,   28,   48,   49,    0,    0,   29,   52,    0,   53,
   54,    0,    0,    0,    0,    0,    0,   35,    0,   36,
   37,   38,   39,    0,    0,  150,    0,   40,   41,   42,
   43,   44,    0,    0,   45,   46,   47,    0,    0,  154,
  155,    0,   48,   49,    0,    0,    0,   52,   50,   53,
   54,   61,   63,   60,    0,   55,  272,   64,   58,  163,
   57,    0,  164,    0,    0,  165,  166,  167,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,    0,   50,    0,
    0,   61,   63,   60,    0,   55,  274,   64,   58,    0,
   57,    0,    0,    0,    0,    0,   59,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,    0,   50,    0,
    0,   61,   63,   60,    0,   55,    0,   64,   58,    0,
   57,   51,    0,    0,    0,    0,   59,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,    0,   50,    0,
    0,   61,   63,   60,    0,   55,    0,   64,   58,    0,
   57,   51,    0,    0,    0,  152,   59,  154,  155,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,    0,  162,  163,    0,    0,
  164,    0,    0,  165,  166,  167,    0,    0,   23,    0,
    0,   51,    0,    0,    0,    0,   59,    0,    0,    0,
    0,    0,    0,   50,    0,    0,   61,   63,   60,    0,
   55,    0,   64,   58,    0,   57,    0,   88,   88,    0,
    0,    0,    0,    0,    0,    0,  102,    0,    0,    0,
    0,   51,   88,  111,   62,    0,    0,    0,  118,    0,
    0,    0,   24,   25,   26,   27,   28,    0,    0,    0,
    0,   29,   88,   88,   88,   88,   88,    0,    0,    0,
    0,   59,   35,    0,   36,   37,   38,   39,    0,    0,
    0,    0,   40,   41,   42,   43,   44,    0,    0,   45,
   46,   47,   24,   25,   26,   27,   28,   48,   49,    0,
    0,   29,   52,   23,   53,   54,   51,    0,  118,    0,
    0,    0,   35,    0,   36,   37,   38,   39,    0,    0,
    0,    0,   40,   41,   42,   43,   44,    0,    0,   45,
   46,   47,  108,   25,   26,   27,   28,   48,   49,    0,
    0,   29,   52,    0,   53,   54,    0,    0,    0,    0,
    0,    0,   35,    0,   36,   37,   38,   39,    0,    0,
    0,    0,   40,   41,   42,   43,   44,    0,    0,  239,
   46,   47,   24,   25,   26,   27,   28,   48,   49,    0,
    0,   29,   52,  168,   53,   54,    0,    0,    0,    0,
   60,    0,   35,   60,   36,   37,   38,   39,    0,    0,
    0,    0,   40,   41,   42,   43,   44,   60,   60,   45,
   46,   47,    0,    0,    0,  150,    0,   48,   49,    0,
    0,    0,   52,   50,   53,   54,   61,   63,   60,    0,
   55,    0,   64,   58,    0,   57,    0,   24,   25,   26,
   27,   28,   60,    0,    0,    0,   29,    0,    0,    0,
    0,    0,    0,    0,   62,    0,    0,   35,    0,   36,
   37,   38,   39,    0,    0,    0,    0,   40,   41,   42,
   43,   44,    0,    0,  135,   46,   47,  135,    0,    0,
    0,   59,   48,   49,    0,    0,    0,   52,    0,   53,
   54,  135,  135,    0,    0,    0,  135,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   51,    0,    0,  119,
    0,    0,  119,    0,  135,    0,  135,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  119,  119,    0,    0,
    0,  119,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  135,    0,    0,    0,
    0,    0,    0,    0,  142,    0,    0,  142,    0,  119,
    0,  119,    0,    0,    0,  152,  153,  154,  155,    0,
    0,  142,  142,    0,    0,    0,  142,    0,    0,    0,
  158,  159,  160,  161,    0,    0,  162,  163,    0,    0,
  164,  119,    0,  165,  166,  167,    0,    0,    0,  129,
    0,    0,  129,    0,  142,    0,  142,    0,   60,   60,
   60,   60,    0,    0,    0,    0,  129,  129,    0,    0,
    0,  129,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   60,   60,    0,    0,    0,  142,   24,   25,   26,
   27,   28,    0,    0,    0,    0,   29,    0,    0,    0,
    0,  129,    0,    0,    0,    0,    0,   35,    0,   36,
   37,   38,   39,    0,    0,    0,    0,   40,   41,   42,
   43,   44,    0,    0,    0,   46,   47,    0,    0,    0,
  145,  129,   48,   49,    0,    0,    0,   52,    0,   53,
   54,    0,  135,  135,  135,  135,    0,  145,  145,    0,
    0,  135,  145,    0,    0,    0,  135,  135,  135,  135,
    0,    0,    0,    0,    0,  135,  135,    0,    0,    0,
  135,  135,  135,  135,  135,    0,  144,  135,  135,  144,
  145,  135,  145,    0,  135,  135,  135,  119,  119,  119,
  119,    0,    0,  144,  144,    0,  119,    0,  144,    0,
    0,  119,  119,  119,  119,    0,    0,    0,    0,    0,
  119,  119,  145,    0,    0,  119,  119,  119,  119,  119,
    0,   97,  119,  119,   97,    0,  119,    0,  144,  119,
  119,  119,  142,  142,  142,  142,    0,    0,   97,   97,
    0,  142,    0,   97,    0,    0,  142,  142,  142,  142,
    0,    0,    0,    0,    0,  142,  142,    0,  144,    0,
  142,  142,  142,  142,  142,    0,   59,  142,  142,   59,
    0,  142,    0,   97,  142,  142,  142,  129,  129,  129,
  129,    0,    0,   59,   59,    0,  129,    0,   59,    0,
    0,  129,  129,  129,  129,    0,    0,    0,    0,    0,
  129,  129,    0,   97,    0,  129,  129,  129,  129,  129,
    0,    0,  129,  129,   62,    0,  129,    0,   59,  129,
  129,  129,    0,    0,   72,    0,    0,   72,    0,    0,
    0,   62,   62,    0,    0,    0,   62,    0,    0,    0,
    0,   72,   72,    0,    0,    0,    0,    0,   59,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  145,  145,
  145,  145,   96,    0,   62,   96,   62,  145,    0,    0,
    0,    0,  145,  145,  145,  145,   72,    0,    0,   96,
   96,  145,  145,    0,   96,    0,  145,  145,  145,  145,
  145,    0,    0,  145,  145,    0,   62,  145,    0,    0,
  145,  145,  145,    0,  144,  144,  144,  144,  144,    0,
    0,  144,    0,  144,   96,    0,    0,    0,  144,  144,
  144,  144,    0,    0,    0,  144,  144,  144,  144,    0,
  144,    0,  144,  144,  144,  144,  144,    0,    0,  144,
  144,    0,    0,  144,   96,    0,  144,  144,  144,   97,
   97,   97,   97,  131,    0,    0,  131,    0,   97,    0,
  144,    0,    0,   97,   97,   97,   97,    0,    0,    0,
  131,  131,   97,   97,    0,  131,    0,   97,   97,   97,
   97,   97,    0,    0,   97,   97,    0,    0,   97,    0,
    0,   97,   97,   97,   59,   59,   59,   59,  103,    0,
    0,  103,    0,   59,    0,  131,    0,    0,   59,   59,
   59,   59,    0,    0,    0,  103,  103,   59,   59,    0,
  103,    0,   59,   59,   59,   59,   59,    0,    0,   59,
   59,    0,    0,   59,    0,    0,   59,   59,   59,    0,
    0,    0,   62,   62,   62,   62,  109,    0,    0,  109,
  103,   62,   72,   72,   72,   72,   62,   62,   62,   62,
    0,    0,    0,  109,  109,   62,   62,    0,  109,    0,
   62,   62,   62,   62,   62,   72,   72,   62,   62,    0,
    0,   62,    0,    0,   62,   62,   62,    0,    0,    0,
   96,   96,   96,   96,  314,    0,    0,    0,  109,   96,
    0,    0,    0,    0,   96,   96,   96,   96,    0,    0,
    0,    0,    0,   96,   96,    0,  157,    0,   96,   96,
   96,   96,   96,    0,    0,   96,   96,    0,    0,   96,
    0,    0,   96,   96,   96,    0,  144,  144,  144,  144,
   93,    0,    0,   93,  168,  144,    0,    0,    0,    0,
  144,  144,  144,  144,    0,    0,    0,   93,   93,  144,
  144,    0,   93,    0,  144,  144,  144,  144,  144,    0,
    0,  144,  144,    0,    0,  144,  150,    0,  144,  144,
  144,  131,  131,  131,  131,   94,    0,    0,   94,    0,
  131,    0,   93,    0,    0,  131,  131,  131,  131,    0,
    0,    0,   94,   94,  131,  131,    0,   94,    0,  131,
  131,  131,  131,  131,    0,    0,  131,  131,    0,    0,
  131,    0,    0,  131,  131,  131,  103,  103,  103,  103,
   88,    0,    0,   88,    0,  103,    0,   94,    0,    0,
  103,  103,  103,  103,    0,    0,    0,   88,   88,  103,
  103,    0,   88,    0,  103,  103,  103,  103,  103,    0,
    0,  103,  103,    0,    0,  103,    0,    0,  103,  103,
  103,    0,    0,    0,  109,  109,  109,  109,   89,    0,
    0,   89,   88,  109,    0,    0,    0,    0,  109,  109,
  109,  109,    0,    0,    0,   89,   89,  109,  109,    0,
   89,    0,  109,  109,  109,  109,  109,    0,    0,  109,
  109,    0,    0,  109,    0,    0,  109,  109,  109,    0,
    0,    0,    0,   90,    0,    0,   90,    0,    0,    0,
   89,  151,    0,    0,    0,    0,  152,  153,  154,  155,
   90,   90,    0,    0,    0,   90,    0,    0,    0,    0,
  156,  158,  159,  160,  161,    0,    0,  162,  163,    0,
    0,  164,    0,    0,  165,  166,  167,    0,   93,   93,
   93,   93,    0,  281,    0,   90,    0,   93,  157,    0,
    0,    0,   93,   93,   93,   93,    0,    0,    0,    0,
    0,   93,   93,    0,    0,    0,   93,   93,   93,   93,
   93,    0,   86,   93,   93,   86,  168,   93,    0,    0,
    0,    0,    0,   94,   94,   94,   94,    0,    0,   86,
   86,    0,   94,    0,   86,    0,    0,   94,   94,   94,
   94,    0,    0,    0,    0,    0,   94,   94,  150,    0,
    0,   94,   94,   94,   94,   94,    0,   87,   94,   94,
   87,    0,   94,    0,   86,    0,    0,    0,   88,   88,
   88,   88,    0,    0,   87,   87,    0,   88,    0,   87,
    0,    0,   88,   88,   88,   88,    0,    0,    0,    0,
    0,   88,   88,    0,    0,    0,   88,   88,   88,   88,
   88,    0,    0,   88,   88,   85,    0,    0,   85,   87,
    0,    0,    0,    0,    0,    0,   89,   89,   89,   89,
    0,    0,   85,   85,    0,   89,    0,   85,    0,    0,
   89,   89,   89,   89,    0,    0,    0,    0,    0,   89,
   89,    0,    0,    0,   89,   89,   89,   89,   89,    0,
   73,   89,   89,   73,    0,    0,    0,   85,    0,    0,
    0,   90,   90,   90,   90,    0,    0,   73,   73,    0,
   90,    0,   73,    0,    0,   90,   90,   90,   90,    0,
    0,    0,    0,    0,   90,   90,    0,    0,    0,   90,
   90,   90,   90,   90,    0,   74,   90,   90,   74,    0,
    0,    0,   73,  151,    0,    0,    0,    0,  152,  153,
  154,  155,   74,   74,    0,    0,    0,   74,    0,    0,
    0,    0,  156,  158,  159,  160,  161,    0,    0,  162,
  163,    0,    0,  164,    0,    0,  165,  166,  167,    0,
   86,   86,   86,   86,    0,    0,    0,   74,    0,   86,
  157,    0,    0,    0,   86,   86,   86,   86,    0,    0,
    0,    0,    0,   86,   86,    0,    0,    0,   86,   86,
   86,   86,   86,    0,   75,   86,   86,   75,  168,    0,
    0,    0,    0,    0,    0,   87,   87,   87,   87,    0,
    0,   75,   75,    0,   87,    0,   75,    0,    0,   87,
   87,   87,   87,    0,    0,    0,    0,    0,   87,   87,
  150,    0,    0,   87,   87,   87,   87,   87,    0,    0,
   87,   87,   76,    0,    0,   76,   75,    0,    0,    0,
    0,    0,    0,   85,   85,   85,   85,    0,    0,   76,
   76,    0,   85,    0,   76,    0,    0,   85,   85,   85,
   85,    0,    0,    0,    0,    0,   85,   85,    0,    0,
    0,   85,   85,   85,   85,   85,    0,  123,   85,   85,
  123,    0,    0,    0,   76,    0,    0,    0,   73,   73,
   73,   73,    0,    0,  123,  123,    0,   73,    0,  123,
    0,    0,   73,   73,   73,   73,    0,    0,    0,    0,
    0,   73,   73,    0,    0,    0,   73,   73,   73,   73,
   73,    0,   95,   73,   73,   95,    0,    0,    0,  123,
    0,    0,    0,   74,   74,   74,   74,    0,    0,   95,
   95,    0,   74,    0,   95,    0,    0,   74,   74,   74,
   74,    0,    0,    0,    0,  133,   74,   74,  133,    0,
    0,   74,   74,   74,   74,   74,    0,    0,   74,    0,
    0,    0,  133,  133,   95,  151,    0,  133,    0,    0,
  152,  153,  154,  155,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  156,  158,  159,  160,  161,    0,
  134,  162,  163,  134,    0,  164,    0,  133,  165,  166,
  167,    0,   75,   75,   75,   75,   80,  134,  134,   80,
    0,   75,  134,    0,    0,    0,   75,   75,    0,   75,
    0,    0,    0,   80,   80,   75,   75,    0,   80,    0,
   75,   75,   75,   75,   75,    0,    0,   75,   77,    0,
    0,   77,  134,    0,    0,    0,    0,    0,    0,    0,
   76,   76,   76,   76,   79,   77,   77,   79,   80,   76,
   77,    0,    0,    0,   76,   76,    0,    0,    0,    0,
    0,   79,   79,   76,   76,    0,   79,    0,   76,   76,
   76,   76,   76,    0,    0,   76,    0,    0,    0,    0,
   77,    0,    0,    0,    0,  123,  123,  123,  123,   82,
    0,    0,   82,    0,  123,    0,   79,    0,    0,  123,
  123,    0,    0,    0,    0,    0,   82,   82,  123,  123,
    0,   82,    0,  123,  123,  123,  123,  123,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  157,    0,
   95,   95,   95,   95,    0,    0,    0,    0,    0,   95,
    0,   82,    0,    0,   95,   95,    0,    0,    0,    0,
    0,    0,    0,   95,   95,    0,  168,    0,   95,   95,
   95,   95,   95,  133,  133,  133,  133,    0,    0,    0,
    0,    0,  133,    0,    0,    0,    0,  133,  133,    0,
    0,    0,    0,    0,    0,    0,  133,  133,  150,    0,
    0,  133,  133,  133,  133,  133,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  134,  134,
  134,  134,    0,    0,    0,    0,    0,  134,    0,    0,
    0,    0,  134,  134,   80,   80,   80,   80,    0,    0,
    0,  134,  134,   80,    0,    0,  134,  134,  134,  134,
  134,    0,    0,    0,    0,    0,    0,   80,   80,    0,
    0,    0,   80,   80,   80,   80,   77,   77,   77,   77,
    0,    0,    0,    0,    0,   77,    0,    0,    0,    0,
    0,   77,   79,   79,   79,   79,    0,    0,    0,   77,
   77,   79,    0,    0,   77,   77,   77,   77,   77,    0,
    0,    0,    0,    0,    0,   79,   79,    0,    0,    0,
   79,   79,   79,   79,   79,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  103,    0,   82,   82,   82,
   82,  110,  112,    0,    0,    0,   82,    0,  123,  124,
  125,  126,  127,  128,  129,    0,    0,  132,  133,    0,
   82,   82,    0,  151,    0,   82,   82,   82,  152,  153,
  154,  155,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  158,  159,  160,  161,    0,    0,  162,
  163,  182,    0,  164,    0,    0,  165,  166,  167,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  214,    0,    0,    0,    0,    0,    0,
    0,  222,  223,  224,  225,  226,  227,  228,  229,  230,
  231,  232,  233,  234,  235,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  292,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  308,
};
dEXT short yycheck[] = {                                      13,
   36,   91,   41,   17,   41,   59,   41,   44,   93,  125,
  123,   59,    0,   41,   36,   93,   30,   31,   32,   33,
   93,   58,   59,  192,  257,   93,   63,   41,  181,   59,
   93,   46,   59,  123,   48,   91,   40,   44,   40,  257,
   40,   91,    6,   41,   41,   33,   41,   40,   36,   37,
   38,   93,   40,   40,   42,   43,   93,   45,   41,   41,
  186,   59,  188,   41,   78,   29,   41,  123,   59,   91,
   41,   59,   41,  123,   89,    0,   64,   59,  257,   41,
   94,   59,   96,   47,   98,   40,  100,  123,   59,   91,
   36,  275,   41,  123,   40,   40,  123,   59,   41,   40,
  115,  123,   40,   91,  292,  293,   59,  121,   33,   41,
   59,   36,   37,   38,   44,   40,   59,   42,   43,  123,
   45,  123,   41,  123,   41,   59,  295,  141,   40,  298,
  123,  284,  273,  274,   59,  123,  123,  125,  126,   64,
    0,  260,  123,   59,  257,   40,   59,  263,  264,  265,
   93,  267,  268,   59,   40,   59,   41,  263,  264,  265,
  329,  267,  268,  177,   40,  125,   91,  293,  294,  183,
   91,   41,   59,   33,  300,   41,   36,   37,   38,  293,
   40,  125,   42,   43,   91,   45,   40,   59,   41,   40,
  125,   93,  125,   41,  209,   41,  322,  125,  123,   59,
  125,  126,  125,   59,   64,  123,   41,  292,  293,  257,
   41,   41,   59,   44,  292,  293,   59,   41,   59,  292,
  293,  257,   41,  313,  292,  293,  262,   58,   59,  292,
  293,   91,  269,  270,  271,  272,  258,  320,  292,  293,
   84,  255,   13,  257,  265,  259,  260,   92,   41,  263,
  292,  293,  266,  292,  293,  292,  293,  292,  293,   -1,
  297,   -1,   93,  123,  292,  293,  126,   -1,  256,  257,
  258,  259,  260,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  292,  293,  301,  276,  277,
   -1,  279,  280,  281,  282,  292,  293,  292,  293,  287,
  288,  289,  290,  291,   -1,   -1,  294,  295,  296,  292,
  293,   -1,  326,   -1,  302,  303,  330,  292,  293,  307,
   -1,  309,  310,  292,  293,   -1,  269,  270,  271,  272,
   -1,  256,  257,  258,  259,  260,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,   -1,  292,
  293,  276,  277,   -1,  279,  280,  281,  282,  292,  293,
  292,  293,  287,  288,  289,  290,  291,   -1,   -1,  294,
  295,  296,   13,  292,  293,  292,  293,  302,  303,  292,
  293,   -1,  307,   -1,  309,  310,  292,  293,  292,  293,
  292,  293,   -1,   -1,   -1,   -1,  256,  257,  258,  259,
  260,  261,   43,   -1,   45,   -1,  266,   -1,   -1,  269,
  270,  271,  272,   -1,   55,   -1,  276,  277,   59,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,  291,   -1,   -1,  294,  295,  296,   -1,  269,  270,
  271,  272,  302,  303,   -1,   -1,   -1,  307,   -1,  309,
  310,   -1,   93,   91,   95,   -1,   97,   -1,   99,   -1,
  101,  292,  293,   33,  105,   -1,   36,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,  269,  270,  271,  272,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   58,   59,
   21,   -1,   -1,   63,   64,  269,  270,  271,  272,  292,
  293,   -1,   -1,  144,  145,  146,  147,  148,  149,  150,
   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,  292,  293,
   -1,   91,   -1,   93,   -1,   -1,   -1,  168,  169,  170,
  171,  172,  173,   -1,   33,   91,   -1,   36,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  196,  126,   -1,   89,   58,
   59,  202,  203,  204,   63,   64,   -1,  123,   -1,  210,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  115,   -1,   -1,   -1,   -1,  120,
   -1,   -1,   -1,   -1,   93,  236,   -1,  238,   -1,   -1,
   91,   -1,   33,   -1,   -1,   36,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  265,   -1,   -1,  126,   59,   -1,
   -1,   -1,  123,   64,   -1,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,   -1,   41,   -1,  297,   44,   -1,   -1,
   91,  299,  300,  301,   -1,   -1,  304,  305,   -1,   -1,
  308,   -1,   -1,  311,  312,  313,   63,   -1,  209,  320,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  123,   -1,   -1,  126,  266,   -1,   -1,  269,
  270,  271,  272,   -1,   91,   -1,   -1,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  123,  307,  308,  309,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,  305,
   -1,   -1,  308,   -1,   -1,  311,  312,  313,  257,  258,
  259,  260,  261,   -1,   -1,   -1,   -1,  266,   -1,   -1,
  269,  270,  271,  272,   -1,   91,   -1,   -1,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  123,  307,  308,
  309,  310,  311,  312,  313,   -1,   41,  308,   -1,   44,
  311,  312,  313,   -1,   -1,  256,  257,  258,  259,  260,
  261,   -1,   -1,   58,   59,  266,   -1,   -1,  269,  270,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,  280,
  281,  282,   -1,   -1,   -1,   -1,  287,  288,  289,  290,
  291,   91,   -1,  294,  295,  296,   -1,   41,   93,   -1,
   44,  302,  303,   -1,   -1,   -1,  307,   33,  309,  310,
   36,   37,   38,   -1,   40,   59,   42,   43,   -1,   45,
   -1,  278,   -1,  123,   -1,   -1,  283,  284,  285,  286,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,   -1,
  297,  298,  299,  300,  301,   -1,   -1,  304,  305,   93,
   -1,  308,   -1,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   91,   36,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   64,   -1,   -1,  123,   -1,  285,
  126,   -1,   -1,   33,   -1,   -1,   36,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,  123,   -1,   -1,  305,
   -1,   91,  308,   -1,   -1,  311,  312,  313,   -1,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,   33,
   -1,   91,   36,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,  269,  270,  271,  272,   -1,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   64,   -1,   -1,   -1,   -1,   -1,  126,  292,  293,   -1,
  300,  301,  297,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,  311,  312,  313,   -1,   -1,   -1,   91,   -1,   41,
   -1,   -1,   44,   -1,   -1,  269,  270,  271,  272,   -1,
  256,  257,  258,  259,  260,  261,   58,   59,   -1,   -1,
  266,   63,   -1,  269,  270,  271,  272,   -1,  292,  123,
  276,  277,  126,  279,  280,  281,  282,   -1,   -1,   -1,
   -1,  287,  288,  289,  290,  291,   -1,   -1,  294,  295,
  296,   93,   -1,   -1,   -1,   -1,  302,  303,  285,  286,
   -1,  307,   -1,  309,  310,   -1,   -1,  257,  258,  259,
  260,  261,  262,   -1,   -1,   -1,  266,  304,  305,   -1,
   -1,  308,   91,   -1,  311,  312,  313,  277,   -1,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,  291,   -1,   -1,  294,  295,  296,  257,  258,  259,
  260,  261,  302,  303,  123,   -1,  266,  307,   -1,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,  277,   -1,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,  291,   -1,   -1,  294,  295,  296,   -1,   -1,   -1,
   -1,   -1,  302,  303,   -1,   -1,   -1,  307,   41,  309,
  310,   44,   -1,  257,  258,  259,  260,  261,  262,   -1,
   -1,   -1,  266,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,   -1,  277,   -1,  279,  280,  281,  282,   -1,
   -1,   -1,   -1,  287,  288,  289,  290,  291,   -1,   -1,
   -1,  295,  296,   -1,   -1,   -1,   -1,   -1,  302,  303,
   93,   -1,   -1,  307,   33,  309,  310,   36,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,  269,  270,  271,
  272,   -1,   -1,   -1,   -1,   91,  278,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,
  292,  293,   -1,   -1,   33,  297,  298,   36,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,  123,   -1,   -1,
   -1,   -1,   91,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,
   -1,   41,  301,   -1,   44,  304,  305,   -1,   -1,  308,
   -1,   26,  311,  312,  313,   -1,   -1,  126,   58,   59,
   -1,   -1,   91,   33,   93,   40,   36,   37,   38,   -1,
   40,   46,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,   64,
   -1,   -1,   -1,   93,   64,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   36,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  106,   -1,   -1,   64,   -1,  269,  270,  271,  272,
   -1,   -1,   -1,   33,   -1,  278,   36,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,  126,   -1,   -1,  292,
  293,   91,   -1,   -1,  297,  298,  299,  300,  301,   -1,
   -1,   -1,   -1,   -1,   64,   -1,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,   -1,   -1,   -1,  126,  266,  304,  305,
   -1,   91,  308,   -1,   -1,  311,  312,  313,  277,   -1,
  279,  280,  281,  282,   -1,   91,   -1,   -1,  287,  288,
  289,  290,  291,   -1,   -1,  294,  295,  296,  257,  258,
  259,  260,  261,  302,  303,   -1,  126,  266,  307,   -1,
  309,  310,   -1,   -1,   -1,   -1,   -1,  123,  277,   -1,
  279,  280,  281,  282,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,  291,   -1,   -1,  294,  295,  296,   -1,  269,
  270,  271,  272,  302,  303,   -1,   -1,   -1,  307,   -1,
  309,  310,   -1,   -1,   -1,   -1,  256,  257,  258,  259,
  260,  261,  292,  293,   -1,   -1,  266,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,   -1,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,  291,   -1,   -1,  294,  295,  296,  257,  258,  259,
  260,  261,  302,  303,   -1,   -1,  266,  307,   -1,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,  277,   -1,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,  291,   -1,   91,  294,  295,  296,  257,  258,  259,
  260,  261,  302,  303,   -1,   -1,  266,  307,   -1,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,  277,   -1,  279,
  280,  281,  282,   -1,   -1,  123,   -1,  287,  288,  289,
  290,  291,   -1,   -1,  294,  295,  296,   -1,   -1,  285,
  286,   -1,  302,  303,   -1,   -1,   -1,  307,   33,  309,
  310,   36,   37,   38,   -1,   40,   41,   42,   43,  305,
   45,   -1,  308,   -1,   -1,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   36,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   36,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,  126,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   36,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,  126,   -1,   -1,   -1,  283,   91,  285,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,  304,  305,   -1,   -1,
  308,   -1,   -1,  311,  312,  313,   -1,   -1,  123,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   36,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   25,   26,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   34,   -1,   -1,   -1,
   -1,  126,   40,   41,   64,   -1,   -1,   -1,   46,   -1,
   -1,   -1,  257,  258,  259,  260,  261,   -1,   -1,   -1,
   -1,  266,   60,   61,   62,   63,   64,   -1,   -1,   -1,
   -1,   91,  277,   -1,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,  291,   -1,   -1,  294,
  295,  296,  257,  258,  259,  260,  261,  302,  303,   -1,
   -1,  266,  307,  123,  309,  310,  126,   -1,  106,   -1,
   -1,   -1,  277,   -1,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,  291,   -1,   -1,  294,
  295,  296,  257,  258,  259,  260,  261,  302,  303,   -1,
   -1,  266,  307,   -1,  309,  310,   -1,   -1,   -1,   -1,
   -1,   -1,  277,   -1,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,  291,   -1,   -1,  167,
  295,  296,  257,  258,  259,  260,  261,  302,  303,   -1,
   -1,  266,  307,   91,  309,  310,   -1,   -1,   -1,   -1,
   41,   -1,  277,   44,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,  291,   58,   59,  294,
  295,  296,   -1,   -1,   -1,  123,   -1,  302,  303,   -1,
   -1,   -1,  307,   33,  309,  310,   36,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,  257,  258,  259,
  260,  261,   93,   -1,   -1,   -1,  266,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   64,   -1,   -1,  277,   -1,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,  291,   -1,   -1,   41,  295,  296,   44,   -1,   -1,
   -1,   91,  302,  303,   -1,   -1,   -1,  307,   -1,  309,
  310,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,   41,
   -1,   -1,   44,   -1,   91,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   91,
   -1,   93,   -1,   -1,   -1,  283,  284,  285,  286,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,
  298,  299,  300,  301,   -1,   -1,  304,  305,   -1,   -1,
  308,  123,   -1,  311,  312,  313,   -1,   -1,   -1,   41,
   -1,   -1,   44,   -1,   91,   -1,   93,   -1,  269,  270,
  271,  272,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  292,  293,   -1,   -1,   -1,  123,  257,  258,  259,
  260,  261,   -1,   -1,   -1,   -1,  266,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,  277,   -1,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,  291,   -1,   -1,   -1,  295,  296,   -1,   -1,   -1,
   41,  123,  302,  303,   -1,   -1,   -1,  307,   -1,  309,
  310,   -1,  269,  270,  271,  272,   -1,   58,   59,   -1,
   -1,  278,   63,   -1,   -1,   -1,  283,  284,  285,  286,
   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,
  297,  298,  299,  300,  301,   -1,   41,  304,  305,   44,
   91,  308,   93,   -1,  311,  312,  313,  269,  270,  271,
  272,   -1,   -1,   58,   59,   -1,  278,   -1,   63,   -1,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,   -1,
  292,  293,  123,   -1,   -1,  297,  298,  299,  300,  301,
   -1,   41,  304,  305,   44,   -1,  308,   -1,   93,  311,
  312,  313,  269,  270,  271,  272,   -1,   -1,   58,   59,
   -1,  278,   -1,   63,   -1,   -1,  283,  284,  285,  286,
   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,  123,   -1,
  297,  298,  299,  300,  301,   -1,   41,  304,  305,   44,
   -1,  308,   -1,   93,  311,  312,  313,  269,  270,  271,
  272,   -1,   -1,   58,   59,   -1,  278,   -1,   63,   -1,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,   -1,
  292,  293,   -1,  123,   -1,  297,  298,  299,  300,  301,
   -1,   -1,  304,  305,   41,   -1,  308,   -1,   93,  311,
  312,  313,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,  123,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,   41,   -1,   91,   44,   93,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,   93,   -1,   -1,   58,
   59,  292,  293,   -1,   63,   -1,  297,  298,  299,  300,
  301,   -1,   -1,  304,  305,   -1,  123,  308,   -1,   -1,
  311,  312,  313,   -1,  269,  270,  271,  272,   41,   -1,
   -1,   44,   -1,  278,   93,   -1,   -1,   -1,  283,  284,
  285,  286,   -1,   -1,   -1,   58,   59,  292,  293,   -1,
   63,   -1,  297,  298,  299,  300,  301,   -1,   -1,  304,
  305,   -1,   -1,  308,  123,   -1,  311,  312,  313,  269,
  270,  271,  272,   41,   -1,   -1,   44,   -1,  278,   -1,
   93,   -1,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   58,   59,  292,  293,   -1,   63,   -1,  297,  298,  299,
  300,  301,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,  311,  312,  313,  269,  270,  271,  272,   41,   -1,
   -1,   44,   -1,  278,   -1,   93,   -1,   -1,  283,  284,
  285,  286,   -1,   -1,   -1,   58,   59,  292,  293,   -1,
   63,   -1,  297,  298,  299,  300,  301,   -1,   -1,  304,
  305,   -1,   -1,  308,   -1,   -1,  311,  312,  313,   -1,
   -1,   -1,  269,  270,  271,  272,   41,   -1,   -1,   44,
   93,  278,  269,  270,  271,  272,  283,  284,  285,  286,
   -1,   -1,   -1,   58,   59,  292,  293,   -1,   63,   -1,
  297,  298,  299,  300,  301,  292,  293,  304,  305,   -1,
   -1,  308,   -1,   -1,  311,  312,  313,   -1,   -1,   -1,
  269,  270,  271,  272,   41,   -1,   -1,   -1,   93,  278,
   -1,   -1,   -1,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,   -1,  292,  293,   -1,   63,   -1,  297,  298,
  299,  300,  301,   -1,   -1,  304,  305,   -1,   -1,  308,
   -1,   -1,  311,  312,  313,   -1,  269,  270,  271,  272,
   41,   -1,   -1,   44,   91,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,   -1,   -1,   -1,   58,   59,  292,
  293,   -1,   63,   -1,  297,  298,  299,  300,  301,   -1,
   -1,  304,  305,   -1,   -1,  308,  123,   -1,  311,  312,
  313,  269,  270,  271,  272,   41,   -1,   -1,   44,   -1,
  278,   -1,   93,   -1,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   58,   59,  292,  293,   -1,   63,   -1,  297,
  298,  299,  300,  301,   -1,   -1,  304,  305,   -1,   -1,
  308,   -1,   -1,  311,  312,  313,  269,  270,  271,  272,
   41,   -1,   -1,   44,   -1,  278,   -1,   93,   -1,   -1,
  283,  284,  285,  286,   -1,   -1,   -1,   58,   59,  292,
  293,   -1,   63,   -1,  297,  298,  299,  300,  301,   -1,
   -1,  304,  305,   -1,   -1,  308,   -1,   -1,  311,  312,
  313,   -1,   -1,   -1,  269,  270,  271,  272,   41,   -1,
   -1,   44,   93,  278,   -1,   -1,   -1,   -1,  283,  284,
  285,  286,   -1,   -1,   -1,   58,   59,  292,  293,   -1,
   63,   -1,  297,  298,  299,  300,  301,   -1,   -1,  304,
  305,   -1,   -1,  308,   -1,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   93,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
  297,  298,  299,  300,  301,   -1,   -1,  304,  305,   -1,
   -1,  308,   -1,   -1,  311,  312,  313,   -1,  269,  270,
  271,  272,   -1,   58,   -1,   93,   -1,  278,   63,   -1,
   -1,   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
   -1,  292,  293,   -1,   -1,   -1,  297,  298,  299,  300,
  301,   -1,   41,  304,  305,   44,   91,  308,   -1,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,   -1,   -1,   58,
   59,   -1,  278,   -1,   63,   -1,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,   -1,  292,  293,  123,   -1,
   -1,  297,  298,  299,  300,  301,   -1,   41,  304,  305,
   44,   -1,  308,   -1,   93,   -1,   -1,   -1,  269,  270,
  271,  272,   -1,   -1,   58,   59,   -1,  278,   -1,   63,
   -1,   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
   -1,  292,  293,   -1,   -1,   -1,  297,  298,  299,  300,
  301,   -1,   -1,  304,  305,   41,   -1,   -1,   44,   93,
   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,  271,  272,
   -1,   -1,   58,   59,   -1,  278,   -1,   63,   -1,   -1,
  283,  284,  285,  286,   -1,   -1,   -1,   -1,   -1,  292,
  293,   -1,   -1,   -1,  297,  298,  299,  300,  301,   -1,
   41,  304,  305,   44,   -1,   -1,   -1,   93,   -1,   -1,
   -1,  269,  270,  271,  272,   -1,   -1,   58,   59,   -1,
  278,   -1,   63,   -1,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,  297,
  298,  299,  300,  301,   -1,   41,  304,  305,   44,   -1,
   -1,   -1,   93,  278,   -1,   -1,   -1,   -1,  283,  284,
  285,  286,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,  297,  298,  299,  300,  301,   -1,   -1,  304,
  305,   -1,   -1,  308,   -1,   -1,  311,  312,  313,   -1,
  269,  270,  271,  272,   -1,   -1,   -1,   93,   -1,  278,
   63,   -1,   -1,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,  297,  298,
  299,  300,  301,   -1,   41,  304,  305,   44,   91,   -1,
   -1,   -1,   -1,   -1,   -1,  269,  270,  271,  272,   -1,
   -1,   58,   59,   -1,  278,   -1,   63,   -1,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,   -1,  292,  293,
  123,   -1,   -1,  297,  298,  299,  300,  301,   -1,   -1,
  304,  305,   41,   -1,   -1,   44,   93,   -1,   -1,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,   -1,   -1,   58,
   59,   -1,  278,   -1,   63,   -1,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,
   -1,  297,  298,  299,  300,  301,   -1,   41,  304,  305,
   44,   -1,   -1,   -1,   93,   -1,   -1,   -1,  269,  270,
  271,  272,   -1,   -1,   58,   59,   -1,  278,   -1,   63,
   -1,   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
   -1,  292,  293,   -1,   -1,   -1,  297,  298,  299,  300,
  301,   -1,   41,  304,  305,   44,   -1,   -1,   -1,   93,
   -1,   -1,   -1,  269,  270,  271,  272,   -1,   -1,   58,
   59,   -1,  278,   -1,   63,   -1,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,   41,  292,  293,   44,   -1,
   -1,  297,  298,  299,  300,  301,   -1,   -1,  304,   -1,
   -1,   -1,   58,   59,   93,  278,   -1,   63,   -1,   -1,
  283,  284,  285,  286,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  297,  298,  299,  300,  301,   -1,
   41,  304,  305,   44,   -1,  308,   -1,   93,  311,  312,
  313,   -1,  269,  270,  271,  272,   41,   58,   59,   44,
   -1,  278,   63,   -1,   -1,   -1,  283,  284,   -1,  286,
   -1,   -1,   -1,   58,   59,  292,  293,   -1,   63,   -1,
  297,  298,  299,  300,  301,   -1,   -1,  304,   41,   -1,
   -1,   44,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  269,  270,  271,  272,   41,   58,   59,   44,   93,  278,
   63,   -1,   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,
   -1,   58,   59,  292,  293,   -1,   63,   -1,  297,  298,
  299,  300,  301,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,  269,  270,  271,  272,   41,
   -1,   -1,   44,   -1,  278,   -1,   93,   -1,   -1,  283,
  284,   -1,   -1,   -1,   -1,   -1,   58,   59,  292,  293,
   -1,   63,   -1,  297,  298,  299,  300,  301,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   63,   -1,
  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   93,   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,   -1,   91,   -1,  297,  298,
  299,  300,  301,  269,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,  283,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,  123,   -1,
   -1,  297,  298,  299,  300,  301,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,
   -1,   -1,  283,  284,  269,  270,  271,  272,   -1,   -1,
   -1,  292,  293,  278,   -1,   -1,  297,  298,  299,  300,
  301,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,
   -1,   -1,  297,  298,  299,  300,  269,  270,  271,  272,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
   -1,  284,  269,  270,  271,  272,   -1,   -1,   -1,  292,
  293,  278,   -1,   -1,  297,  298,  299,  300,  301,   -1,
   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,
  297,  298,  299,  300,  301,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   35,   -1,  269,  270,  271,
  272,   41,   42,   -1,   -1,   -1,  278,   -1,   48,   49,
   50,   51,   52,   53,   54,   -1,   -1,   57,   58,   -1,
  292,  293,   -1,  278,   -1,  297,  298,  299,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,  299,  300,  301,   -1,   -1,  304,
  305,   91,   -1,  308,   -1,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  143,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  151,  152,  153,  154,  155,  156,  157,  158,  159,
  160,  161,  162,  163,  164,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  253,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  281,
};
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 313
#if YYDEBUG
dEXT char * yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,"'$'","'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,0,0,0,0,0,0,
0,0,0,0,0,"':'","';'",0,0,0,"'?'","'@'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,"'{'",0,"'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"WORD","METHOD","FUNCMETH","THING",
"PMFUNC","PRIVATEREF","LABEL","FORMAT","SUB","ANONSUB","PACKAGE","USE","WHILE",
"UNTIL","IF","UNLESS","ELSE","ELSIF","CONTINUE","FOR","LOOPEX","DOTDOT","FUNC0",
"FUNC1","FUNC","FUNC0SUB","RELOP","EQOP","MULOP","ADDOP","DOLSHARP","DO",
"LOCAL","HASHBRACK","NOAMP","OROP","ANDOP","NOTOP","LSTOP","LSTOPSUB",
"ASSIGNOP","OROR","ANDAND","BITOROP","BITANDOP","UNIOP","UNIOPSUB","SHIFTOP",
"MATCHOP","UMINUS","REFGEN","POWOP","PREINC","PREDEC","POSTINC","POSTDEC",
"ARROW",
};
dEXT char * yyrule[] = {
"$accept : prog",
"$$1 :",
"prog : $$1 lineseq",
"block : '{' remember lineseq '}'",
"remember :",
"lineseq :",
"lineseq : lineseq decl",
"lineseq : lineseq line",
"line : label cond",
"line : loop",
"line : label ';'",
"line : label sideff ';'",
"sideff : error",
"sideff : expr",
"sideff : expr IF expr",
"sideff : expr UNLESS expr",
"sideff : expr WHILE expr",
"sideff : expr UNTIL expr",
"else :",
"else : ELSE block",
"else : ELSIF '(' expr ')' block else",
"cond : IF '(' expr ')' block else",
"cond : UNLESS '(' expr ')' block else",
"cond : IF block block else",
"cond : UNLESS block block else",
"cont :",
"cont : CONTINUE block",
"loop : label WHILE '(' texpr ')' block cont",
"loop : label UNTIL '(' expr ')' block cont",
"loop : label WHILE block block cont",
"loop : label UNTIL block block cont",
"loop : label FOR scalar '(' expr ')' block cont",
"loop : label FOR '(' expr ')' block cont",
"loop : label FOR '(' nexpr ';' texpr ';' nexpr ')' block",
"loop : label block cont",
"nexpr :",
"nexpr : sideff",
"texpr :",
"texpr : expr",
"label :",
"label : LABEL",
"decl : format",
"decl : subrout",
"decl : package",
"decl : use",
"format : FORMAT startsub WORD block",
"format : FORMAT startsub block",
"subrout : SUB startsub WORD proto block",
"subrout : SUB startsub WORD proto ';'",
"proto :",
"proto : THING",
"startsub :",
"package : PACKAGE WORD ';'",
"package : PACKAGE ';'",
"use : USE WORD listexpr ';'",
"expr : expr ANDOP expr",
"expr : expr OROP expr",
"expr : NOTOP expr",
"expr : argexpr",
"argexpr : argexpr ','",
"argexpr : argexpr ',' term",
"argexpr : term",
"listop : LSTOP indirob argexpr",
"listop : FUNC '(' indirob expr ')'",
"listop : term ARROW method '(' listexprcom ')'",
"listop : METHOD indirob listexpr",
"listop : FUNCMETH indirob '(' listexprcom ')'",
"listop : LSTOP listexpr",
"listop : FUNC '(' listexprcom ')'",
"listop : LSTOPSUB startsub block listexpr",
"method : METHOD",
"method : scalar",
"term : term ASSIGNOP term",
"term : term POWOP term",
"term : term MULOP term",
"term : term ADDOP term",
"term : term SHIFTOP term",
"term : term RELOP term",
"term : term EQOP term",
"term : term BITANDOP term",
"term : term BITOROP term",
"term : term DOTDOT term",
"term : term ANDAND term",
"term : term OROR term",
"term : term '?' term ':' term",
"term : term MATCHOP term",
"term : '-' term",
"term : '+' term",
"term : '!' term",
"term : '~' term",
"term : REFGEN term",
"term : term POSTINC",
"term : term POSTDEC",
"term : PREINC term",
"term : PREDEC term",
"term : LOCAL term",
"term : '(' expr ')'",
"term : '(' ')'",
"term : '[' expr ']'",
"term : '[' ']'",
"term : HASHBRACK expr ';' '}'",
"term : HASHBRACK ';' '}'",
"term : ANONSUB startsub proto block",
"term : scalar",
"term : star",
"term : scalar '[' expr ']'",
"term : term ARROW '[' expr ']'",
"term : term '[' expr ']'",
"term : hsh",
"term : ary",
"term : arylen",
"term : scalar '{' expr ';' '}'",
"term : term ARROW '{' expr ';' '}'",
"term : term '{' expr ';' '}'",
"term : '(' expr ')' '[' expr ']'",
"term : '(' ')' '[' expr ']'",
"term : ary '[' expr ']'",
"term : ary '{' expr ';' '}'",
"term : THING",
"term : amper",
"term : amper '(' ')'",
"term : amper '(' expr ')'",
"term : NOAMP WORD listexpr",
"term : DO term",
"term : DO block",
"term : DO WORD '(' ')'",
"term : DO WORD '(' expr ')'",
"term : DO scalar '(' ')'",
"term : DO scalar '(' expr ')'",
"term : LOOPEX",
"term : LOOPEX term",
"term : UNIOP",
"term : UNIOP block",
"term : UNIOP term",
"term : UNIOPSUB term",
"term : FUNC0",
"term : FUNC0 '(' ')'",
"term : FUNC0SUB",
"term : FUNC1 '(' ')'",
"term : FUNC1 '(' expr ')'",
"term : PMFUNC '(' term ')'",
"term : PMFUNC '(' term ',' term ')'",
"term : WORD",
"term : listop",
"listexpr :",
"listexpr : argexpr",
"listexprcom :",
"listexprcom : expr",
"listexprcom : expr ','",
"amper : '&' indirob",
"scalar : '$' indirob",
"ary : '@' indirob",
"hsh : '%' indirob",
"arylen : DOLSHARP indirob",
"star : '*' indirob",
"indirob : WORD",
"indirob : scalar",
"indirob : block",
"indirob : PRIVATEREF",
};
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
dEXT int yydebug;
dEXT int yynerrs;
dEXT int yyerrflag;
dEXT int yychar;
dEXT YYSTYPE yyval;
dEXT YYSTYPE yylval;
#line 562 "perly.y"
 /* PROGRAM */
#line 1307 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab

struct ysv {
    short* yyss;
    YYSTYPE* yyvs;
    int oldyydebug;
    int oldyynerrs;
    int oldyyerrflag;
    int oldyychar;
    YYSTYPE oldyyval;
    YYSTYPE oldyylval;
};

void
yydestruct(ptr)
void* ptr;
{
    struct ysv* ysave = (struct ysv*)ptr;
    if (ysave->yyss) Safefree(ysave->yyss);
    if (ysave->yyvs) Safefree(ysave->yyvs);
    yydebug	= ysave->oldyydebug;
    yynerrs	= ysave->oldyynerrs;
    yyerrflag	= ysave->oldyyerrflag;
    yychar	= ysave->oldyychar;
    yyval	= ysave->oldyyval;
    yylval	= ysave->oldyylval;
    Safefree(ysave);
}

int
yyparse()
{
    register int yym, yyn, yystate;
    register short *yyssp;
    register YYSTYPE *yyvsp;
    short* yyss;
    YYSTYPE* yyvs;
    unsigned yystacksize = YYSTACKSIZE;
    int retval = 0;
#if YYDEBUG
    register char *yys;
    extern char *getenv();
#endif

    struct ysv *ysave = (struct ysv*)safemalloc(sizeof(struct ysv));
    SAVEDESTRUCTOR(yydestruct, ysave);
    ysave->oldyydebug	= yydebug;
    ysave->oldyynerrs	= yynerrs;
    ysave->oldyyerrflag	= yyerrflag;
    ysave->oldyychar	= yychar;
    ysave->oldyyval	= yyval;
    ysave->oldyylval	= yylval;

#if YYDEBUG
    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    /*
    ** Initialize private stacks (yyparse may be called from an action)
    */
    ysave->yyss = yyss = (short*)safemalloc(yystacksize*sizeof(short));
    ysave->yyvs = yyvs = (YYSTYPE*)safemalloc(yystacksize*sizeof(YYSTYPE));
    if (!yyvs || !yyss)
	goto yyoverflow;

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            fprintf(stderr, "yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            fprintf(stderr, "yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
	    /*
	    ** reallocate and recover.  Note that pointers
	    ** have to be reset, or bad things will happen
	    */
	    int yyps_index = (yyssp - yyss);
	    int yypv_index = (yyvsp - yyvs);
	    yystacksize += YYSTACKSIZE;
	    ysave->yyvs = yyvs =
		(YYSTYPE*)realloc((char*)yyvs,yystacksize * sizeof(YYSTYPE));
	    ysave->yyss = yyss =
		(short*)realloc((char*)yyss,yystacksize * sizeof(short));
	    if (!yyvs || !yyss)
		goto yyoverflow;
	    yyssp = yyss + yyps_index;
	    yyvsp = yyvs + yypv_index;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    fprintf(stderr,
		     "yydebug: state %d, error recovery shifting to state %d\n",
		     *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
		    /*
		    ** reallocate and recover.  Note that pointers
		    ** have to be reset, or bad things will happen
		    */
		    int yyps_index = (yyssp - yyss);
		    int yypv_index = (yyvsp - yyvs);
		    yystacksize += YYSTACKSIZE;
		    ysave->yyvs = yyvs = (YYSTYPE*)realloc((char*)yyvs,
			yystacksize * sizeof(YYSTYPE));
		    ysave->yyss = yyss = (short*)realloc((char*)yyss,
			yystacksize * sizeof(short));
		    if (!yyvs || !yyss)
			goto yyoverflow;
		    yyssp = yyss + yyps_index;
		    yyvsp = yyvs + yypv_index;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    fprintf(stderr,
			"yydebug: error recovery discarding state %d\n",
			*yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            fprintf(stderr,
		"yydebug: state %d, error recovery discards token %d (%s)\n",
		yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        fprintf(stderr, "yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 83 "perly.y"
{
#if defined(YYDEBUG) && defined(DEBUGGING)
		    yydebug = (debug & 1);
#endif
		    expect = XSTATE;
		}
break;
case 2:
#line 90 "perly.y"
{ newPROG(yyvsp[0].opval); }
break;
case 3:
#line 94 "perly.y"
{ yyval.opval = block_end(yyvsp[-3].ival,yyvsp[-2].ival,yyvsp[-1].opval); }
break;
case 4:
#line 98 "perly.y"
{ yyval.ival = block_start(); }
break;
case 5:
#line 102 "perly.y"
{ yyval.opval = Nullop; }
break;
case 6:
#line 104 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 7:
#line 106 "perly.y"
{   yyval.opval = append_list(OP_LINESEQ,
				(LISTOP*)yyvsp[-1].opval, (LISTOP*)yyvsp[0].opval);
			    pad_reset_pending = TRUE;
			    if (yyvsp[-1].opval && yyvsp[0].opval) hints |= HINT_BLOCK_SCOPE; }
break;
case 8:
#line 113 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-1].pval, yyvsp[0].opval); }
break;
case 10:
#line 116 "perly.y"
{ if (yyvsp[-1].pval != Nullch) {
			      yyval.opval = newSTATEOP(0, yyvsp[-1].pval, newOP(OP_NULL, 0));
			    }
			    else {
			      yyval.opval = Nullop;
			      copline = NOLINE;
			    }
			    expect = XSTATE; }
break;
case 11:
#line 125 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-2].pval, yyvsp[-1].opval);
			  expect = XSTATE; }
break;
case 12:
#line 130 "perly.y"
{ yyval.opval = Nullop; }
break;
case 13:
#line 132 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 14:
#line 134 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 15:
#line 136 "perly.y"
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 16:
#line 138 "perly.y"
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, scalar(yyvsp[0].opval), yyvsp[-2].opval); }
break;
case 17:
#line 140 "perly.y"
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, invert(scalar(yyvsp[0].opval)), yyvsp[-2].opval);}
break;
case 18:
#line 144 "perly.y"
{ yyval.opval = Nullop; }
break;
case 19:
#line 146 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 20:
#line 148 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newSTATEOP(0, 0,
				newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval));
			    hints |= HINT_BLOCK_SCOPE; }
break;
case 21:
#line 155 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval); }
break;
case 22:
#line 158 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newCONDOP(0,
				invert(scalar(yyvsp[-3].opval)), scope(yyvsp[-1].opval), yyvsp[0].opval); }
break;
case 23:
#line 162 "perly.y"
{ copline = yyvsp[-3].ival;
			    deprecate("if BLOCK BLOCK");
			    yyval.opval = newCONDOP(0, scope(yyvsp[-2].opval), scope(yyvsp[-1].opval), yyvsp[0].opval); }
break;
case 24:
#line 166 "perly.y"
{ copline = yyvsp[-3].ival;
			    deprecate("unless BLOCK BLOCK");
			    yyval.opval = newCONDOP(0, invert(scalar(scope(yyvsp[-2].opval))),
						scope(yyvsp[-1].opval), yyvsp[0].opval); }
break;
case 25:
#line 173 "perly.y"
{ yyval.opval = Nullop; }
break;
case 26:
#line 175 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 27:
#line 179 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newSTATEOP(0, yyvsp[-6].pval,
				    newWHILEOP(0, 1, (LOOP*)Nullop,
					yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval) ); }
break;
case 28:
#line 184 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newSTATEOP(0, yyvsp[-6].pval,
				    newWHILEOP(0, 1, (LOOP*)Nullop,
					invert(scalar(yyvsp[-3].opval)), yyvsp[-1].opval, yyvsp[0].opval) ); }
break;
case 29:
#line 189 "perly.y"
{ copline = yyvsp[-3].ival;
			    yyval.opval = newSTATEOP(0, yyvsp[-4].pval,
				    newWHILEOP(0, 1, (LOOP*)Nullop,
					scope(yyvsp[-2].opval), yyvsp[-1].opval, yyvsp[0].opval) ); }
break;
case 30:
#line 194 "perly.y"
{ copline = yyvsp[-3].ival;
			    yyval.opval = newSTATEOP(0, yyvsp[-4].pval,
				    newWHILEOP(0, 1, (LOOP*)Nullop,
					invert(scalar(scope(yyvsp[-2].opval))), yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 31:
#line 199 "perly.y"
{ yyval.opval = newFOROP(0, yyvsp[-7].pval, yyvsp[-6].ival, mod(yyvsp[-5].opval, OP_ENTERLOOP),
				yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 32:
#line 202 "perly.y"
{ yyval.opval = newFOROP(0, yyvsp[-6].pval, yyvsp[-5].ival, Nullop, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 33:
#line 205 "perly.y"
{  copline = yyvsp[-8].ival;
			    yyval.opval = append_elem(OP_LINESEQ,
				    newSTATEOP(0, yyvsp[-9].pval, scalar(yyvsp[-6].opval)),
				    newSTATEOP(0, yyvsp[-9].pval,
					newWHILEOP(0, 1, (LOOP*)Nullop,
					    scalar(yyvsp[-4].opval), yyvsp[0].opval, scalar(yyvsp[-2].opval)) )); }
break;
case 34:
#line 212 "perly.y"
{ yyval.opval = newSTATEOP(0,
				yyvsp[-2].pval, newWHILEOP(0, 1, (LOOP*)Nullop,
					Nullop, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 35:
#line 218 "perly.y"
{ yyval.opval = Nullop; }
break;
case 37:
#line 223 "perly.y"
{ (void)scan_num("1"); yyval.opval = yylval.opval; }
break;
case 39:
#line 228 "perly.y"
{ yyval.pval = Nullch; }
break;
case 41:
#line 233 "perly.y"
{ yyval.ival = 0; }
break;
case 42:
#line 235 "perly.y"
{ yyval.ival = 0; }
break;
case 43:
#line 237 "perly.y"
{ yyval.ival = 0; }
break;
case 44:
#line 239 "perly.y"
{ yyval.ival = 0; }
break;
case 45:
#line 243 "perly.y"
{ newFORM(yyvsp[-2].ival, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 46:
#line 245 "perly.y"
{ newFORM(yyvsp[-1].ival, Nullop, yyvsp[0].opval); }
break;
case 47:
#line 249 "perly.y"
{ newSUB(yyvsp[-3].ival, yyvsp[-2].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 48:
#line 251 "perly.y"
{ newSUB(yyvsp[-3].ival, yyvsp[-2].opval, yyvsp[-1].opval, Nullop); expect = XSTATE; }
break;
case 49:
#line 255 "perly.y"
{ yyval.opval = Nullop; }
break;
case 51:
#line 260 "perly.y"
{ yyval.ival = start_subparse(); }
break;
case 52:
#line 264 "perly.y"
{ package(yyvsp[-1].opval); }
break;
case 53:
#line 266 "perly.y"
{ package(Nullop); }
break;
case 54:
#line 270 "perly.y"
{ utilize(yyvsp[-3].ival, yyvsp[-2].opval, yyvsp[-1].opval); }
break;
case 55:
#line 274 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 56:
#line 276 "perly.y"
{ yyval.opval = newLOGOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 57:
#line 278 "perly.y"
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 59:
#line 283 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 60:
#line 285 "perly.y"
{ yyval.opval = append_elem(OP_LIST, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 62:
#line 290 "perly.y"
{ yyval.opval = convert(yyvsp[-2].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-2].ival,yyvsp[-1].opval), yyvsp[0].opval) ); }
break;
case 63:
#line 293 "perly.y"
{ yyval.opval = convert(yyvsp[-4].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-4].ival,yyvsp[-2].opval), yyvsp[-1].opval) ); }
break;
case 64:
#line 296 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-5].opval, yyvsp[-1].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-3].opval))); }
break;
case 65:
#line 301 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-1].opval, yyvsp[0].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-2].opval))); }
break;
case 66:
#line 306 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-3].opval, yyvsp[-1].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-4].opval))); }
break;
case 67:
#line 311 "perly.y"
{ yyval.opval = convert(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 68:
#line 313 "perly.y"
{ yyval.opval = convert(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 69:
#line 315 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST,
			      prepend_elem(OP_LIST, newANONSUB(yyvsp[-2].ival, 0, yyvsp[-1].opval), yyvsp[0].opval),
			      yyvsp[-3].ival)); }
break;
case 72:
#line 326 "perly.y"
{ yyval.opval = newASSIGNOP(OPf_STACKED, yyvsp[-2].opval, yyvsp[-1].ival, yyvsp[0].opval); }
break;
case 73:
#line 328 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 74:
#line 330 "perly.y"
{   if (yyvsp[-1].ival != OP_REPEAT)
				scalar(yyvsp[-2].opval);
			    yyval.opval = newBINOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, scalar(yyvsp[0].opval)); }
break;
case 75:
#line 334 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 76:
#line 336 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 77:
#line 338 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 78:
#line 340 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 79:
#line 342 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 80:
#line 344 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 81:
#line 346 "perly.y"
{ yyval.opval = newRANGE(yyvsp[-1].ival, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval));}
break;
case 82:
#line 348 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 83:
#line 350 "perly.y"
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 84:
#line 352 "perly.y"
{ yyval.opval = newCONDOP(0, yyvsp[-4].opval, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 85:
#line 354 "perly.y"
{ yyval.opval = bind_match(yyvsp[-1].ival, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 86:
#line 357 "perly.y"
{ yyval.opval = newUNOP(OP_NEGATE, 0, scalar(yyvsp[0].opval)); }
break;
case 87:
#line 359 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 88:
#line 361 "perly.y"
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 89:
#line 363 "perly.y"
{ yyval.opval = newUNOP(OP_COMPLEMENT, 0, scalar(yyvsp[0].opval));}
break;
case 90:
#line 365 "perly.y"
{ yyval.opval = newUNOP(OP_REFGEN, 0, mod(yyvsp[0].opval,OP_REFGEN)); }
break;
case 91:
#line 367 "perly.y"
{ yyval.opval = newUNOP(OP_POSTINC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTINC)); }
break;
case 92:
#line 370 "perly.y"
{ yyval.opval = newUNOP(OP_POSTDEC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTDEC)); }
break;
case 93:
#line 373 "perly.y"
{ yyval.opval = newUNOP(OP_PREINC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREINC)); }
break;
case 94:
#line 376 "perly.y"
{ yyval.opval = newUNOP(OP_PREDEC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREDEC)); }
break;
case 95:
#line 379 "perly.y"
{ yyval.opval = localize(yyvsp[0].opval,yyvsp[-1].ival); }
break;
case 96:
#line 381 "perly.y"
{ yyval.opval = sawparens(yyvsp[-1].opval); }
break;
case 97:
#line 383 "perly.y"
{ yyval.opval = sawparens(newNULLLIST()); }
break;
case 98:
#line 385 "perly.y"
{ yyval.opval = newANONLIST(yyvsp[-1].opval); }
break;
case 99:
#line 387 "perly.y"
{ yyval.opval = newANONLIST(Nullop); }
break;
case 100:
#line 389 "perly.y"
{ yyval.opval = newANONHASH(yyvsp[-2].opval); }
break;
case 101:
#line 391 "perly.y"
{ yyval.opval = newANONHASH(Nullop); }
break;
case 102:
#line 393 "perly.y"
{ yyval.opval = newANONSUB(yyvsp[-2].ival, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 103:
#line 395 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 104:
#line 397 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 105:
#line 399 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0, oopsAV(yyvsp[-3].opval), scalar(yyvsp[-1].opval)); }
break;
case 106:
#line 401 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-4].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 107:
#line 405 "perly.y"
{ assertref(yyvsp[-3].opval); yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-3].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 108:
#line 409 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 109:
#line 411 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 110:
#line 413 "perly.y"
{ yyval.opval = newUNOP(OP_AV2ARYLEN, 0, ref(yyvsp[0].opval, OP_AV2ARYLEN));}
break;
case 111:
#line 415 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0, oopsHV(yyvsp[-4].opval), jmaybe(yyvsp[-2].opval));
			    expect = XOPERATOR; }
break;
case 112:
#line 418 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-5].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    expect = XOPERATOR; }
break;
case 113:
#line 423 "perly.y"
{ assertref(yyvsp[-4].opval); yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-4].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    expect = XOPERATOR; }
break;
case 114:
#line 428 "perly.y"
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, yyvsp[-4].opval); }
break;
case 115:
#line 430 "perly.y"
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, Nullop); }
break;
case 116:
#line 432 "perly.y"
{ yyval.opval = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list(yyvsp[-1].opval),
					ref(yyvsp[-3].opval, OP_ASLICE))); }
break;
case 117:
#line 438 "perly.y"
{ yyval.opval = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list(yyvsp[-2].opval),
					ref(oopsHV(yyvsp[-4].opval), OP_HSLICE)));
			    expect = XOPERATOR; }
break;
case 118:
#line 445 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 119:
#line 447 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, 0,
				scalar(yyvsp[0].opval)); }
break;
case 120:
#line 450 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar(yyvsp[-2].opval)); }
break;
case 121:
#line 452 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[-1].opval, scalar(yyvsp[-3].opval))); }
break;
case 122:
#line 455 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST,
				yyvsp[0].opval, newCVREF(scalar(yyvsp[-1].opval)))); }
break;
case 123:
#line 459 "perly.y"
{ yyval.opval = newUNOP(OP_DOFILE, 0, scalar(yyvsp[0].opval)); }
break;
case 124:
#line 461 "perly.y"
{ yyval.opval = newUNOP(OP_NULL, OPf_SPECIAL, scope(yyvsp[0].opval)); }
break;
case 125:
#line 463 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(scalar(yyvsp[-2].opval))), Nullop)); dep();}
break;
case 126:
#line 467 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    append_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(scalar(yyvsp[-3].opval))))); dep();}
break;
case 127:
#line 472 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(scalar(yyvsp[-2].opval))), Nullop)); dep();}
break;
case 128:
#line 476 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(scalar(yyvsp[-3].opval))))); dep();}
break;
case 129:
#line 481 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, OPf_SPECIAL);
			    hints |= HINT_BLOCK_SCOPE; }
break;
case 130:
#line 484 "perly.y"
{ yyval.opval = newLOOPEX(yyvsp[-1].ival,yyvsp[0].opval); }
break;
case 131:
#line 486 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 132:
#line 488 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 133:
#line 490 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 134:
#line 492 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[0].opval, scalar(yyvsp[-1].ival))); }
break;
case 135:
#line 495 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 136:
#line 497 "perly.y"
{ yyval.opval = newOP(yyvsp[-2].ival, 0); }
break;
case 137:
#line 499 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, 0,
				scalar(yyvsp[0].ival)); }
break;
case 138:
#line 502 "perly.y"
{ yyval.opval = newOP(yyvsp[-2].ival, OPf_SPECIAL); }
break;
case 139:
#line 504 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 140:
#line 506 "perly.y"
{ yyval.opval = pmruntime(yyvsp[-3].opval, yyvsp[-1].opval, Nullop); }
break;
case 141:
#line 508 "perly.y"
{ yyval.opval = pmruntime(yyvsp[-5].opval, yyvsp[-3].opval, yyvsp[-1].opval); }
break;
case 144:
#line 514 "perly.y"
{ yyval.opval = Nullop; }
break;
case 145:
#line 516 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 146:
#line 520 "perly.y"
{ yyval.opval = Nullop; }
break;
case 147:
#line 522 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 148:
#line 524 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 149:
#line 528 "perly.y"
{ yyval.opval = newCVREF(yyvsp[0].opval); }
break;
case 150:
#line 532 "perly.y"
{ yyval.opval = newSVREF(yyvsp[0].opval); }
break;
case 151:
#line 536 "perly.y"
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 152:
#line 540 "perly.y"
{ yyval.opval = newHVREF(yyvsp[0].opval); }
break;
case 153:
#line 544 "perly.y"
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 154:
#line 548 "perly.y"
{ yyval.opval = newGVREF(0,yyvsp[0].opval); }
break;
case 155:
#line 552 "perly.y"
{ yyval.opval = scalar(yyvsp[0].opval); }
break;
case 156:
#line 554 "perly.y"
{ yyval.opval = scalar(yyvsp[0].opval);  }
break;
case 157:
#line 556 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 158:
#line 559 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
#line 2139 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            fprintf(stderr,
		"yydebug: after reduction, shifting from state 0 to state %d\n",
		YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                fprintf(stderr, "yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        fprintf(stderr,
	    "yydebug: after reduction, shifting from state %d to state %d\n",
	    *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
	/*
	** reallocate and recover.  Note that pointers
	** have to be reset, or bad things will happen
	*/
	int yyps_index = (yyssp - yyss);
	int yypv_index = (yyvsp - yyvs);
	yystacksize += YYSTACKSIZE;
	ysave->yyvs = yyvs =
	    (YYSTYPE*)realloc((char*)yyvs,yystacksize * sizeof(YYSTYPE));
	ysave->yyss = yyss =
	    (short*)realloc((char*)yyss,yystacksize * sizeof(short));
	if (!yyvs || !yyss)
	    goto yyoverflow;
	yyssp = yyss + yyps_index;
	yyvsp = yyvs + yypv_index;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("Out of memory for yacc stack");
yyabort:
    retval = 1;
yyaccept:
    return retval;
}
