?RCS: $Id: d_shmat.U,v 3.0 1993/08/18 12:07:18 ram Exp $
?RCS:
?RCS: Copyright (c) 1991-1993, Raphael Manfredi
?RCS: 
?RCS: You may redistribute only under the terms of the Artistic Licence,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic Licence; a copy of which may be found at the root
?RCS: of the source tree for dist 3.0.
?RCS:
?RCS: $Log: d_shmat.U,v $
?RCS: Revision 3.0  1993/08/18  12:07:18  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_shmat d_voidshmat: Inlibc cppstdin cppflags cppminus usrinc \
	contains
?MAKE:	-pick add $@ %<
?S:d_shmat:
?S:	This variable conditionally defines the HAS_SHMAT symbol, which
?S:	indicates to the C program that the shmat() routine is available.
?S:.
?S:d_voidshmat:
?S:	This symbol, if defined, indicates that the shmat() routine
?S:	returns a pointer of type void*.  Otherwise, char* is assumed.
?S:.
?C:HAS_SHMAT:
?C:	This symbol, if defined, indicates that the shmat() routine is
?C:	available to attach a shared memory segment to the process space.
?C:.
?H:#$d_shmat HAS_SHMAT		/**/
?H:.
?C:VOIDSHMAT:
?C:	This symbol, if defined, indicates that the shmat() routine
?C:	returns a pointer of type void*.  Otherwise, char* is assumed.
?C:.
?H:#$d_voidshmat	VOIDSHMAT		/**/
?H:.
?LINT:set d_shmat d_voidshmat
: see if shmat exists
set shmat d_shmat
eval $inlibc
: see what shmat returns
d_voidshmat="$undef"
case "$d_shmat" in
define)
    $cppstdin $cppflags $cppminus < $usrinc/sys/shm.h >voidshmat.txt 2>/dev/null
    if $contains "void.*shmat" voidshmat.txt >/dev/null 2>&1; then
	echo "and shmat returns (void*)"
	d_voidshmat="$define"
    else
	echo "and shmat returns (char*)"
    fi
    ;;
esac
