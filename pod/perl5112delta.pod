=head1 NAME

[ Any text flagged as XXX needs to be processed before release. ]

perldelta - what is new for perl v5.11.2

=head1 DESCRIPTION

This document describes differences between the 5.11.1 release and
the 5.11.2 release.

=head1 Notice

XXX Unlikely to need this section.

=head1 Incompatible Changes

=head2 Use of C<:=> to mean an empty attribute list is now deprecated.

An accident of Perl's parser means that these constructions are all equivalent:

    my $pi := 4;
    my $pi : = 4;
    my $pi :  = 4;

with the C<:> being treated as the start of an attribute list, which ends
before the C<=>. As whitespace is not significant here, all are parsed as an
empty attribute list, hence all the above are equivalent to, and better written
as

    my $pi = 4;

because no attribute processing is done for an empty list.

As is, this means that C<:=> cannot be used as a new token, without silently
changing the meaning of existing code. Hence that particular form is now
deprecated, and will become a syntax error. If it is absolutely necessary to
have empty attribute lists (for example, because of a code generator) the
avoid the warning by adding a space before the C<=>.

=head1 Core Enhancements

XXX New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

=head2 qr overloading

It is now possible to overload the C<qr//> operator, that is, conversion
to regexp, like it was already possible to overload conversion to
boolean, string or number of objects. It is invoked when an object
appears on the right hand side of the C<=~> operator, or when it is
interpolated into a regexp. See L<overload>.

=head2 Pluggable keywords

Extension modules can now cleanly hook into the Perl parser to define new
kinds of keyword-headed expression and compound statement.  The syntax
following the keyword is defined entirely by the extension.  This allow
a completely non-Perl sublanguage to be parsed inline, with the right
ops cleanly generated.

This feature is currently considered experimental, and using it to do
anything interesting is difficult.  Many necessary supporting facilities,
such as the lexer and the pad system, can only be accessed through
unsupported internal interfaces.  It is intended that the Perl 5.13
development cycle will see the addition of clean, supported interfaces
for many of these functions.  In Perl 5.12 most uses of pluggable keywords
will be via L<Devel::Declare>.

See L<perlapi/PL_keyword_plugin> for the mechanism.  The Perl core source
distribution also includes a new module L<XS::APItest::KeywordRPN>, which
implements reverse Polish notation arithmetic via pluggable keywords.
This module is mainly used for test purposes, and is not normally
installed, but also serves as an example of how to use the new mechanism.

=head2 Overridable function lookup

Where an extension module hooks the creation of rv2cv ops, to modify
the subroutine lookup process, this now works correctly for bareword
subroutine calls.  This means that prototypes on subroutines referenced
this way will be processed correctly.  (Previously bareword subroutine
names were initially looked up, for parsing purposes, by an unhookable
mechanism, so extensions could only properly influence subroutine names
that appeared with an C<&> sigil.)

=head1 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here, in a list ordered by distribution name. Minimally it should be the
module version, but it's more useful to the end user to give a paragraph's
summary of the module's changes. In an ideal world, dual-life modules would
have a F<Changes> file that could be cribbed.

=head2 New Modules and Pragmata

=over 4

=item C<XXX>

XXX

=back

=head2 Pragmata Changes

=over 4

=item C<XXX>

XXX

=back

=head2 Updated Modules

=over 4

=item C<XXX>

XXX

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go
here. Most of these are built within the directories F<utils> and F<x2p>.

=over 4

=item F<XXX>

XXX

=back

=head1 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=over 4

=item L<XXX>

XXX

=back

=head1 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
Any changes to F<pod/perldiag.pod> should go in L</New or Changed Diagnostics>.


=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

=over 4

=item *

XXX

=back

=head1 Installation and Configuration Improvements

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.

=head2 Configuration improvements

XXX

=head2 Compilation improvements

XXX

=head2 Platform Specific Changes

=over 4

=item XXX-some-platform

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

=over 4

=item *

XXX

=back

=head1 New or Changed Diagnostics

XXX New or changed warnings emitted by the core's C<C> code go here.

=over 4

=item C<XXX>

XXX

=back

=head1 Changed Internals

=over 4

=item *

C<Perl_pmflag> has been removed from the public API. Calling it now generates
a deprecation warning, and it will be removed in a future release. Although
listed as part of the API, it was never documented, and only ever used in
F<toke.c>, and prior to 5.10, F<regcomp.c>. In core, it has been replaced by a
static function.

=back

=head1 New Tests

XXX Changes which create B<new> files in F<t/> go here. Changes to
existing files in F<t/> aren't worth summarising, although the bugs that
they represent may be.

=over 4

=item F<XXX>

XXX

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

This is a list of some significant unfixed bugs, which are regressions
from either 5.10.1 or 5.11.1.

=over 4

=item *

XXX

=back

=head1 Deprecations

XXX Add any new known deprecations here.

The following items are now deprecated.

=over 4

=item *

XXX

=back

=head1 Platform Specific Notes

XXX Any changes specific to a particular platform. VMS and Win32 are the usual
stars here. It's probably best to group changes under the same section layout
as the main perldelta

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX The list of people to thank goes here.


=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
