=encoding utf8

=for comment
This has been completed up to b38b314 except for:
b3dbdd48ca2da90bce7f16d545cca54c3dc58f35 (Leon Timmermans)
816005240f1a3b9989c940e630e829048597537c (Craig Berry)
44caa20c7d9248fd77483468d77c9b5835e7066e (Craig Berry)
4581ada393ba58f2b8f438c7b9c336d6c79ec94c (Craig Berry)
3b28d668e9efe9433c3099521167a6723cbddc26 (Craig Berry)
82e24582a585cdcc94ac54b3e77a325e7aa89846 (Jan Dubois)
and any bugs that Karl Williamson has fixed.

=head1 NAME

[ this is a template for a new perldelta file. Any text flagged as
XXX needs to be processed before release. ]

perldelta - what is new for perl v5.13.11

=head1 DESCRIPTION

This document describes differences between the 5.13.10 release and
the 5.13.11 release.

If you are upgrading from an earlier release such as 5.13.9, first read
L<perl5139delta>, which describes differences between 5.13.9 and
5.13.10.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head2 User-defined regular expression properties

Perl no longer allows a tainted regular expression to invoke a user-defined
property via C<\p{...}> syntax. It simply dies instead [perl #82616].

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX. If any
    exist, they are bugs and reports are welcome.

[ List each incompatible change as a =head2 entry ]

=head2 Passing references to warn()

An earlier Perl 5.13.x release changed C<warn($ref)> to leave the reference
unchanged, allowing C<$SIG{__WARN__}> handlers to access the original
reference. But this stopped warnings that were references from having the
file and line number appended even when there was no C<$SIG{__WARN__}>
handler in place.

Now C<warn> checks for the presence of such a handler and, if there is
none, proceeds to stringify the reference and append the file and line
number. This allows simple uses of C<warn> for debugging to continue to
work as they did before.

=head2 fork() emulation will not wait for signalled children

On Windows parent processes would not terminate until all forked
childred had terminated first.  However, C<kill('KILL', ...)> is
inherently unstable on pseudo-processes, and C<kill('TERM', ...)>
might not get delivered if the child if blocked in a system call.

To avoid the deadlock and still provide a safe mechanism to terminate
the hosting process, Perl will now no longer wait for children that
have been sent a SIGTERM signal.  It is up to the parent process to
waitpid() for these children if child clean-up processing must be
allowed to finish. However, it is also the responsibility of the
parent then to avoid the deadlock by making sure the child process
can't be blocked on I/O either.

See L<perlfork> for more information about the fork() emulation on
Windows.

=head2 Perl source code is read in text mode on Windows

Perl scripts used to be read in binary mode on Windows for the benefit
of the ByteLoader module (which is no longer part of core Perl).  This
had the side effect of breaking various operations on the DATA filehandle,
including seek()/tell(), and even simply reading from DATA after file handles
have been flushed by a call to system(), backticks, fork() etc.

The default build options for Windows have been changed to read Perl source
code on Windows in text mode now.  Hopefully ByteLoader will be updated on
CPAN to automatically handle this situation.

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.
In particular, deprecated modules should be listed here even if they are
listed as an updated module in the L</Modules and Pragmata> section.

[ List each deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

An earlier optimisation to speed up C<my @array = ...> and
C<my %hash = ...> assignments caused a bug and was disabled in Perl 5.12.0.

Now we have found another way to speed up these assignments [perl #82110].

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>, which prints stub
entries to STDOUT.  Results can be pasted in place of the '=head2' entries
below.  A paragraph summary for important changes should then be added by hand.
In an ideal world, dual-life modules would have a F<Changes> file that could be
cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

C<base> has been upgraded from version 2.15 to 2.16.

=item *

C<CPAN> has been upgraded from version 1.94_65 to 1.9600.

=item *

C<CPANPLUS> has been upgraded from version 0.9101 to 0.9102

=item *

C<CPANPLUS::Dist::Build> has been upgraded from version 0.52 to 0.54

=item *

C<Cwd> has been downgraded from version 3.37 to 3.36.

An optimisation that recent core changes have rendered unnecessary has been
reverted.

=item *

C<Devel::DProf> has been upgraded from version 20110225.01 to 20110228.00.

=item *

C<Digest::SHA> has been upgraded from version 5.50 to 5.61

New SHA-512/224 and SHA-512/256 transforms ref. NIST Draft FIPS 180-4 (February 2011)

=item *

C<ExtUtils::Command> has been upgraded from version 1.16 to 1.17.

=item *

C<File::Copy> has been downgraded from version 2.22 to 2.21.

An optimisation that recent core changes have rendered unnecessary has been
reverted.

=item *

C<IO> has been upgraded from version 1.25_03 to 1.25_04.

=item *

C<JSON::PP> has been upgraded from version 2.27103 to 2.27105

=item *

C<Locale::Codes> has been upgraded from version 3.15 to 3.16

=item *

C<Math::BigInt> has been upgraded from version 1.992 to 1.994

=item *

C<Math::BigInt::FastCalc> has been upgraded from version 0.24_02 to 0.28

=item *

C<Module::Build> has been upgraded from version 0.37_05 to 0.3800

=item

C<Module::CoreList> has been upgraded from version 2.45 to 2.46.

=item *

C<parent> has been upgraded from version 0.224 to 0.225

=item *

C<Pod::Simple> has been upgraded from version 3.15 to 3.16

=item *

C<Storable> has been upgraded from version 2.26 to 2.27.

=item *

C<Test::Harness> has been upgraded from version 3.22 to 3.23

=item *

C<Test::Simple> has been upgraded from version 0.97_01 to 0.98

=item *

C<Tie::Hash::NamedCapture> has been upgraded from version 0.07 to 0.08.

Some of the Perl code has been converted to XS for efficency's sake.

=item *

C<Tie::RefHash> has been upgraded from version 1.38 to 1.39.

=item *

C<Unicode::Collate> has been upgraded from version 0.72 to 0.73

DUCET has been updated for Unicode 6.0.0 as Collate/allkeys.txt and
the default UCA_Version is 22.

=item *

C<Unicode::UCD> has been upgraded from version 0.31 to 0.32.
This includes a number of bug fixes:

=over 4

=item charinfo()

=over 4

=item *

It is now updated to Unicode Version 6 with Corrigendum #8, except,
as with Perl 5.14, the code point at U+1F514 has no name.

=item *

The Hangul syllable code points have the correct names, and their
decompositions are always output without requiring L<Lingua::KO::Hangul::Util>
to be installed.

=item *

The CJK (Chinese-Japanese-Korean) code points U+2A700 - U+2B734
and U+2B740 - 2B81D are now properly handled.

=item *

The numeric values are now output for those CJK code points that have them.

=item *

The names that are output for code points with multiple aliases are now the
corrected ones.

=back

=item charscript()

This now correctly returns "Unknown" instead of C<undef> for the script
of a code point that hasn't been assigned another one.

=item charblock()

This now correctly returns "No_Block" instead of C<undef> for the block
of a code point that hasn't been assigned to another one.

=back

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here. Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

[ Within each section, list entries as a =item entry ]

=head2 New Diagnostics

XXX Newly added diagnostic messages go here

=over 4

=item *

Regexp modifier "/%c" may not appear twice

(F syntax) The regular expression pattern had one of the mutually exclusive
modifiers repeated.  Remove all but one of the occurrences.

=item *

Regexp modifiers "/%c" and "/%c" are mutually exclusive

(F syntax) The regular expression pattern had more than one of the mutually
exclusive modifiers.  Retain only the modifier that is supposed to be there.

=item *

Insecure user-defined property %s

(F) Perl detected tainted data when trying to compile a regular
expression that contains a call to a user-defined character property
function, i.e. C<\p{IsFoo}> or C<\p{InFoo}>.
See L<perlunicode/User-Defined Character Properties> and L<perlsec>.

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go
here. Most of these are built within the directories F<utils> and F<x2p>.

[ List utility changes as a =head3 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head3 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarising, although the bugs
that they represent may be covered elsewhere.

Many of the tests have been refactored to use testing libraries more
consistently. In some cases test files were created or deleted:

=over 4

=item *

The tests for C<split /\s/> and Unicode have been moved from
F<t/op/split.t> to the new F<t/op/split_unicode.t>.

=item *

F<t/re/re.t> has been moved to F<ext/re/t/re_funcs_u.t>.

=item *

The tests for [perl #72922] have been moved from F<t/re/qr.t> to the new
F<t/re/qr-72922.t>.

=item *

F<t/re/reg_unsafe.t> has been deleted and its only test moved to
F<t/re/pat_advanced.t>.

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms. This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.
Other significant internal changes for future core maintainers should
be noted as well.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

=over 4

=item *

A fix for a bug in C<length(undef)> in 5.13.4 introduced a regression that
meant C<print length undef> did not warn when warnings were enabled. It now
correctly warns [perl #85508].

=item *

The C<(?|...)> regular expression construct no longer crashes if the final
branch has more sets of capturing parentheses than any other branch. This
was fixed in Perl 5.10.1 for the case of a single branch, but that fix did
not take multiple branches into account [perl #84746].

=item *

Accessing an element of a package array with a hard-coded number (as
opposed to an arbitrary expression) would crash if the array did not exist.
Usually the array would be autovivified during compilation, but typeglob
manipulation could remove it, as in these two cases which used to crash:

  *d = *a;  print $d[0];
  undef *d; print $d[0];

=item *

C<#line> directives in string evals were not properly updating the arrays
of lines of code (C<< @{"_<..."} >>) that the debugger (or any debugging or
profiling module) uses. In threaded builds, they were not being updated at
all. In non-threaded builds, the line number was ignored, so any change to
the existing line number would cause the lines to be misnumbered
[perl #79442].

=item *

C<$AUTOLOAD> used to remain tainted forever if it ever became tainted. Now
it is correctly untainted if an autoloaded method is called and the method
name was not tainted.

=item *

A bug has been fixed in the implementation of C<{...}> quantifiers in
regular expressions that prevented the code block in
C</((\w+)(?{ print $2 })){2}/> from seeing the C<$2> sometimes
[perl #84294].

=item *

C<sprintf> now dies when passed a tainted scalar for the format. It did
already die for arbitrary expressions, but not for simple scalars
[perl #82250].

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

This is a list of some significant unfixed bugs, which are regressions
from either 5.XXX.XXX or 5.XXX.XXX.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX The list of people to thank goes here.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
