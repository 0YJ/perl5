=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.21.8

=head1 DESCRIPTION

This document describes differences between the 5.21.7 release and the 5.21.8
release.

If you are upgrading from an earlier release such as 5.21.6, first read
L<perl5217delta>, which describes differences between 5.21.6 and 5.21.7.

=head1 Notice

With this release we are now in the contentious changes portion of the code
freeze as we prepare for the next stable release of Perl 5.

=head1 Core Enhancements

=head2 The warnings pragma now supports warnings outside of "all"

Ever since perl v5.6.0 we've had no way of adding new warnings without
retroactively adding them to all existing programs that used C<-w>,
C<-W> or C<use warnings>.

This caused us to not add new useful warnings out of fear that they
might unduly burden users who just wanted to upgrade perl and didn't
want to deal with a bunch of warnings from their existing code.

We now support a way to have our cake and eat it too, and can add new
warnings to the core going forward through other top-level warning
categories. See L<the warnings documentation|warnings/Top-level
warning categories & associated confusion> for details.

=head2 Non-Capturing Regular Expression Flag

Regular expressions now support a C</n> flag that disables capturing
and filling in C<$1>, C<$2>, etc... inside of groups:

  "hello" =~ /(hi|hello)/n; # $1 is not set

This is equivalent to putting C<?:> at the beginning of every capturing group.

See L<perlre/"n"> for more information.

=head2 C<prototype> with no arguments

C<prototype()> with no arguments now infers C<$_>.  [perl #123514]

=head2 C<use re 'strict'>

This applies stricter syntax rules to regular expression patterns
compiled within its scope, which hopefully will alert you to typos and
other unintentional behavior that backwards-compatibility issues prevent
us from doing in normal regular expression compilations.  Because the
behavior of this is subject to change in future Perl releases as we gain
experience, using this pragma will raise a category
C<experimental:re_strict> warning.
See L<'strict' in re|re/'strict' mode>.

=head2 New "const" subroutine attribute

The "const" attribute can be applied to an anonymous subroutine.  It causes
it to be executed immediately when it is cloned.  Its value is captured and
used to create a new constant subroutine that is returned.  This feature is
experimental.  See L<perlsub/Constant Functions>.

=head1 Incompatible Changes

=head2 sub signatures moved before attributes

The experimental sub signatures feature, as introduced in 5.20, parsed
signatures after attributes.  In this release, the positioning has been
moved such that signatures occur in exactly the same positioning a
prototype would be found.

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<XXX> has been upgraded from version A.xx to B.yy.

=item *

L<attributes> has been upgraded from version 0.24 to 0.25.

Minor internal change only.

=item *

L<B> has been upgraded from version 1.54 to 1.55.

A bug where, after an ithread creation or psuedofork, special/immortal SVs in
the child ithread/psuedoprocess did not have the correct class of
C<B::SPECIAL>, has been fixed.

The C<id> and C<outid> PADLIST methods have been added.

=item *

L<B::Deparse> has been upgraded from version 1.31 to 1.32.

Deparsing C<BEGIN { undef &foo }> with the B<-w> switch enabled started to
emit 'uninitialized' warnings in Perl 5.14.  This has been fixed.

Deparsing calls to subs with a C<(;+)> prototype resulted in an infinite
loop.  The C<(;$>) C<(_)> and C<(;_)> prototypes were given the wrong
precedence, causing C<foo($a<$b)> to be deparsed without the parentheses.

=item *

L<File::Glob> has been upgraded from version 1.23 to 1.24.

Avoid SvIV() expanding to call get_sv() three times in a few
places. [perl #123606]

=item *

L<Module::Metadata> has been upgraded from version 1.000025 to 1.000026.

=item *

L<Safe> has been upgraded from version 2.38 to 2.39.

C<reval> was not propagating void context properly.

=item *

L<SDBM_File> has been upgraded from version 1.12 to 1.13.

Simplified the build process.  [perl #123413]

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

=head2 New Documentation

=head3 L<perlunicook>

This document, by Tom Christiansen, provides examples of handling Unicode in 
Perl.

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Bad symbol for scalar|perldiag/"Bad symbol for scalar">

(P) An internal request asked to add a scalar entry to something that
wasn't a symbol table entry.

=item *

L<:const is not permitted on named subroutines|perldiag/":const is not permitted on named subroutines">

(F) The "const" attribute causes an anonymous subroutine to be run and
its value captured at the time that it is cloned.  Names subroutines are
not cloned like this, so the attribute does not make sense on them.

=back

=head3 New Warnings

=over 4

=item *

L<:const is experimental|perldiag/":const is experimental">

(S experimental::const_attr) The "const" attribute is experimental.
If you want to use the feature, disable the warning with C<no warnings
'experimental::const_attr'>, but know that in doing so you are taking
the risk that your code may break in a future Perl version.

=item *

L<Non-finite repeat count does nothing|perldiag/"Non-finite repeat count does nothing">

(W numeric) You tried to execute the
L<C<x>|perlop/Multiplicative Operators> repetition operator C<Inf> (or
C<-Inf>) or C<NaN> times, which doesn't make sense.

=item *

L<Useless use of attribute "const"|perldiag/Useless use of attribute "const">

(W misc) The "const" attribute has no effect except
on anonymous closure prototypes.  You applied it to
a subroutine via L<attributes.pm|attributes>.  This is only useful
inside an attribute handler for an anonymous subroutine.

=item *

L<Unusual use of %s in void context|perldiag/"Unusual use of %s in void context">

(W void_unusual) Similar to the "Useless use of %s in void context"
warning, but only turned on by the top-level "pedantic" warning
category, used for e.g. C<grep> in void context, which may indicate a
bug, but could also just be someone using C<grep> for its side-effects
as a loop.

Enabled as part of "extra" warnings, not in the "all" category. See
L<warnings> for details

=item *

L<E<quot>use re 'strict'E<quot> is experimental|perldiag/"use re 'strict'" is experimental>

(S experimental::re_strict) The things that are different when a regular
expression pattern is compiled under C<'strict'> are subject to change
in future Perl releases in incompatible ways.  This means that a pattern
that compiles today may not in a future Perl release.  This warning is
to alert you to that risk.

L<Wide character (U+%X) in %s|perldiag/"Wide character (U+%X) in %s">

(W locale) While in a single-byte locale (I<i.e.>, a non-UTF-8
one), a multi-byte character was encountered.   Perl considers this
character to be the specified Unicode code point.  Combining non-UTF8
locales and Unicode is dangerous.  Almost certainly some characters
will have two different representations.  For example, in the ISO 8859-7
(Greek) locale, the code point 0xC3 represents a Capital Gamma.  But so
also does 0x393.  This will make string comparisons unreliable.

You likely need to figure out how this multi-byte character got mixed up
with your single-byte locale (or perhaps you thought you had a UTF-8
locale, but Perl disagrees).

=item *

L<Both or neither range ends should be Unicode in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Both or neither range ends should be Unicode in regex; marked by <-- HERE in m/%s/">

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

In a bracketed character class in a regular expression pattern, you
had a range which has exactly one end of it specified using C<\N{}>, and
the other end is specified using a non-portable mechanism.  Perl treats
the range as a Unicode range, that is, all the characters in it are
considered to be the Unicode characters, and which may be different code
points on some platforms Perl runs on.  For example, C<[\N{U+06}-\x08]>
is treated as if you had instead said C<[\N{U+06}-\N{U+08}]>, that is it
matches the characters whose code points in Unicode are 6, 7, and 8.
But that C<\x08> might indicate that you meant something different, so
the warning gets raised.

=item *

L<Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by <-- HERE in mE<sol>%sE<sol>">

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

Stricter rules help to find typos and other errors.  Perhaps you didn't
even intend a range here, if the C<"-"> was meant to be some other
character, or should have been escaped (like C<"\-">).  If you did
intend a range, the one that was used is not portable between ASCII and
EBCDIC platforms, and doesn't have an obvious meaning to a casual
reader.

 [3-7]    # OK; Obvious and portable
 [d-g]    # OK; Obvious and portable
 [A-Y]    # OK; Obvious and portable
 [A-z]    # WRONG; Not portable; not clear what is meant
 [a-Z]    # WRONG; Not portable; not clear what is meant
 [%-.]    # WRONG; Not portable; not clear what is meant
 [\x41-Z] # WRONG; Not portable; not obvious to non-geek

(You can force portablity by specifying a Unicode range, which means that
the endpoints are specified by
L<C<\N{...}>|perlrecharclass/Character Ranges>, but the meaning may
still not be obvious.)
The stricter rules require that ranges that start or stop with an ASCII
character that is not a control have all their endpoints be the literal
character, and not some escape sequence (like C<"\x41">), and the ranges
must be all digits, or all uppercase letters, or all lowercase letters.

=item *

L<Ranges of digits should be from the same group in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Ranges of digits should be from the same group in regex; marked by <-- HERE in m/%s/">

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

Stricter rules help to find typos and other errors.  You included a
range, and at least one of the end points is a decimal digit.  Under the
stricter rules, when this happens, both end points should be digits in
the same group of 10 consecutive digits.

=item *

L<"%s" is more clearly written simply as "%s" in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"%s" is more clearly written simply as "%s" in regex; marked by <-- HERE in mE<sol>%sE<sol>>

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

You specified a character that has the given plainer way of writing it,
and which is also portable to platforms running with different character
sets.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

The message
L<Locale '%s' may not work well.%s|perldiag/"Locale '%s' may not work well.%s">
is no longer raised unless the problemtatic locale is actually used in
the Perl program.  Previously it was raised if it merely was the
underlying locale.  All Perl programs have an underlying locale at all
times, but something like a C<S<use locale>> is needed for that locale
to actually have some effect.  This message will not be raised when
the underlying locale is hidden.

=back

=head1 Configuration and Compilation

=over 4

=item *

pthreads and lcl will be linked by default if present. This allows XS modules 
that require threading to work on non-threaded perls. Note that you must still 
pass C<-Dusethreads> if you want a threaded perl.

=back

=head1 Testing

=over 4

=item *

A new test script, F<bigmem/subst.t>, has been added to test memory usage of
subst on very large strings.

=item *

A new test script, F<op/anonconst.t>, has been added to test experimental
:const subroutines.

=item *

A new test script, F<re/reg_nocapture.t>, has been added to test the new
C</n> regexp flag.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Win32

=over 4

=item *

Previously, on Visual C++ for Win64 built Perls only, when compiling every Perl
XS module (including CPAN ones) and Perl aware .c file with a 64 bit Visual C++,
would uncondtionally have around a dozen warnings from hv_func.h.  These
warnings have been silenced.  GCC all bitness and Visual C++ for Win32 were
not affected.

=item *

Support for building without PerlIO has been removed from the Windows
makefiles.  Non-PerlIO builds were all but deprecated in Perl 5.18.0 and are
already not supported by F<Configure> on POSIX systems.

=item *

Between 2 and 6 ms and 7 I/O calls have been saved per attempt to open a perl
module for each path in C<@INC>.

=back

=back

=head1 Internal Changes

=over 4

=item *

Added Perl_sv_get_backrefs() to determine if an SV is a weak-referent.

Function either returns an SV * of type AV, which contains the set of
weakreferences which reference the passed in SV, or a simple RV * which
is the only weakref to this item.

=back

=head1 Selected Bug Fixes

=over 4

=item *

A bug in regular expression patterns that could lead to segfaults and
other crashes has been fixed.  This occurred only in patterns compiled
with C<"/i">, while taking into account the current POSIX locale (this usually
means they have to be compiled within the scope of C<S<"use locale">>),
and there must be a string of at least 128 consecutive bytes to match.
[perl #123539]

=item *

C<s///> now works on very long strings instead of dying with 'Substitution
loop'.  [perl #103260] [perl #123071]

=item *

C<gmtime> no longer crashes with not-a-number values.  [perl #123495]

=item *

C<\()> (reference to an empty list) and C<y///> with lexical $_ in scope
could do a bad write past the end of the stack.  They have been fixed
to extend the stack first.

=item *

C<prototype()> with no arguments used to read the previous item on the
stack, so C<print "foo", prototype()> would print foo's prototype.  It has
been fixed to infer $_ instead.  [perl #123514]

=item *

Some cases of lexical state subs inside predeclared subs could crash but no
longer do.

=item *

Some cases of nested lexical state subs inside anonymous subs could cause
'Bizarre copy' errors or possibly even crash.

=item *

When trying to emit warnings, perl's default debugger (F<perl5db.pl>) was
sometimes giving 'Undefined subroutine &DB::db_warn called' instead.  This
bug, which started to occur in Perl 5.18, has been fixed.  [perl #123553]

=item *

Certain syntax errors in substitutions, such as C<< s/${<>{})// >>, would
crash, and had done so since Perl 5.10.  (In some cases the crash did not
start happening till 5.16.)  The crash has, of course, been fixed.
[perl #123542]

=item *

A repeat expression like C<33 x ~3> could cause a large buffer
overflow since the new output buffer size was not correctly handled by
SvGROW().  An expression like this now properly produces a memory wrap
panic.  [perl 123554]

=item *

C<< formline("@...", "a"); >> would crash.  The C<FF_CHECKNL> case in
pp_formline() didn't set the pointer used to mark the chop position,
which led to the C<FF_MORE> case crashing with a segmentation fault.
This has been fixed.  [perl #123538]

=back

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.21.7..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
