=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.23.2

=head1 DESCRIPTION

This document describes differences between the 5.23.1 release and the 5.23.2
release.

If you are upgrading from an earlier release such as 5.23.0, first read
L<perl5231delta>, which describes differences between 5.23.0 and 5.23.1.

=head1 Incompatible Changes

=head2 Nested declarations are now disallowed

A C<my>, C<our>, or C<state> declaration is no longer allowed inside
of another C<my>, C<our>, or C<state> declaration.

For example, these are now fatal:

   my ($x, my($y));
   our (my $x);

L<[perl #125587]|https://rt.perl.org/Ticket/Display.html?id=125587>

L<[perl #121058]|https://rt.perl.org/Ticket/Display.html?id=121058>

=head1 Deprecations

=head2 sysread(), syswrite(), recv() and send() are deprecated on
:utf8 handles

The sysread(), recv(), syswrite() and send() operators
are deprecated on handles that have the C<:utf8> layer, either
explicitly, or implicitly, eg., with the C<:encoding(UTF-16LE)> layer.

Both sysread() and recv() currently use only the C<:utf8> flag for the
stream, ignoring the actual layers.  Since sysread() and recv() do no
UTF-8 validation they can end up creating invalidly encoded scalars.

Similarly, syswrite() and send() use only the C<:utf8> flag, otherwise
ignoring any layers.  If the flag is set, both write the value UTF-8
encoded, even if the layer is some different encoding, such as the
example above.

Ideally, all of these operators would completely ignore the C<:utf8>
state, working only with bytes, but this would result in silently
breaking existing code.  To avoid this a future version of perl will
throw an exception when any of sysread(), recv(), syswrite() or send()
are called on handle with the C<:utf8> layer.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

=over 4

=item *

Creating Perl debugger data structures (see L<perldebguts/"Debugger Internals">)
for XSUBs and const subs has been removed.  This removed one glob/scalar combo
for each unique C<.c> file that XSUBs and const subs came from.  On startup
(C<perl -e"0">) about half a dozen glob/scalar debugger combos were created.
Loading XS modules created more glob/scalar combos.  These things were created
regardless if the perl debugger was being used or not, unlike for pure perl
subs, and ignores that the perl debugger can not debug C code.

=item *

Single arguments in list assign are now slightly faster:

  ($x) = (...);
  (...) = ($x);

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Hash::Util>'s C<unlock_hashref_recurse> and C<unlock_hash_recurse>
didn't actually unlock parts of the data structures...

...now they do.

=item *

L<Encode> has been upgraded from version 2.75 to 2.76.

=item *

L<Filter::Util::Call> has been upgraded from version 1.54 to 1.55.

=item *

The PathTools module collection has been upgraded from version 3.55 to
3.56.

Minor optimizations.
L<[perl #125712]|https://rt.perl.org/Ticket/Display.html?id=125712>

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perlpolicy>

=over 4

=item *

This note has been added to perlpolicy:

  While civility is required, kindness is encouraged; if you have any doubt
  about whether you are being civil, simply ask yourself, "Am I being kind?"
  and aspire to that.

=back

=head3 L<perlvar>

=over 4

=item *

Use of C<$OLD_PERL_VERSION> is now discouraged.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Can't redeclare "%s" in "%s"|perldiag/"Can't redeclare "%s" in "%s"">

(F) A "my", "our" or "state" declaration was found within another declaration,
such as C<my ($x, my($y), $z)> or C<our (my $x)>.

=back

=head3 New Warnings

=over 4

=item *

L<%s() is deprecated on :utf8 handles|perldiag/"%s() is deprecated on :utf8 handles">

(W deprecated) The sysread(), recv(), syswrite() and send() operators
are deprecated on handles that have the C<:utf8> layer, either
explicitly, or implicitly, eg., with the C<:encoding(UTF-16LE)> layer.

Both sysread() and recv() currently use only the C<:utf8> flag for the
stream, ignoring the actual layers.  Since sysread() and recv() do no
UTF-8 validation they can end up creating invalidly encoded scalars.

Similarly, syswrite() and send() use only the C<:utf8> flag, otherwise
ignoring any layers.  If the flag is set, both write the value UTF-8
encoded, even if the layer is some different encoding, such as the
example above.

Ideally, all of these operators would completely ignore the C<:utf8>
state, working only with bytes, but this would result in silently
breaking existing code.  To avoid this a future version of perl will
throw an exception when any of sysread(), recv(), syswrite() or send()
are called on handle with the C<:utf8> layer.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

The diagnostic C<< Hexadecimal float: internal error >> has been changed to
C<< Hexadecimal float: internal error (%s) >> to include more information.

=back

=head1 Configuration and Compilation

=over 4

=item *

F<Configure> should handle spaces in paths a little better.

=back

=head1 Testing

=over 4

=item *

A new test (F<t/op/aassign.t>) has been added to test the list assignment operator
C<OP_AASSIGN>.

=back

=head1 Internal Changes

=over 4

=item *

C<PL_sawalias> and C<GPf_ALIASED_SV> have been removed.

=item *

C<GvASSIGN_GENERATION> and C<GvASSIGN_GENERATION_set> have been removed.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Perl can again be compiled with any Unicode version.  This used to
(mostly) work, but was lost in v5.18 through v5.20.  The property
C<Name_Alias> did not exist prior to Unicode 5.0.  L<Unicode::UCD>
incorrectly said it did.  This has been fixed.

=item *

Very large code-points (beyond Unicode) in regular expressions no
longer cause a buffer overflow in some cases when converted to UTF-8.
L<[perl #125826]|https://rt.perl.org/Ticket/Display.html?id=125826>

=item *

The integer overflow check for the range operator (...) in list
context now correctly handles the case where the size of the range is
larger than the address space.  This could happen on 32-bits with
-Duse64bitint.
L<[perl #125781]|https://rt.perl.org/Ticket/Display.html?id=125781>

=item *

A crash with C<< %::=(); J->${\"::"} >> has been fixed.
L<[perl #125541]|https://rt.perl.org/Ticket/Display.html?id=125541>

=back

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.23.1..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
