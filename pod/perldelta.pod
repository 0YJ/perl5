=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.33.5

=head1 DESCRIPTION

This document describes differences between the 5.33.4 release and the 5.33.5
release.

If you are upgrading from an earlier release such as 5.33.3, first read
L<perl5334delta>, which describes differences between 5.33.3 and 5.33.4.

=head1 Core Enhancements

=head2 New octal syntax C<0oI<ddddd>>

It is now possible to specify octal literals with C<0o> prefixes,
as in C<0o123_456>, parallel to the existing construct to specify
hexadecimal literal C<0xI<ddddd>> and binary literal C<0bI<ddddd>>.
Also, the builtin C<oct()> function now accepts this new syntax.

See L<perldata/Scalar value constructors> and L<perlfunc/oct EXPR>.

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

The list of new and updated modules is modified automatically as part of
preparing a Perl release, so the only reason to manually add entries here is if
you're summarising the important changes in the module update. (Also, if the
manually-added details don't match the automatically-generated ones, the
release manager will have to investigate the situation carefully.)

[ Within each section, list entries as an =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX Remove this section if not applicable.

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<XXX> has been upgraded from version A.xx to B.yy.

If there was something important to note about this change, include that here.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

=head2 New Documentation

=head3 L<perldocstyle> has been added to F<pod/>.

This document is a guide for the authorship and maintenance of the
documentation that ships with Perl.

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, open an issue
at L<https://github.com/Perl/perl5/issues>.

Additionally, the following selected changes have been made:

=head3 L<perlfunc>

=over 4

=item *

L<msgsnd()|perlfunc/msgsnd> documented a length field included in the
packed C<MSG> parameter to msgsnd(), but there was no such field.
C<MSG> contains only the type and the message content.

=back

=head1 Testing

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

=over 4

=item *

When testing in parallel on many-core platforms, you can now cause the
test suite to finish somewhat earlier, but with less logical ordering of
the tests, by setting

 PERL_TEST_HARNESS_ASAP=1

while running the test suite.

=back

=head2 Platform-Specific Notes

=over 4

=item Windows

Windows now supports L<symlink()|perlfunc/symlink> and
L<readlink()|perlfunc/readlink>, and L<lstat()|perlfunc/lstat> is no
longer an alias for L<stat()|perlfunc/stat>.
L<[#18005]|https://github.com/Perl/perl5/issues/18005>.

Unlike POSIX systems, creating a symbolic link on Windows requires
either elevated privileges or Windows 10 1703 or later with Developer
Mode enabled.

stat(), including C<stat FILEHANDLE>, and lstat() now uses our own
implementation that populates the device C<dev> and inode numbers
C<ino> returned rather than always returning zero.  The number of
links C<nlink> field is now always populated.

L<< C<${^WIN32_SLOPPY_STAT}> |perlvar/${^WIN32_SLOPPY_STAT} >> previously
controlled whether the C<nlink> field was populated requiring a
separate Windows API call to fetch, since nlink and the other
information required for stat() is now retrieved in a single API call.

The C<-r> and C<-w> operators now return true for the C<STDIN>,
C<STDOUT> and C<STDERR> handles.  Unfortunately it still won't return
true for duplicates of those handles.
L<[#8502]|https://github.com/Perl/perl5/issues/8502>.

The times returned by stat() and lstat() are no longer incorrect
across Daylight Savings Time adjustments.
L<[#6080]|https://github.com/Perl/perl5/issues/6080>.

C<-x> on a filehandle should now match C<-x> on the corresponding
filename on Vista or later.
L<[#4145]|https://github.com/Perl/perl5/issues/4145>.

C<-e '"'> no longer incorrectly returns true.
L<[#12431]|https://github.com/Perl/perl5/issues/12431>.

=back

=head1 Internal Changes

=over 4

=item *

All C<SvTRUE>-ish functions now evaluate their arguments exactly once.
In 5.32, plain L<perlapi/C<SvTRUE>> was changed to do that; now the rest
do as well.

=item *

Unicode is now a first class citizen when considering the pattern /A*B/ where
A and B are arbitrary.  The pattern matching code tries to make a tight loop
to match the span of A's.  The logic of this was now really updated with
support for UTF-8.

=back

=head1 Selected Bug Fixes

=over 4

=item *

L<semctl()|perlfunc/semctl>, L<msgctl()|perlfunc/msgctl>, and
L<shmctl()|perlfunc/shmctl> now properly reset the UTF-8 flag on the
C<ARG> parameter if it's modified for C<IPC_STAT> or C<GETALL>
operations.

=item *

semctl(), msgctl(), and shmctl() now attempt to downgrade the C<ARG>
parameter if it's value is being used as input to C<IPC_SET> or
C<SETALL> calls.  A failed downgrade will thrown an exception.

=item *

In cases where semctl(), msgctl() or shmctl() would treat the C<ARG>
parameter as a pointer, an undefined value no longer generates a
warning.  In most such calls the pointer isn't used anyway and this
allows you to supply C<undef> for a value not used by the underlying
function.

=item *

L<semop()|perlfunc/semop> now downgrades the C<OPSTRING> parameter,
L<msgsnd()|perlfunc/msgsnd> now downgrades the C<MSG> parameter and
L<shmwrite|perlfunc/shmwrite> now downgrades the C<STRING> parameter
to treat them as bytes.  Previously they would be left upgraded,
providing a corrupted structure to the underlying function call.

=item *

L<msgrcv()|perlfunc/msgrcv> now properly resets the UTF-8 flag the
C<VAR> parameter when it is modified.  Previusly the UTF-8 flag could
be left on, resulting in a possibly corrupt result in C<VAR>.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

None

=head1 Acknowledgements

Perl 5.33.5 represents approximately 4 weeks of development since Perl
5.33.4 and contains approximately 22,000 lines of changes across 370 files
from 27 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 15,000 lines of changes to 220 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.33.5:

Branislav Zahradn√≠k, Chris 'BinGOs' Williams, Dan Book, Dan Kogai, David
Cantrell, David Mitchell, Graham Knop, H.Merijn Brand, Jae Bradley, James E
Keenan, Jason McIntosh, jkahrman, John Karr, Karen Etheridge, Karl
Williamson, Leon Timmermans, Max Maischein, Paul Evans, Sawyer X, Sevan
Janiyan, Shlomi Fish, Steve Hay, TAKAI Kousuke, Thibault Duponchelle, Tomasz
Konojacki, Tom Hukins, Tony Cook.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
