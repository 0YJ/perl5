=encoding utf8

=head1 NAME

[ this is a template for a new perldelta file.  Any text flagged as XXX needs
to be processed before release. ]

perldelta - what is new for perl v5.21.5

=head1 DESCRIPTION

This document describes differences between the 5.21.4 release and the 5.21.5
release.

If you are upgrading from an earlier release such as 5.21.3, first read
L<perl5214delta>, which describes differences between 5.21.3 and 5.21.4.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here.  Summarize user-visible core language
enhancements.  Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head2 New double-diamond operator

C<<< <<>>> >>> is like C<< <> >> but uses three-argument C<open> to open
each file in @ARGV.  So each element of @ARGV is an actual file name, and
"|foo" won't be treated as a pipe open.

=head2 Perl now supports POSIX 2008 locale currency additions.

On platforms that are able to handle POSIX.1-2008, the
hash returned by
L<C<POSIX::localeconv()>|perllocale/The localeconv function>
includes the international currency fields added by that version of the
POSIX standard.  These are
C<int_n_cs_precedes>,
C<int_n_sep_by_space>,
C<int_n_sign_posn>,
C<int_p_cs_precedes>,
C<int_p_sep_by_space>,
and
C<int_p_sign_posn>.

=head1 Security

=head2 Perl is now compiled with -fstack-protector-strong if available

Perl has been compiled with the anti-stack-smashing option
C<-fstack-protector> since 5.10.1.  Now Perl uses the newer variant
called C<-fstack-protector-strong>, if available.  (This was added
already in 5.21.4.)

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX
    If any exist, they are bugs, and we request that you submit a
    report.  See L</Reporting Bugs> below.

[ List each incompatible change as a =head2 entry ]

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

=head2 Use of multiple /x regexp modifiers

It is now deprecated to say something like any of the following:

    qr/foo/xx;
    /(?xax:foo)/;
    use re qw(/amxx);

That is, now C<x> should only occur once in any string of contiguous
regular expression pattern modifiers.  We do not believe there are any
occurrences of this in all of CPAN.  This is in preparation for a future
Perl release having C</xx> mean to allow white-space for readability in
bracketed character classes (those enclosed in square brackets:
C<[...]>).

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here.
There may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

C<length> is up to 20% faster for non-magical/non-tied scalars containing a
string if it is a non-utf8 string or if C<use bytes;> is in scope.

=item *

Non-magical/non-tied scalars that contain only a floating point value and are
on most Perl builds with 64 bit integers now use 8-32 less bytes of memory
depending on OS.

=item *

In C<@array = split>, the assigment can be optimised away with C<split>
writing directly to the array.  This optimisation was happening only for
package arrays other than @_ and only if the argument to split was an
explicit constant or scalar other than $_.  Now this optimisation happens
almost all the time.

=item *

C<join> is now subject to constant folding.  Moreover, C<join> with a
scalar or constant for the separator and a single-item list to join is
simplified to a stringification.  The separator doesn't even get evaluated.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<attributes> has been upgraded from version 0.23 to 0.24.

Avoid reading beyond the end of a buffer. [perl #122629]

=item *

L<B::Deparse> has been upgraded from version 1.28 to 1.29.

Parenthesised arrays in lists passed to C<\> are now correctly deparsed
with parentheses (e.g., C<\(@a, (@b), @c)> now retains the parentheses
around @b), this preserving the flattening behaviour of referenced
parenthesised arrays.  Formerly, it only worked for one array: C<\(@a)>.

C<local our> is now deparsed correctly, with the C<our> included.

C<for($foo; !$bar; $baz) {...}> was deparsed without the C<!> (or C<not>).
This has been fixed.

Core keywords that conflict with lexical subroutines are now deparsed with
the C<CORE::> prefix.

C<foreach state $x (...) {...}> now deparses correctly with C<state> and
not C<my>.

C<our @array = split(...)> now deparses correctly with C<our> in those
cases where the assignment is optimised away.

=item *

L<DynaLoader> has been upgraded from version 1.26 to 1.27.

Remove dl_nonlazy global if unused in Dynaloader. [perl #122926]

=item *

L<Fcntl> has been upgraded from version 1.12 to 1.13.

Add support for the Linux pipe buffer size fcntl() commands.

=item *

L<Module::CoreList> has been upgraded from version 5.20140920 to 5.20141020.

Updated to cover the latest releases of Perl.

=item *

L<XSLoader> has been upgraded from version 0.17 to 0.18.

Allow XSLoader to load modules from a different namespace.
[perl #122455]

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

Clarifications have been added to L<perlrecharclass/Character Ranges>
to the effect that Perl guarantees that C<[A-Z]>, C<[a-z]>, C<[0-9]> and
any subranges thereof in regular expression bracketed character classes
are guaranteed to match exactly what a naive English speaker would
expect them to match, even on platforms (such as EBCDIC) where special
handling is required to accomplish this.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

'"my" variable &foo::bar can't be in a package' has been reworded to say
'subroutine' instead of 'variable'.

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item EBCDIC

Special handling is required on EBCDIC platforms to get C<qr/[i-j]/> to
match only C<"i"> and C<"j">, since there are 7 characters between the
code points for C<"i"> and C<"j">.  This special handling had only been
invoked when both ends of the range are literals.  Now it is also
invoked if any of the C<\N{...}> forms for specifying a character by
name or Unicode code point is used instead of a literal.  See
L<perlrecharclass/Character Ranges>.

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.  Other
significant internal changes for future core maintainers should be noted as
well.

[ List each change as a =item entry ]

=over 4

=item *

SVs of type SVt_NV are now bodyless when a build configure and platform allow
it, specifically C<sizeof(NV) <= sizeof(IV)>. The bodyless trick is the same one
as for IVs since 5.9.2, but for NVs, unlike IVs, is not guarenteed on all
platforms and build configurations.

=item *

The C<$DB::single>, C<$DB::signal> and C<$DB::trace> now have set and
get magic that stores their values as IVs and those IVs are used when
testing their values in C<pp_dbstate>.  This prevents perl from
recursing infinity if an overloaded object is assigned to any of those
variables. [perl #122445]

=item *

C<Perl_tmps_grow> which is marked as public API but undocumented has been
removed from public API. If you use C<EXTEND_MORTAL> macro in your XS code to
preextend the mortal stack, you are unaffected by this change.

=item *

C<cv_name>, which was introduced in 5.21.4, has been changed incompatibly.
It now has a flags field that allows the caller to specify whether the name
should be fully qualified.  See L<perlapi/cv_name>.

=item *

Internally Perl no longer uses the C<SVs_PADMY> flag.  C<SvPADMY()> now
returns a true value for anything not marked PADTMP.  C<SVs_PADMY> is now
defined as 0.

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here.  Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

Locking and unlocking values via L<Hash::Util> or C<Internals::SvREADONLY>
no longer has any affect on values that are read-only to begin.  Unlocking
such values could result in crashes, hangs or other erratic behaviour.

=item *

The internal C<looks_like_number> function (which L<Scalar::Util> provides
access to) began erroneously to return true for "-e1" in 5.21.4, affecting
also C<-'-e1'>.  This has been fixed.

=item *

The flip-flop operator (C<..> in scalar context) would return the same
scalar each time, unles the containing subroutine was called recursively.
Now it always returns a new scalar.  [perl #122829]

=item *

Some unterminated C<(?(...)...)> constructs in regular expressions would
either crash or give erroneous error messages.  C</(?(1)/> is one such
example.

=item *

C<pack "w", $tied> no longer calls FETCH twice.

=item *

List assignments like C<($x, $z) = (1, $y)> now work correctly if $x and $y
have been aliased by C<foreach>.

=item *

Some patterns including code blocks with syntax errors, such as
C</ (?{(^{})/>, would hang or fail assertions on debugging builds.  Now
they produce errors.

=item *

An assertion failure when parsing C<sort> with debugging enabled has been
fixed.  [perl #122771]

=item *

C<*a = *b; @a = split //, $b[1]> could do a bad read and produce junk
results.

=item *

In C<() = @array = split>, the C<() => at the beginning no longer confuses
the optimiser, making it assume a limit of 1.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.21.4..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
