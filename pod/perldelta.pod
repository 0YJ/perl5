=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.19.7

=head1 DESCRIPTION

This document describes differences between the 5.19.6 release and the 5.19.7
release.

If you are upgrading from an earlier release such as 5.19.5, first read
L<perl5196delta>, which describes differences between 5.19.5 and 5.19.6.

=head1 Core Enhancements

=head2 Postfix syntax for maximum array index

The postfix notation C<< ->$#* >> has been added, to match the similar
postfix operators added in 5.19.5.  C<< $foo->$#* >> is equivalent to
C<$#$foo>.  See L<perlref>.

=head1 Incompatible Changes

=head2 Data::Dumper's output may change

Depending on the data structures dumped and the settings set for
Data::Dumper, the dumped output may have changed from previous
versions.

If you have tests that depend on the exact output of Data::Dumper,
they may fail.

To avoid this problem in your code, test against the data structure
from evaluating the dumped structure, instead of the dump itself.

=head1 Deprecations

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

=head2 C<< CGI.pm >>

The C<< CGI.pm >> module has been deprecated since version 3.64.

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<base> has been upgraded from version 2.19 to 2.20.

C<base> now only ignores load failure on the requested module. [perl
#120685]

=item *

L<CGI> has been upgraded from version 3.63 to 3.64.

Avoids a warning about "undefined variable in user_agent" in some cases, and
updates L<CGI::Cookie> documentation to reflect that "HttpOnly" is widely
supported.

=item *

L<Data::Dumper> has been upgraded from version 2.149 to 2.150.

Regular expression objects are now dumped in a form closer to their
original source, eg. C< qr/abc/i > is dumped as exactly that instead of
C< qr/(?^i:abc)/ >. [perl #82948]

Dumping of hash keys is now more consistent between the XS and perl
implementations of L<Data::Dumper>, including how the C<quotekeys>
option behaves.  This may make tests that depend on the exact output
of Data::Dumper to fail. [perl #120384]

=item *

L<File::Fetch> has been upgraded from version 0.44 to 0.46.

Blacklists "ftp" on DragonflyBSD.

=item *

L<SDBM_File> has been upgraded from 1.10 to 1.11.

Added access to SDBM constants and to opening SDBM files with explicit
page and directory file names. [perl #114350]

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

=head3 New Warnings

=over 4

=item *

L<Useless use of greediness modifier|perldiag/"Useless use of greediness modifier '%c' in regex; marked by <-- HERE in m/%s/">

This fixes [Perl #42957].

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

The error messages for C<my($a?$b$c)> and C<my(do{})> now mention
"conditional expression" and "do block", respectively, instead of reading
'Can't declare null operation in "my"'.

=back

=head1 Utility Changes

=head3 C<< Porting/corelist-perldelta.pl >>

=over 4

=item *

Ensure that the latest version of Module::CoreList is used when
running the script.

=back

=head1 Testing

=over 4

=item *

Various tests in F<t/porting/> are no longer skipped when the perl
F<.git> directory is outside the perl tree and pointed to by
C<$GIT_DIR>. [perl #120505]

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Windows

Experimental support for building with Intel C++ Compiler has been extended to
cover the dmake makefile (win32/makefile.mk) as well.

=back

=head1 Internal Changes

=over 4

=item *

The C<sv> argument in L<perlapi/sv_2pv_flags>, L<perlapi/sv_2iv_flags>,
L<perlapi/sv_2uv_flags>, and L<perlapi/sv_2nv_flags> and their older wrappers
sv_2pv, sv_2iv, sv_2uv, sv_2nv, is now non-NULL. Passing NULL now will crash.
When the non-NULL marker was introduced en masse in 5.9.3 the functions
were marked non-NULL, but since the creation of the SV API in 5.0 alpha 2, if
NULL was passed, the functions returned 0 or false-type values. The code that
supports C<sv> argument being non-NULL dates to 5.0 alpha 2 directly, and
indirectly to Perl 1.0 (pre 5.0 api). The lack of documentation that the
functions accepted a NULL C<sv> was corrected in 5.11.0 and between 5.11.0
and 5.19.5 the functions were marked NULLOK. As an optimization the NULLOK code
has now been removed, and the functions became non-NULL marked again, because
core getter-type macros never pass NULL to these functions and would crash
before ever passing NULL.

The only way a NULL C<sv> can be passed to sv_2*v* functions is if XS code
directly calls sv_2*v*. This is unlikely as XS code uses Sv*V* macros to get
the underlying value out of the SV. One possible situation which leads to
a NULL C<sv> being passed to sv_2*v* functions, is if XS code defines its own
getter type Sv*V* macros, which check for NULL B<before> dereferencing and
checking the SV's flags through public API Sv*OK* macros or directly using
private API C<SvFLAGS>, and if C<sv> is NULL, then calling the sv_2*v functions
with a NULL litteral or passing the C<sv> containing a NULL value.

=back

=head1 Selected Bug Fixes

=over 4

=item *

C<< semctl(..., SETVAL, ...) >> would set the semaphore to the top
32-bits of the supplied integer instead of the bottom 32-bits on
64-bit big-endian systems. [perl #120635]

=item *

A regression since v5.18.0 has been fixed in which C<qr/[[:^ascii:]]/d>
failed to match any character in the range C<\x80> - C<\xFF> if its
surrounding character class contained anything else.  (That is, the bug
didn't happen if the C<[:^ascii:]> was the only element of the character
class.) [perl #120799]

=item *

C<< readdir() >> now only sets C<$!> on error.  C<$!> is no longer set
to C<EBADF> when then terminating C<undef> is read from the directory
unless the system call sets C<$!>. [perl #118651]

=item *

C<&CORE::glob> no longer causes an intermittent crash due to perl's stack
getting corrupted. [perl #119993]

=item *

C<open> with layers that load modules (e.g., "<:encoding(utf8)") no longer
runs the risk of crashing due to stack corruption.

=item *

When a reference to a reference to an overloaded object was returned from
a regular expression C<(??{...})> code block, an incorrect implicit
dereference could take place if the inner reference had been returned by
a code block previously.

=item *

A tied variable returned from C<(??{...})> sees the inner values of match
variables (i.e., the $1 etc. from any matches inside the block) in its
FETCH method.  This was not the case if a reference to an overloaded object
was the last thing assigned to the tied variable.  Instead, the match
variables referred to the outer pattern during the FETCH call.

=item *

Perl 5.18 broke autoloading via C<< ->SUPER::foo >> method calls by looking
up AUTOLOAD from the current package rather than the current package's
superclass.  This has been fixed. [perl #120694]

=item *

A longstanding bug causing C<do {} until CONSTANT>, where the constant
holds a true value, to read unallocated memory has been resolved.  This
would usually happen after a syntax error.  In past versions of Perl it has
crashed intermittently. [perl #72406]

=item *

Fix HP-UX $! failure. HP-UX strerror() returns an empty string for an
unknown error code.  This caused an assertion to fail under DEBUGGING
builds.  This patch removes the assertion and changes the return into
a non-empty string indicating the errno is for an unknown error.

=item *

Fix unexpected tainting via regexp using locale. Previously, under certain
conditions, the use of character classes could cause tainting when it 
shouldn't. Some character classes are locale-dependent, but before this
patch, sometimes tainting was happening even for character classes that
don't depend on the locale. [perl #120675]

=item *

Under certain conditions, Perl would throw an error if in an lookbehind
assertion in a regexp, the assertion referred to a named subpattern,
complaining the lookbehind was variable when it wasn't. This has been
fixed. [perl #120600], [perl #120618]. The current fix may be improved
on in the future.

=back

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.19.7..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
