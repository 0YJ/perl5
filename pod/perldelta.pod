=encoding utf8

=for comment
A Windows-specific commit that may need mention (does this have any
user-visible effects?):
0c38a57 Remove exports of dummy set[ug]id functions on Windows

=head1 NAME

[ this is a template for a new perldelta file.  Any text flagged as XXX needs
to be processed before release. ]

perldelta - what is new for perl v5.17.5

=head1 DESCRIPTION

This document describes differences between the 5.17.4 release and the 5.17.5
release.

If you are upgrading from an earlier release such as 5.17.3, first read
L<perl5174delta>, which describes differences between 5.17.3 and 5.17.4.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here.  Summarize user-visible core language
enhancements.  Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head2 Upgrade to Unicode 6.2

Perl now supports the final version of Unicode 6.2.  Earlier releases in
the 5.17 series supported Unicode 6.2 beta versions.  There were no
substantive changes in the final Unicode 6.2 version from the most
recent beta, included in Perl 5.17.4.  A list of changes from Unicode
6.1 is at L<http://www.unicode.org/versions/Unicode6.2.0>.

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX
    If any exist, they are bugs, and we request that you submit a
    report.  See L</Reporting Bugs> below.

[ List each incompatible change as a =head2 entry ]

=head2 New Restrictions in Multi-Character Case-Insensitive Matching in Regular Expression Bracketed Character Classes

Unicode has now withdrawn their previous recommendation for regular
expressions to automatically handle cases where a single character can
match multiple characters case-insensitively; for example, the letter
LATIN SMALL LETTER SHARP S and the sequence C<ss>.  This is because
it turns out to be impracticable to do this correctly in all
circumstances.  Because Perl has tried to do this as best it can, it
will continue to do so.  (We are considering an option to turn it off.)
However, a new restriction is being added on such matches when they
occur in [bracketed] character classes.  People were specifying
things such as C</[\0-\xff]/i>, and being surprised that it matches the
two character sequence C<ss> (since LATIN SMALL LETTER SHARP S occurs in
this range).  This behavior is also inconsistent with the using a
property instead of a range:  C<\p{Block=Latin1}> also includes LATIN
SMALL LETTER SHARP S, but C</[\p{Block=Latin1}]/i> does not match C<ss>.
The new rule is that for there to be a multi-character case-insensitive
match within a bracketed character class, the character must be
explicitly listed, and not as an end point of a range.  This more
closely obeys the Principle of Least Astonishment.  See
L<perlrecharclass/Bracketed Character Classes>.  Note that a bug [perl
#89774], now fixed as part of this change, prevented the previous
behavior from working fully.

=head2 Change to Warnings About Lexical Subroutines

The warnings category for lexical subroutines is now
"experimental::lexical_subs", with two colons, not
"experimental:lexical_subs";

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.  In
particular, deprecated modules should be listed here even if they are listed as
an updated module in the L</Modules and Pragmata> section.

[ List each deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here.
There may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>, which prints stub
entries to STDOUT.  Results can be pasted in place of the '=head2' entries
below.  A paragraph summary for important changes should then be added by hand.
In an ideal world, dual-life modules would have a F<Changes> file that could be
cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<B::Deparse> has been upgraded from version 1.17 to 1.18.  It no longer
dies when deparsing C<sort> without arguments.  It now correctly omits the
comma for C<system $prog @args> and C<exec $prog @args>.

=item *

L<bignum>, L<bigint> and L<bigrat> have been upgraded from version 0.30 to
0.31.  The overrides for C<hex> and C<oct> have been rewritten, eliminating
several problems, and making one incompatible change:

=over

=item *

Formerly, whichever of C<use bigint> or C<use bigrat> was compiled later
would take precedence over the other, causing C<hex> and C<oct> not to
respect the other pragma when in scope.

=item *

Using any of these three pragmata would cause C<hex> and C<oct> anywhere
else in the program to evalute their arguments in list context and prevent
them from inferring $_ when called without arguments.

=item *

Using any of these three pragmata would make C<oct("1234")> return 1234
(for any number not beginning with 0) anywhere in the program.  Now "1234"
is translated from octal to decimal, whether within the pragma's scope or
not.

=item *

The global overrides that facilitate lexical use of C<hex> and C<oct> now
respect any existing overrides that were in place before the new overrides
were installed, falling back to them outside of the scope of C<use bignum>.

=item *

C<use bignum "hex">, C<use bignum "oct"> and similar invocations for bigint
and bigrat now export a C<hex> or C<oct> function, instead of providing a
global override.

=back

=item *

L<Carp> has been upgraded from version 1.26 to 1.27.  The C<longmess()> and
C<shortmess()> functions are now documented.

=item *

L<ExtUtils::CBuilder> has been upgraded from version 0.280208 to 0.280209.  A
list of symbols to export can now be passed to C<link()> when on Windows, as on
other OSes [perl #115100].

=item *

L<File::Glob> has been upgraded from version 1.17 to 1.18.  A
space-separated list of patterns return long lists of results no longer
results in memory corruption or crashes.  This bug was introduced in Perl
5.16.0.  [perl #114984]

=item *

L<PerlIO::encoding> has been upgraded from version 0.15 to 0.16.  This is
the module implementing the ":encoding(...)" I/O layer.  It no longer
corrupts memory or crashes when the encoding back-end reallocates the
buffer or gives it a typeglob or shared hash key scalar.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

The error produced when a module cannot be loaded now includes a hint that
the module may need to be installed: "Can't locate hopping.pm in @INC (you
may need to install the hopping module) (@INC contains: ...)"

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go here.
Most of these are built within the directories F<utils> and F<x2p>.

[ List utility changes as a =head3 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head3 L<h2xs>

=over 4

=item *

F<h2xs> no longer produces invalid code for empty defines.  [perl #20636]

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item MPE/IX

Support for MPE/IX has been removed.

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.  Other
significant internal changes for future core maintainers should be noted as
well.

[ List each change as a =item entry ]

=over 4

=item *

Case-insensitive matching inside a [bracketed] character class with a
multi-character fold, no longer excludes one of the possibilities in the
circumstances that it used to. [perl #89774].

=item *

C<PL_formfeed> has been removed.

=item *

The regular expression engine no longer reads one byte past the end of the
target string.  While for all internally well-formed scalars this should
never have been a problem, this change facilitates clever tricks with
string buffers in CPAN modules.  [perl #73542]

=item *

Inside a BEGIN block, C<PL_compcv> now points to the currently-compiling
subroutine, rather than the BEGIN block itself.

=item *

C<mg_length> has been deprecated.

=item *

C<sv_len> now always returns a byte count and C<sv_len_utf8> a character
count.  Previously, C<sv_len> and C<sv_len_utf8> were both buggy and would
sometimes returns bytes and sometimes characters.  C<sv_len_utf8> no longer
assumes that its argument is in UTF8.  Neither of these creates UTF8 caches
for tied or overloaded values or for non-PVs any more.

=item *

C<sv_mortalcopy> now copies string buffers of shared hash key scalars when
called from XS modules [perl #79824].

=item *

C<RXf_SPLIT> and C<RXf_SKIPWHITE> are no longer used.  They are now
#defined as 0.

=item *

The new C<RXf_MODIFIES_VARS> flag can be set by custom regular expression
engines to indicate that the execution of the regular expression may cause
variables to be modified.  This lets C<s///> know to skip certain
optimisations.  Perl's own regular expression engine sets this flag for the
special backtracking verbs that set $REGMARK and $REGERROR.

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here.  Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

A bug, case-insensitive regex with UTF8-flagged strings, introduced
earlier in the 5.17 series has been fixed.  [perl #114982]

=item *

Attributes applied to lexical variables no longer leak memory.
[perl #114764]

=item *

C<dump>, C<goto>, C<last>, C<next>, C<redo> or C<require> followed by a
bareword (or version) and then an infix operator is no longer a syntax
error.  It used to be for those infix operators (like C<+>) that have a
different meaning where a term is expected.  [perl #105924]

=item *

C<require a::b . 1> and C<require a::b + 1> no longer produce erroneous
ambiguity warnings.  [perl #107002]

=item *

Class method calls are now allowed on any string, and not just strings
beginning with an alphanumeric character.  [perl #105922]

=item *

An empty pattern created with C<qr//> used in C<m///> no longer triggers
the "empty pattern reuses last pattern" behaviour.  [perl #96230]

=item *

Tying a hash during iteration no longer results in a memory leak.

=item *

Freeing a tied hash during iteration no longer results in a memory leak.

=item *

List assignment to a tied array or hash that dies on STORE no longer
results in a memory leak.

=item *

If the hint hash (C<%^H>) is tied, compile-time scope entry (which copies
the hint hash) no longer leaks memory if FETCH dies.  [perl #107000]

=item *

Constant folding no longer inappropriately triggers the special
C<split " "> behaviour.  [perl #94490]

=item *

C<defined scalar(@array)>, C<defined do { &foo }>, and similar constructs
now treat the argument to C<defined> as a simple scalar.  [perl #97466]

=item *

Running a custom debugging that defines no C<*DB::DB> glob or provides a
subroutine stub for C<&DB::DB> no longer results in a crash, but an error
instead.  [perl #114990]

=item *

C<reset ""> now matches its documentation.  C<reset> only resets C<m?...?>
patterns when called with no argument.  An empty string for an argument now
does nothing.  (It used to be treated as no argument.)  [perl #97958]

=item *

C<printf> with an argument returning an empty list no longer reads past the
end of the stack, resulting in erratic behaviour.  [perl #77094]

=item *

C<--subname> no longer produces erroneous ambiguity warnings.
[perl #77240]

=item *

C<v10> is now allowed as a label or package name.  This was inadvertently
broken when v-strings were added in Perl 5.6.  [perl #56880]

=item *

A regression introduced in 5.17.2 has been fixed, which made C</[\@\\]||/>
result in a "panic" error.  [perl #115050]

=item *

C<length>, C<pos>, C<substr> and C<sprintf> could be confused by ties,
overloading, references and typeglobs if the stringification of such
changed the internal representation to or from UTF8.  [perl #114410]

=item *

utf8::encode now calls FETCH and STORE on tied variables.  utf8::decode now
calls STORE (it was already calling FETCH).

=item *

C<$tied =~ s/$non_utf8/$utf8/> no longer loops infinitely if the tied
variable returns a Latin-1 string, shared hash key scalar, or reference or
typeglob that stringifies as ASCII or Latin-1.  This is a regression from
5.12.x.

=item *

C<s///> without /e is now better at detecting when it needs to forego
certain optimisations, fixing some buggy cases:

=over

=item *

Match variables in certain constructs (C<&&>, C<||>, C<..> and others) in
the replacement part; e.g., C<s/(.)/$l{$a||$1}/g>.  [perl #26986]

=item *

Aliases to match variables in the replacement.

=item *

$REGERROR or $REGMARK in the replacement.  [perl #49190]

=item *

An empty pattern (C<s//$foo/>) that causes the last-successful pattern to
be used, when that pattern contains code blocks that modify the variables
in the replacement.

=back

=item *

The taintedness of the replacement string no longer affects the taintedness
of the return value of C<s///e>.

=item *

The C<$|> autoflush variable is created on-the-fly when needed.  If this
happened (e.g., if it was mentioned in a module or eval) when the
currently-selected filehandle was a typeglob with an empty IO slot, it used
to crash.  [perl #115206]

=item *

Line numbers at the end of a string eval are no longer off by one.
[perl #114658]

=item *

@INC filters (subroutines returned by subroutines in @INC) that set $_ to a
copy-on-write scalar no longer cause the parser to modify that string
buffer in place.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.17.4..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
http://rt.perl.org/perlbug/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
