=encoding utf8

=for rafl
changelogged up to commit d5da2b2
* PERL_STATIC_INLINE might want to be mentioned
* 5648c0a and 254f8c6 added an optimisation for backrefs. probably not worth
mentioning
* RT#67838 needs mentioning. e2fe06d to 2154eca

=head1 NAME

[ this is a template for a new perldelta file. Any text flagged as
XXX needs to be processed before release. ]

perldelta - what is new for perl v5.13.4

=head1 DESCRIPTION

This document describes differences between the 5.13.4 release and
the 5.13.3 release.

If you are upgrading from an earlier release such as 5.13.2, first read
L<perl5133delta>, which describes differences between 5.13.2 and
5.13.3.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

=head2 C<srand()> now returns the seed

This allows programs which need to have repeatable results to not have to come
up with their own seed generating mechanism.  Instead, they can use C<srand()>
and somehow stash the return for future use.  Typical is a test program which
has too many combinations to test comprehensively in the time available to it
each run.  It can test a random subset each time, and should there be a failure,
log the seed used for that run so that it can later be used to reproduce the
exact results.

=head2 Creating unary functions with prototypes

Calls to functions created with the following prototypes are now correctly parsed

Functions declared with the following prototypes now behave correctly as unary functions:

=over 4

=item *

*

=item *

\sigil

=item *

\[...]

=item *

;$

=item *

;*

=item *

;\sigil

=item *

;\[...]

=back

=head2 C<\N{I<name>}> and C<charnames> enhancements

C<\N{}>, C<charnames::vianame>, C<charnames::viacode> now know about every
character in Unicode.  Previously, they didn't know about the Hangul syllables
nor a number of CJK (Chinese/Japanese/Korean) characters.

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

=head2 Declare API incompatibility between blead releases

Only stable releases (5.10.x, 5.12.x, 5.14.x, ...) guarantee binary
compatibility with each other, while blead releases (5.13.x, 5.15.x, ...) often
break this compatibility. However, prior to perl 5.13.4, all blead releases had
the same C<PERL_API_REVISION>, C<PERL_API_VERSION>, and C<PERL_API_SUBVERSION>,
effectively declaring them as binary compatible, which they weren't. From now
on, blead releases will have a C<PERL_API_SUBVERSION> equal to their
C<PERL_SUBVERSION>, explicitly marking them as incompatible with each other.

Maintainance releases of stable perl versions will continue to make no
intentionally incompatible API changes.

=head2 Check API compatibility when loading XS modules

When perl's API changes in incompatible ways (which usually happens between
every major release), XS modules compiled for previous versions of perl will not
work anymore. They will need to be recompiled against the new perl.

In order to ensure that modules are recompiled, and to prevent users from
accidentally loading modules compiled for old perls into newer ones, the
C<XS_APIVERSION_BOOTCHECK> macro has been added. That macro, which is called
when loading every newly compiled extension, compares the API version of the
running perl with the version a module has been compiled for and raises an
exception if they don't match.

=head2 Binary Incompatible with all previous Perls

Some bit fields have been reordered, hence this release will not be binary
comptible with any previous Perl release.

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.
In particular, deprecated modules should be listed here even if they are
listed as an updated module in the L</Modules and Pragmata> section.

[ List each deprecation as a =head2 entry ]

=head2 List assignment to C<$[>

After assignment to C<$[> has been deprecated and started to give warnings in
perl version 5.12.0, this version of perl also starts to emit a warning when
assigning to C<$[> in list context. This fixes an oversight in 5.12.0.

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

[ List each enhancement as a =item * entry ]

=over 4

=item *

Make string appending 100 times faster

When doing a lot of string appending, perl could end up allocating a lot more
memory than needed in a very inefficient way, if perl was configured to use the
system's C<malloc> implementation instead of its own.

C<sv_grow>, which is what's being used to allocate more memory if necessary when
appending to a string, has now been teached how to round up the memory it
requests to a certain geometric progression, making it much faster on certain
platforms and configurations. On Win32, it's now about 100 times faster.

=item *

C<XPV>, C<XPVIV>, and C<XPVNV> now only allocate the parts of the C<SV> body
they actually use, saving some space.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>, which prints stub
entries to STDOUT.  Results can be pasted in place of the '=head2' entries
below.  A paragraph summary for important changes should then be added by hand.
In an ideal world, dual-life modules would have a F<Changes> file that could be
cribbed.

[ Within each section, list entries as a =item NAME entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item C<Archive::Tar>

Upgraded from version 1.64 to 1.66.

Among other things, the new version adds a new option to C<ptar> to allow safe
creation of tarballs without world-writable files on Windows, allowing those
archives to be uploaded to CPAN.

=item C<B::Lint>

Upgraded from version 1.11 to 1.12.

=item C<Carp>

Upgraded from version 1.16 to 1.18.

L<Carp> now detects incomplete L<caller()|perlfunc/"caller EXPR"> overrides and
avoids using bogus C<@DB::args>. This fixes certain cases of C<Bizarre copy of
ARRAY> caused by modules overriding C<caller()> incorrectly.

=item C<Compress::Raw::Bzip2>

Upgraded from version 2.027 to 2.030.

=item C<Compress::Raw::Zlib>

Upgraded from version 2.027 to 2.030.

=item C<File::Spec>

Upgraded from version 3.31 to 3.31_01.

Various issues in L<File::Spec::VMS> have been fixed.

=item C<IO::Compress>

Upgraded from version 2.027 to 2.030.

=item C<Test::Harness>

Upgraded from version 3.21 to 3.22.

=item C<Test::Simple>

Upgraded from version 0.94 to 0.96.

Among many other things, subtests without a C<plan> or C<no_plan> now have an
implicit C<done_testing()> added to them.

=item C<Unicode::Collate>

Upgraded from version 0.53 to 0.56.

Among other things, it is now using UCA Revision 20 (based on Unicode 5.2.0) and
supports a couple of new locales.

=item C<feature>

Upgraded from version 1.17 to 1.18.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<perldiag>

=over 4

=item *

The following existing diagnostics are now documented:

=over 4

=item *

L<Ambiguous use of %c resolved as operator %c|perldiag/"Ambiguous use of %c resolved as operator %c">

=item *

L<Ambiguous use of %c{%s} resolved to %c%s|perldiag/"Ambiguous use of %c{%s} resolved to %c%s">

=item *

L<Ambiguous use of %c{%s%s} resolved to %c%s%s|perldiag/"Ambiguous use of %c{%s%s} resolved to %c%s%s">

=item *

L<Ambiguous use of -%s resolved as -&%s()|perldiag/"Ambiguous use of -%s resolved as -&%s()">

=item *

L<Invalid strict version format (%s)|perldiag/"Invalid strict version format (%s)">

=item *

L<Invalid version format (%s)|perldiag/"Invalid version format (%s)">

=item *

L<Invalid version object|perldiag/"Invalid version object">

=back

=back

=head3 L<perlport>

=over 4

=item *

Documented a L<limitation|perlport/alarm> of L<alarm()|perlfunc/"alarm SECONDS">
on Win32.

=back

=head3 L<perlre>

=over 4

=item *

Minor fix to a multiple scalar match example.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here. Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

[ Within each section, list entries as a =item entry ]

=head2 New Diagnostics

XXX Newly added diagnostic messages go here

=over 4

=item *

XXX

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go
here. Most of these are built within the directories F<utils> and F<x2p>.

[ List utility changes as a =head3 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head3 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

Compatibility with C<C++> compilers has been improved.

=item *

On compilers that support it, C<-Wwrite-strings> is now added to cflags by
default.

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarising, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

F<t/op/print.t> has been added to test implicit printing of C<$_>.

=item *

F<t/io/errnosig.t> has been added to test for restoration of of C<$!> when
leaving signal handlers.

=item *

F<t/op/tie_fetch_count.t> has been added to see if C<FETCH> is only called once
on tied variables.

=item *

F<lib/Tie/ExtraHash.t> has been added to make sure the, previously untested,
L<Tie::ExtraHash> keeps working.

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms. This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item Win32

=over 4

=item *

Fixed a possible hang in F<t/op/readline.t>.

=item *

Fixed Makefile for SDK2003SP1 compilers.

=item *

When using old 32-bit compilers, the define C<_USE_32BIT_TIME_T> will now be set
in C<$Config{ccflags}>. This improves portability when compiling XS extensions
using new compilers, but for a perl compiled with old 32-bit compilers.

=back

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.
Other significant internal changes for future core maintainers should
be noted as well.

[ List each test improvement as a =item entry ]

=over 4

=item Removed C<PERL_POLLUTE>

The option to define C<PERL_POLLUTE> to expose older 5.005 symbols for backwards
compatibility has been removed. It's use was always discouraged, and MakeMaker
contains a more specific escape hatch:

    perl Makefile.PL POLLUTE=1

This can be used for modules that have not been upgraded to 5.6 naming
conventions (and really should be completely obsolete by now).

=item C<Perl_grok_bslash_o> and C<Perl_grok_bslash_c> may change in future

The functions C<Perl_grok_bslash_o> and C<Perl_grok_bslash_c>, which are public
and exported for use by dynamic extensions, are now marked as being able to
change their interface in the future.

In fact, C<Perl_grok_bslash_o> already changed its interface in this release,
and returns a C<bool> instead of a C<char> now.

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

Fixed possible memory leak when using L<caller()|perlfunc/"caller EXPR"> to set
C<@DB::args>.

=item *

Several memory leaks when loading XS modules were fixed.

=item *

A panic in the regular expression optimizer has been fixed (RT#75762).

=item *

Assignments to lvalue subroutines now honor copy-on-write behavior again, which
has been broken since version 5.10.0 (RT#75656).

=item *

Assignments to glob copies now behave just like assignments to regular globs
(RT#1804).

=item *

Within signal handlers, C<$!> is now implicitly localized.

=item *

L<readline|perlfunc/"readline EXPR"> now honors C<< <> >> overloading on tied
arguments.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

This is a list of some significant unfixed bugs, which are regressions
from either 5.XXX.XXX or 5.XXX.XXX.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX The list of people to thank goes here.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
