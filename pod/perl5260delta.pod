=encoding utf8

=head1 NAME

perl5260delta - what is new for perl v5.26.0

=head1 DESCRIPTION

This document describes the differences between the 5.24.0 release and the
5.26.0 release.

=head1 Core Enhancements

=head2 Unicode 9.0 is now supported

A list of changes is at L<http://www.unicode.org/versions/Unicode9.0.0/>.
Modules that are shipped with core Perl but not maintained by p5p do not
necessarily support Unicode 9.0.  L<Unicode::Normalize> does work on 9.0.

=head2 Use of C<\p{I<script>}> uses the improved Script_Extensions property

Unicode 6.0 introduced an improved form of the Script (C<sc>) property, and
called it Script_Extensions (C<scx>).  As of now, Perl uses this improved
version when a property is specified as just C<\p{I<script>}>.  The meaning of
compound forms, like C<\p{sc=I<script>}> are unchanged.  This should make
programs be more accurate when determining if a character is used in a given
script, but there is a slight chance of breakage for programs that very
specifically needed the old behavior.  See L<perlunicode/Scripts>.

=head2 Declaring a reference to a variable

As an experimental feature, Perl now allows the referencing operator to come
after L<C<my()>|perlfunc/my>, L<C<state()>|perlfunc/state>,
L<C<our()>|perlfunc/our>, or L<C<local()>|perlfunc/local>.  This syntax must
be enabled with C<use feature 'declared_refs'>.  It is experimental, and will
warn by default unless C<no warnings 'experimental::refaliasing'> is in effect.
It is intended mainly for use in assignments to references.  For example:

    use experimental 'refaliasing', 'declared_refs';
    my \$a = \$b;

See L<perlref/Assigning to References> for slightly more detail.

=head2 Perl can now do default collation in UTF-8 locales on platforms
that support it

Some platforms natively do a reasonable job of collating and sorting in
UTF-8 locales.  Perl now works with those.  For portability and full
control, L<Unicode::Collate> is still recommended, but now you may
not need to do anything special to get good-enough results, depending on
your application.  See
L<perllocale/Category C<LC_COLLATE>: Collation: Text Comparisons and Sorting>.

=head2 Better locale collation of strings containing embedded C<NUL>
characters

In locales that have multi-level character weights, these are now
ignored at the higher priority ones.  There are still some gotchas in
some strings, though.  See
L<perllocale/Collation of strings containing embedded C<NUL> characters>.

=head2 Lexical subroutines are no longer experimental

Using the C<lexical_subs> feature no longer emits a warning. Existing
code that disables the C<experimental::lexical_subs> warning category
that the feature previously used will continue to work. The
C<lexical_subs> feature has no effect; all Perl code can use lexical
subroutines, regardless of what feature declarations are in scope.

=head2 C<CORE> subroutines for hash and array functions callable via
reference

The hash and array functions in the C<CORE> namespace--C<keys>, C<each>,
C<values>, C<push>, C<pop>, C<shift>, C<unshift> and C<splice>--, can now
be called with ampersand syntax (C<&CORE::keys(\%hash>) and via reference
(C<< my $k = \&CORE::keys; $k->(\%hash) >>).  Previously they could only be
used when inlined.

=head2 POSIX::tmpnam() has been removed

The fundamentally unsafe C<tmpnam()> interface was deprecated in
Perl 5.22.0 and has now been removed.  In its place you can use
for example the L<File::Temp> interfaces.

=head2 require ::Foo::Bar is now illegal.

Formerly, C<require ::Foo::Bar> would try to read F</Foo/Bar.pm>. Now any
bareword require which starts with a double colon dies instead.

=head2 Unescaped literal C<"{"> characters in regular expression
patterns are no longer permissible

You have to now say something like C<"\{"> or C<"[{]"> to specify to
match a LEFT CURLY BRACKET.  This will allow future extensions to the
language.  This restriction is not enforced, nor are there current plans
to enforce it, if the C<"{"> is the first character in the pattern.

These have been deprecated since v5.16, with a deprecation message
displayed starting in v5.22.

=head2 Literal control character variable names are no longer permissible

A variable name may no longer contain a literal control character under
any circumstances.  These previously were allowed in single-character
names on ASCII platforms, but have been deprecated there since Perl
v5.20.  This affects things like C<$I<\cT>>, where I<\cT> is a literal
control (such as a C<NAK> or C<NEGATIVE ACKNOWLEDGE> character) in the
source code.

=head2 C<qr//xx> is no longer permissible

Using more than one C</x> regular expression pattern modifier on a
single pattern is now forbidden.  This is to allow a future enhancement
to the language.  This usage has been deprecated since v5.22.

=head2 C<NBSP> is no longer permissible in C<\N{...}>

The name of a character may no longer contain non-breaking spaces.  It
has been deprecated to do so since Perl v5.22.

=head1 Security

=head2 C<-Di> switch is now required for PerlIO debugging output

Previously PerlIO debugging output would be sent to the file specified
by the C<PERLIO_DEBUG> environment variable if perl wasn't running
setuid and the C<-T> or C<-t> switches hadn't been parsed yet.

If perl performed output at a point where it hadn't yet parsed its
switches this could result in perl creating or overwriting the file
named by C<PERLIO_DEBUG> even when the C<-T> switch had been supplied.

Perl now requires the C<-Di> switch to produce PerlIO debugging
output.  By default this is written to C<stderr>, but can optionally
be redirected to a file by setting the C<PERLIO_DEBUG> environment
variable.

If perl is running setuid or the C<-T> switch has supplied
C<PERLIO_DEBUG> is ignored and the debugging output is sent to
C<stderr> as for any other C<-D> switch.

=head1 Incompatible Changes

=head2 C<${^ENCODING}> has been removed

Consequently, the L<encoding> pragma's default mode is no longer supported.  If
you still need to write your source code in encodings other than UTF-8, use a
source filter such as L<Filter::Encoding> on CPAN or L<encoding>'s C<Filter>
option.

=head2 C<scalar(%hash)> return signature changed

The value returned for C<scalar(%hash)> will no longer show information about
the buckets allocated in the hash.  It will simply return the count of used
keys.  It is thus equivalent to C<0+keys(%hash)>.

A form of backwards compatibility is provided via C<Hash::Util::bucket_ratio()>
which provides the same behavior as C<scalar(%hash)> provided prior to Perl
5.25.

=head2 C<keys> returned from an lvalue subroutine

C<keys> returned from an lvalue subroutine can no longer be assigned
to in list context.

    sub foo : lvalue { keys(%INC) }
    (foo) = 3; # death
    sub bar : lvalue { keys(@_) }
    (bar) = 3; # also an error

This makes the lvalue sub case consistent with C<(keys %hash) = ...> and
C<(keys @_) = ...>, which are also errors.  [perl #128187]

=head1 Performance Enhancements

=over 4

=item *

Bareword constant strings are now permitted to take part in constant
folding. They were originally exempted from constant folding in August 1999,
during the development of Perl 5.6, to ensure that C<use strict "subs">
would still apply to bareword constants. That has now been accomplished a
different way, so barewords, like other constants, now gain the performance
benefits of constant folding.

This also means that void-context warnings on constant expressions of
barewords now report the folded constant operand, rather than the operation;
this matches the behaviour for non-bareword constants.

=back

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<encoding> has been upgraded from version 2.17 to 2.17_01.

This module's default mode is no longer supported as of Perl 5.25.3.  It now
dies when imported, unless the C<Filter> option is being used.

=item *

L<encoding::warnings> has been upgraded from version 0.12 to 0.13.

This module is no longer supported as of Perl 5.25.3.  It emits a warning to
that effect and then does nothing.

=item *

L<POSIX> has been upgraded from version 1.65 to 1.69. This remedies several
defects in making its symbols exportable. [perl #127821]
The C<POSIX::tmpnam()> interface has been removed,
see L</"POSIX::tmpnam() has been removed">.
Trying to import POSIX subs that have no real implementations
(like C<POSIX::atend()>) now fails at import time, instead of
waiting until runtime.

=item *

L<threads> has been upgraded from version 2.07 to 2.08. Compatibility
with 5.8 has been restored.

=item *

L<XSLoader> has been upgraded from version 0.21 to 0.22, fixing a security hole
in which binary files could be loaded from a path outside of
L<C<@INC>|perlvar/@INC>.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perlcommunity>

=over 4

=item *

All references to Usenet have been removed.

=back

=head3 L<perldata>

=over 4

=item *

Updated documentation of C<scalar(%hash)>.  See L</scalar(%hash) return
signature changed> above.

=back

=head3 L<perldelta>

=over 4

=item *

All references to Usenet have been removed.

=back

=head3 L<perlexperiment>

=over 4

=item *

Documented new feature: See L</Declaring a reference to a variable> above.

=back

=head3 L<perlfunc>

=over 4

=item *

Clarified documentation of L<C<seek()>|perlfunc/seek>,
L<C<tell()>|perlfunc/tell> and L<C<sysseek()>|perlfunc/sysseek>.
L<[perl #128607]|https://rt.perl.org/Public/Bug/Display.html?id=128607>

=item *

Removed obsolete documentation of L<C<study()>|perlfunc/study>.

=back

=head3 L<perllocale>

=over 4

=item *

Document NUL collation handling.

=back

=head3 L<perlmodinstall>

=over 4

=item *

All references to Usenet have been removed.

=back

=head3 L<perlmodlib>

=over 4

=item *

Updated the mirror list.

=item *

All references to Usenet have been removed.

=back

=head3 L<perlnewmod>

=over 4

=item *

All references to Usenet have been removed.

=back

=head3 L<perlsec>

=over 4

=item *

Fixed link to Crosby paper on hash complexity attack.

=back

=head3 L<perlref>

=over 4

=item *

Documented new feature: See L</Declaring a reference to a variable> above.

=back

=head3 L<perltie>

=over 4

=item *

Updated documentation of C<scalar(%hash)>.  See L</scalar(%hash) return
signature changed> above.

=back

=head3 L<perlunicode>

=over 4

=item *

Documented change to C<\p{I<script>}> to now use the improved Script_Extensions
property.  See L</Use of \p{script} uses the improved Script_Extensions
property> above.

=item *

Updated the text to correspond with changes in Unicode UTS#18, concerning
regular expressions, and Perl compatibility with what it says.

=back

=head3 L<perlvar>

=over 4

=item *

Removed obsolete documentation of C<${^ENCODING}>.  See L</${^ENCODING} has
been removed> above.

=back

=head1 Diagnostics

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<The experimental declared_refs feature is not enabled|perldiag/"The experimental declared_refs feature is not enabled">

(F) To declare references to variables, as in C<my \%x>, you must first enable
the feature:

    no warnings "experimental::declared_refs";
    use feature "declared_refs";

=item *

L<Version control conflict marker|perldiag/"Version control conflict marker">

(F) The parser found a line starting with C<E<lt><<<<<<>,
C<E<gt>E<gt>E<gt>E<gt>E<gt>E<gt>E<gt>>, or C<=======>. These may be left by a
version control system to mark conflicts after a failed merge operation.

=item *

L<%s: command not found|perldiag/"%s: command not found">

(A) You've accidentally run your script through B<bash> or another shell
instead of Perl.  Check the #! line, or manually feed your script into
Perl yourself.  The #! line at the top of your file could look like:

  #!/usr/bin/perl

=item *

L<%s: command not found: %s|perldiag/"%s: command not found: %s">

(A) You've accidentally run your script through B<zsh> or another shell
instead of Perl.  Check the #! line, or manually feed your script into
Perl yourself.  The #! line at the top of your file could look like:

  #!/usr/bin/perl

=item *

L<Unescaped left brace in regex is deprecated here, passed through in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"Unescaped left brace in regex is deprecated here, passed through in regex; marked by S<<-- HERE> in m/%s/">

Unescaped left braces are already illegal in some contexts in regular
expression patterns, but, due to an oversight, no deprecation warning
was raised in other contexts where they are intended to become illegal.
This warning is now raised in these contexts.

=item *

L<Bareword in require contains "%s"|perldiag/"Bareword in require contains "%s"">

=item *

L<Bareword in require maps to empty filename|perldiag/"Bareword in require maps to empty filename">

=item *

L<Bareword in require maps to disallowed filename "%s"|perldiag/"Bareword in require maps to disallowed filename "%s"">

=item *

L<Bareword in require must not start with a double-colon: "%s"|perldiag/"Bareword in require must not start with a double-colon: "%s"">

=back

=head3 New Warnings

=over 4

=item *

L<Declaring references is experimental|perldiag/"Declaring references is experimental">

(S experimental::declared_refs) This warning is emitted if you use a reference
constructor on the right-hand side of C<my()>, C<state()>, C<our()>, or
C<local()>.  Simply suppress the warning if you want to use the feature, but
know that in doing so you are taking the risk of using an experimental feature
which may change or be removed in a future Perl version:

    no warnings "experimental::declared_refs";
    use feature "declared_refs";
    $fooref = my \$foo;

=item *

L<C<${^ENCODING}> is no longer supported|perldiag/"${^ENCODING} is no longer supported">

(D deprecated) The special variable C<${^ENCODING}>, formerly used to implement
the C<encoding> pragma, is no longer supported as of Perl 5.26.0.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<Unescaped left brace in regex is illegal here in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"Unescaped left brace in regex is illegal here in regex; marked by S<<-- HERE> in m/%s/">

The word "here" has been added to the message that was raised in
v5.25.1.  This is to indicate that there are contexts in which unescaped
left braces are not (yet) illegal.

=item *

Code like C<$x = $x . "a"> was incorrectly failing to yield a
L<use of uninitialized value|perldiag/"Use of uninitialized value%s">
warning when C<$x> was a lexical variable with an undefined value. That has
now been fixed. [perl #127877]

=item *

When the error "Experimental push on scalar is now forbidden" is raised for
the hash functions C<keys>, C<each>, and C<values>, it is now followed by
the more helpful message, "Type of arg 1 to whatever must be hash or
array". [perl #127976]

=item *

C<undef *_; shift> or C<undef *_; pop> inside a subroutine, with no
argument to C<shift> or C<pop>, began crashing in Perl 5.14.0, but has now
been fixed.

=item *

C<< "string$scalar-E<gt>$*" >> now correctly prefers concat overloading to
string overloading if C<< $scalar-E<gt>$* >> returns an overloaded object,
bringing it into consistency with C<$$scalar>.

=item *

C<< /@0{0*-E<gt>@*/*0 >> and similar contortions used to crash, but no longer
do, but merely produce a syntax error. [perl #128171]

=item *

C<do> or C<require> with a reference or typeglob which, when stringified,
contains a null character started crashing in Perl 5.20.0, but has now been
fixed. [perl #128182]

=back

=head1 Utility Changes

=head2 L<perlbug>

=over 4

=item *

Long lines in the message body are now wrapped at 900 characters, to stay
well within the 1000-character limit imposed by SMTP mail transfer agents.
This is particularly likely to be important for the list of arguments to
C<Configure>, which can readily exceed the limit if, for example, it names
several non-default installation paths. This change also adds the first unit
tests for perlbug. [perl #128020]

=back

=head1 Configuration and Compilation

=over 4

=item *

F<Configure> now aborts if both "-Duselongdouble" and "-Dusequadmath" are
requested.
L<[perl #126203]|https://rt.perl.org/Public/Bug/Display.html?id=126203>

=item *

Fixed a bug in which F<Configure> could append "-quadmath" to the archname even
if it was already present.
L<[perl #128538]|https://rt.perl.org/Public/Bug/Display.html?id=128538>

=item *

Clang builds with "-DPERL_GLOBAL_STRUCT" or "-DPERL_GLOBAL_STRUCT_PRIVATE" have
been fixed (by disabling Thread Safety Analysis for these configurations).

=item *

F<make_ext.pl> no longer updates a module's F<pm_to_blib> file when no
files require updates.  This could cause dependencies, F<perlmain.c>
in particular, to be rebuilt unnecessarily.  [perl #126710]

=item *

The output of C<perl -V> has been reformatted so that each configuration
and compile-time option is now listed one per line, to improve
readability.

=item *

C<Configure> now builds C<miniperl> and C<generate_uudmap> if you
invoke it with C<-Dusecrosscompiler> but not C<-Dtargethost=somehost>.
This means you can supply your target platform C<config.sh>, generate
the headers and proceed to build your cross-target perl.  [perl #127234]

=item *

Builds with C<-Accflags=-DPERL_TRACE_OPS> now only dump the operator
counts when the environment variable C<PERL_TRACE_OPS> to be set to a
non-zero integer.  This allows C<make test> to pass on such a build.

=item *

When building with GCC 6 and link-time optimization (the C<-flto> option to
C<gcc>), C<Configure> was treating all probed symbols as present on the
system, regardless of whether they actually exist. This has been fixed.
[perl #128131]

=item *

The F<t/test.pl> library is used for internal testing of Perl itself, and
also copied by several CPAN modules. Some of those modules must work on
older versions of Perl, so F<t/test.pl> must in turn avoid newer Perl
features. Compatibility with Perl 5.8 was inadvertently removed some time
ago; it has now been restored. [perl #128052]

=item *

The build process no longer emits an extra blank line before building each
"simple" extension (those with only F<*.pm> and F<*.pod> files).

=back

=head1 Testing

=over 4

=item *

A new test script, F<t/op/decl-refs.t>, has been added to test the new feature,
"Declaring a reference to a variable".

=item *

A new test script, F<t/re/anyof.t>, has been added to test that the ANYOF nodes
generated by bracketed character classes are as expected.

=item *

F<t/harness> now tries really hard not to run tests outside of the Perl
source tree. [perl #124050]

=back

=head1 Internal Changes

=over 4

=item *

Perl no longer panics when switching into some locales on machines with
buggy C<strxfrm()> implementations in their libc. [perl #121734]

=item *

Perl is now built with the C<PERL_OP_PARENT> compiler define enabled by
default. To disable it, use the C<PERL_NO_OP_PARENT> compiler define.
This flag alters how the C<op_sibling> field is used in C<OP> structures,
and has been available optionally since perl 5.22.0.

See L<perl5220delta/"Internal Changes"> for more details of what this
build option does.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item VAX

VAX floating point formats are now supported.

=back

=head1 Selected Bug Fixes

=over 4

=item *

An assertion failure with C<%: = 0> has been fixed.
L<[perl #128238]|https://rt.perl.org/Public/Bug/Display.html?id=128238>

=item *

In Perl 5.18, the parsing of C<"$foo::$bar"> was accidentally changed, such
that it would be treated as C<$foo."::".$bar>.  The previous behavior, which
was to parse it as C<$foo:: . $bar>, has been restored.
L<[perl #128478]|https://rt.perl.org/Public/Bug/Display.html?id=128478>

=item *

Since Perl 5.20, line numbers have been off by one when perl is invoked with
the B<-x> switch.  This has been fixed.
L<[perl #128508]|https://rt.perl.org/Public/Bug/Display.html?id=128508>

=item *

Vivifying a subroutine stub in a deleted stash (e.g., C<delete $My::{"Foo::"};
\&My::Foo::foo>) no longer crashes.  It had begun crashing in Perl 5.18.
L<[perl #128532]|https://rt.perl.org/Public/Bug/Display.html?id=128532>

=item *

Some obscure cases of subroutines and file handles being freed at the same time
could result in crashes, but have been fixed.  The crash was introduced in Perl
5.22.
L<[perl #128597]|https://rt.perl.org/Public/Bug/Display.html?id=128597>

=item *

Code that looks for a variable name associated with an uninitialized value
could cause an assertion in cases where magic is involved, such as
C<$ISA[0][0]>.  This has now been fixed.
L<[perl #128253]|https://rt.perl.org/Public/Bug/Display.html?id=128253>

=item *

A crash caused by code generating the warning "Subroutine STASH::NAME
redefined" in cases such as C<sub P::f{} undef *P::; *P::f =sub{};> has been
fixed.  In these cases, where the STASH is missing, the warning will now appear
as "Subroutine NAME redefined".
L<[perl #128257]|https://rt.perl.org/Public/Bug/Display.html?id=128257>

=item *

Fixed an assertion triggered by some code that handles deprecated behavior in
formats, e.g. in cases like this:

    format STDOUT =
    @
    0"$x"

L<[perl #128255]|https://rt.perl.org/Public/Bug/Display.html?id=128255>

=item *

A possible divide by zero in string transformation code on Windows has been
avoided, fixing a crash when collating an empty string.
L<[perl #128618]|https://rt.perl.org/Public/Bug/Display.html?id=128618>

=item *

Some regular expression parsing glitches could lead to assertion failures with
regular expressions such as C</(?<=/> and C</(?<!/>.  This has now been fixed.
L<[perl #128170]|https://rt.perl.org/Public/Bug/Display.html?id=128170>

=item *

C< until ($x = 1) { ... } > and C< ... until $x = 1 > now properly
warn when syntax warnings are enabled.  [perl #127333]

=item *

socket() now leaves the error code returned by the system in C<$!> on
failure.  [perl #128316]

=item *

Assignment variants of any bitwise ops under the C<bitwise> feature would
crash if the left-hand side was an array or hash.  [perl #128204]

=item *

C<require> followed by a single colon (as in C<foo() ? require : ...> is
now parsed correctly as C<require> with implicit $_, rather than
C<require "">.  [perl #128307]

=item *

Scalar C<keys %hash> can now be assigned to consistently in all scalar
lvalue contexts.  Previously it worked for some contexts but not others.

=item *

List assignment to C<vec> or C<substr> with an array or hash for its first
argument used to result in crashes or "Can't coerce" error messages at run
time, unlike scalar assignment, which would give an error at compile time.
List assignment now gives a compile-time error, too.  [perl #128260]

=item *

Expressions containing an C<&&> or C<||> operator (or their synonyms C<and>
and C<or>) were being compiled incorrectly in some cases. If the left-hand
side consisted of either a negated bareword constant or a negated C<do {}>
block containing a constant expression, and the right-hand side consisted of
a negated non-foldable expression, one of the negations was effectively
ignored. The same was true of C<if> and C<unless> statement modifiers,
though with the left-hand and right-hand sides swapped. This long-standing
bug has now been fixed. [perl #127952]

=item *

C<reset> with an argument no longer crashes when encountering stash entries
other than globs. [perl #128106]

=item *

Assignment of hashes to, and deletion of, typeglobs named C<*::::::> no
longer causes crashes. [perl #128086]

=back

=head1 Known Problems

=over 4

=item *

Some modules have been broken by the L<context stack rework|/Internal Changes>.
These modules were relying on non-guaranteed implementation details in perl.
Their maintainers have been informed, and should contact perl5-porters for
advice if needed.  Below is a subset of these modules:

=over 4

=item * L<Algorithm::Permute>

=item * L<Coro>

L<Coro> and perl v5.22.0 were already incompatible due to a change in the perl,
and the reworking on the perl context stack creates a further incompatibility.
perl5-porters has L<discussed the issue on the mailing
list|http://www.nntp.perl.org/group/perl.perl5.porters/2016/05/msg236174.html>.

=item * L<Data::Alias>

=item * L<RPerl>

=item * L<Scope::Upper>

=item * L<TryCatch>

=back

=item *

The module L<lexical::underscore> no longer works on perl v5.24.0, because perl
no longer has a lexical C<$_>!

=item *

C<mod_perl> has been patched for compatibility for v5.22.0 and later but no
release has been made.  The relevant patch (and other changes) can be found in
their source code repository, L<mirrored at
GitHub|https://github.com/apache/mod_perl/commit/82827132efd3c2e25cc413c85af61bb63375da6e>.

=back

=head1 Errata From Previous Releases

=over 4

=item *

Parsing bad POSIX charclasses no longer leaks memory.  This was fixed in Perl
5.25.2
L<[perl #128313]|https://rt.perl.org/Public/Bug/Display.html?id=128313>

=item *

Fixed issues with recursive regexes.  The behavior was fixed in Perl 5.24.0.
L<[perl #126182]|https://rt.perl.org/Public/Bug/Display.html?id=126182>

=back

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.24.0..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
